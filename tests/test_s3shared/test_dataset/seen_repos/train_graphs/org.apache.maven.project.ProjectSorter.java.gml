<?xml version="1.0" ?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd"><key id="reference" for="node" attr.name="reference" attr.type="string"></key><key id="identifier" for="node" attr.name="identifier" attr.type="string"></key><key id="modifier" for="node" attr.name="modifier" attr.type="string"></key><key id="text" for="node" attr.name="text" attr.type="string"></key><key id="type" for="node" attr.name="type" attr.type="string"></key><key id="parentType" for="node" attr.name="parentType" attr.type="string"></key><key id="type" for="edge" attr.name="type" attr.type="string"></key><graph id="G" edgedefault="directed"><node id="1220"><data key="reference"></data><data key="text">void</data><data key="type">VoidType</data><data key="parentType">MethodDeclaration</data></node><node id="1462"><data key="reference"></data><data key="modifier"></data><data key="text">String id</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1461"><data key="reference">userDefinedMethodName</data><data key="identifier">getDependents</data><data key="text">getDependents</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1460"><data key="reference"></data><data key="modifier">public</data><data key="text">public List getDependents(String id) {
    return dag.getParentLabels(id);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1217"><data key="reference"></data><data key="text">Set</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1459"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1216"><data key="reference"></data><data key="modifier"></data><data key="text">Set visited</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1458"><data key="reference">otherMethodCall</data><data key="identifier">size</data><data key="text">size</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1215"><data key="reference">java.util.Set</data><data key="identifier">out</data><data key="text">out</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1457"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1214"><data key="reference">nonQualifiedClassName</data><data key="identifier">Set</data><data key="text">Set</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1456"><data key="reference"></data><data key="text">sortedProjects.size()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="1213"><data key="reference"></data><data key="text">Set</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1455"><data key="reference"></data><data key="text">sortedProjects.size() &gt; 1</data><data key="type">BinaryExpr</data><data key="parentType">ReturnStmt</data></node><node id="1212"><data key="reference"></data><data key="modifier"></data><data key="text">Set out</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1454"><data key="reference"></data><data key="text">return sortedProjects.size() &gt; 1;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1211"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1453"><data key="reference"></data><data key="text">{
    return sortedProjects.size() &gt; 1;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1210"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1452"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">MethodDeclaration</data></node><node id="1219"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1218"><data key="reference">nonQualifiedClassName</data><data key="identifier">Set</data><data key="text">Set</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1231"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1473"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1230"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1472"><data key="reference">otherMethodCall</data><data key="identifier">getParentLabels</data><data key="text">getParentLabels</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1471"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1470"><data key="reference"></data><data key="text">dag.getParentLabels(id)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="1228"><data key="reference"></data><data key="text">visited.add(v)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1"><data key="reference"></data><data key="text">package org.apache.maven.project;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.maven.artifact.ArtifactUtils;
import org.apache.maven.model.Dependency;
import org.apache.maven.model.Extension;
import org.apache.maven.model.Plugin;
import org.apache.maven.model.ReportPlugin;
import org.codehaus.plexus.util.dag.CycleDetectedException;
import org.codehaus.plexus.util.dag.DAG;
import org.codehaus.plexus.util.dag.TopologicalSorter;
import org.codehaus.plexus.util.dag.Vertex;

/**
 * Sort projects by dependencies.
 *
 * @author &lt;a href="mailto:brett@apache.org"&gt;Brett Porter&lt;/a&gt;
 * @version $Id: ProjectSorter.java 793745 2009-07-13 23:24:10Z jdcasey $
 */
public class ProjectSorter {

    private final DAG dag;

    private final Map projectMap;

    private final List&lt;MavenProject&gt; sortedProjects;

    private MavenProject topLevelProject;

    /**
     * Sort a list of projects.
     * &lt;ul&gt;
     * &lt;li&gt;collect all the vertices for the projects that we want to build.&lt;/li&gt;
     * &lt;li&gt;iterate through the deps of each project and if that dep is within
     * the set of projects we want to build then add an edge, otherwise throw
     * the edge away because that dependency is not within the set of projects
     * we are trying to build. we assume a closed set.&lt;/li&gt;
     * &lt;li&gt;do a topo sort on the graph that remains.&lt;/li&gt;
     * &lt;/ul&gt;
     * @throws DuplicateProjectException if any projects are duplicated by id
     * @throws MissingProjectException
     */
    public ProjectSorter(List projects) throws CycleDetectedException, DuplicateProjectException, MissingProjectException {
        this(projects, null, null, false, false);
    }

    public ProjectSorter(List projects, List selectedProjectNames, String resumeFrom, boolean make, boolean makeDependents) throws CycleDetectedException, DuplicateProjectException, MissingProjectException {
        dag = new DAG();
        projectMap = new HashMap();
        for (Iterator i = projects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
            if (dag.getVertex(id) != null) {
                throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
            }
            dag.addVertex(id);
            projectMap.put(id, project);
        }
        for (Iterator i = projects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
            for (Iterator j = project.getDependencies().iterator(); j.hasNext(); ) {
                Dependency dependency = (Dependency) j.next();
                String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                if (dag.getVertex(dependencyId) != null) {
                    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                    dag.addEdge(id, dependencyId);
                }
            }
            MavenProject parent = project.getParent();
            if (parent != null) {
                String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
                if (dag.getVertex(parentId) != null) {
                    // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
                    if (dag.hasEdge(parentId, id)) {
                        dag.removeEdge(parentId, id);
                    }
                    dag.addEdge(id, parentId);
                }
            }
            List buildPlugins = project.getBuildPlugins();
            if (buildPlugins != null) {
                for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
                    Plugin plugin = (Plugin) j.next();
                    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                        addEdgeWithParentCheck(projectMap, pluginId, project, id);
                    }
                    if (!pluginId.equals(id)) {
                        for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                            Dependency dependency = (Dependency) k.next();
                            String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                            if (dag.getVertex(dependencyId) != null) {
                                // pluginManagement section.
                                if (!id.equals(dependencyId)) {
                                    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                                    addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                                // TODO: Shouldn't we add an edge between the plugin and its dependency?
                                // Note that doing this may result in cycles...run
                                // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                                // for more information, if you change this:
                                // dag.addEdge( pluginId, dependencyId );
                                }
                            }
                        }
                    }
                }
            }
            List reportPlugins = project.getReportPlugins();
            if (reportPlugins != null) {
                for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
                    ReportPlugin plugin = (ReportPlugin) j.next();
                    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                        addEdgeWithParentCheck(projectMap, pluginId, project, id);
                    }
                }
            }
            for (Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); ) {
                Extension extension = (Extension) j.next();
                String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
                if (dag.getVertex(extensionId) != null) {
                    addEdgeWithParentCheck(projectMap, extensionId, project, id);
                }
            }
        }
        List sortedProjects = new ArrayList();
        for (Iterator i = TopologicalSorter.sort(dag).iterator(); i.hasNext(); ) {
            String id = (String) i.next();
            sortedProjects.add(projectMap.get(id));
        }
        // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
        for (Iterator i = sortedProjects.iterator(); i.hasNext() &amp;&amp; topLevelProject == null; ) {
            MavenProject project = (MavenProject) i.next();
            if (project.isExecutionRoot()) {
                topLevelProject = project;
            }
        }
        sortedProjects = applyMakeFilter(sortedProjects, dag, projectMap, topLevelProject, selectedProjectNames, make, makeDependents);
        resumeFrom(resumeFrom, sortedProjects, projectMap, topLevelProject);
        this.sortedProjects = Collections.unmodifiableList(sortedProjects);
    }

    // make selected projects and possibly projects they depend on, or projects that depend on them
    private static List applyMakeFilter(List sortedProjects, DAG dag, Map projectMap, MavenProject topLevelProject, List selectedProjectNames, boolean make, boolean makeDependents) throws MissingProjectException {
        if (selectedProjectNames == null)
            return sortedProjects;
        MavenProject[] selectedProjects = new MavenProject[selectedProjectNames.size()];
        for (int i = 0; i &lt; selectedProjects.length; i++) {
            selectedProjects[i] = findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject);
        }
        Set projectsToMake = new HashSet(Arrays.asList(selectedProjects));
        for (int i = 0; i &lt; selectedProjects.length; i++) {
            MavenProject project = selectedProjects[i];
            String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
            Vertex v = dag.getVertex(id);
            if (make) {
                gatherDescendents(v, projectMap, projectsToMake, new HashSet());
            }
            if (makeDependents) {
                gatherAncestors(v, projectMap, projectsToMake, new HashSet());
            }
        }
        for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            if (!projectsToMake.contains(project)) {
                i.remove();
            }
        }
        return sortedProjects;
    }

    private static void resumeFrom(String resumeFrom, List sortedProjects, Map projectMap, MavenProject topLevelProject) throws MissingProjectException {
        if (resumeFrom == null)
            return;
        MavenProject resumeFromProject = findProject(resumeFrom, projectMap, topLevelProject);
        for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            if (resumeFromProject.equals(project))
                break;
            i.remove();
        }
        if (sortedProjects.isEmpty()) {
            throw new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom);
        }
    }

    private static MavenProject findProject(String projectName, Map projectMap, MavenProject topLevelProject) throws MissingProjectException {
        MavenProject project = (MavenProject) projectMap.get(projectName);
        if (project != null)
            return project;
        // in that case, it must be a file path
        File baseDir;
        if (topLevelProject == null) {
            baseDir = new File(System.getProperty("user.dir"));
        } else {
            baseDir = topLevelProject.getBasedir();
        // or should this be .getFile().getParentFile() ?
        }
        File projectDir = new File(baseDir, projectName);
        if (!projectDir.exists()) {
            throw new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath());
        }
        if (!projectDir.isDirectory()) {
            throw new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath());
        }
        for (Iterator i = projectMap.values().iterator(); i.hasNext(); ) {
            project = (MavenProject) i.next();
            if (projectDir.equals(project.getFile().getParentFile()))
                return project;
        }
        throw new MissingProjectException("Couldn't find specified project in module list: " + projectDir.getAbsolutePath());
    }

    private static void gatherDescendents(Vertex v, Map projectMap, Set out, Set visited) {
        if (visited.contains(v))
            return;
        visited.add(v);
        out.add(projectMap.get(v.getLabel()));
        for (Iterator i = v.getChildren().iterator(); i.hasNext(); ) {
            Vertex child = (Vertex) i.next();
            gatherDescendents(child, projectMap, out, visited);
        }
    }

    private static void gatherAncestors(Vertex v, Map projectMap, Set out, Set visited) {
        if (visited.contains(v))
            return;
        visited.add(v);
        out.add(projectMap.get(v.getLabel()));
        for (Iterator i = v.getParents().iterator(); i.hasNext(); ) {
            Vertex parent = (Vertex) i.next();
            gatherAncestors(parent, projectMap, out, visited);
        }
    }

    private void addEdgeWithParentCheck(Map projectMap, String projectRefId, MavenProject project, String id) throws CycleDetectedException {
        MavenProject extProject = (MavenProject) projectMap.get(projectRefId);
        if (extProject == null) {
            return;
        }
        project.addProjectReference(extProject);
        MavenProject extParent = extProject.getParent();
        if (extParent != null) {
            String parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId());
            // Don't add edge from parent to extension if a reverse edge already exists
            if (!dag.hasEdge(projectRefId, id) || !parentId.equals(id)) {
                dag.addEdge(id, projectRefId);
            }
        }
    }

    public MavenProject getTopLevelProject() {
        return topLevelProject;
    }

    public List&lt;MavenProject&gt; getSortedProjects() {
        return sortedProjects;
    }

    public boolean hasMultipleProjects() {
        return sortedProjects.size() &gt; 1;
    }

    public List getDependents(String id) {
        return dag.getParentLabels(id);
    }

    public DAG getDAG() {
        return dag;
    }

    public Map getProjectMap() {
        return projectMap;
    }
}
</data><data key="type">CompilationUnit</data></node><node id="1227"><data key="reference"></data><data key="text">return;</data><data key="type">ReturnStmt</data><data key="parentType">IfStmt</data></node><node id="1469"><data key="reference"></data><data key="text">return dag.getParentLabels(id);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="2"><data key="reference"></data><data key="text">package org.apache.maven.project;

</data><data key="type">PackageDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="1226"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1468"><data key="reference"></data><data key="text">{
    return dag.getParentLabels(id);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="3"><data key="reference"></data><data key="identifier">project</data><data key="text">org.apache.maven.project</data><data key="type">Name</data><data key="parentType">PackageDeclaration</data></node><node id="1225"><data key="reference">otherMethodCall</data><data key="identifier">contains</data><data key="text">contains</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1467"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="4"><data key="reference"></data><data key="identifier">maven</data><data key="text">org.apache.maven</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="1224"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1466"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="5"><data key="reference"></data><data key="identifier">apache</data><data key="text">org.apache</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="1223"><data key="reference"></data><data key="text">visited.contains(v)</data><data key="type">MethodCallExpr</data><data key="parentType">IfStmt</data></node><node id="1465"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="6"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="1222"><data key="reference"></data><data key="text">if (visited.contains(v))
    return;</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1464"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="7"><data key="reference"></data><data key="text">import java.io.File;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="1221"><data key="reference"></data><data key="text">{
    if (visited.contains(v))
        return;
    visited.add(v);
    out.add(projectMap.get(v.getLabel()));
    for (Iterator i = v.getChildren().iterator(); i.hasNext(); ) {
        Vertex child = (Vertex) i.next();
        gatherDescendents(child, projectMap, out, visited);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1463"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="8"><data key="reference"></data><data key="identifier">File</data><data key="text">java.io.File</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="800"><data key="reference">java.util.List</data><data key="identifier">selectedProjectNames</data><data key="text">selectedProjectNames</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="9"><data key="reference"></data><data key="identifier">io</data><data key="text">java.io</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="801"><data key="reference"></data><data key="modifier"></data><data key="text">boolean make</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="802"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">Parameter</data></node><node id="803"><data key="reference">boolean</data><data key="identifier">make</data><data key="text">make</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="804"><data key="reference"></data><data key="modifier"></data><data key="text">boolean makeDependents</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="805"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">Parameter</data></node><node id="806"><data key="reference">boolean</data><data key="identifier">makeDependents</data><data key="text">makeDependents</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="807"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1229"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="808"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="809"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1000"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1242"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = v.getChildren().iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1484"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1241"><data key="reference"></data><data key="text">for (Iterator i = v.getChildren().iterator(); i.hasNext(); ) {
    Vertex child = (Vertex) i.next();
    gatherDescendents(child, projectMap, out, visited);
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="1483"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1240"><data key="reference">otherMethodCall</data><data key="identifier">getLabel</data><data key="text">getLabel</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1482"><data key="reference">userDefinedMethodName</data><data key="identifier">getProjectMap</data><data key="text">getProjectMap</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1481"><data key="reference"></data><data key="modifier">public</data><data key="text">public Map getProjectMap() {
    return projectMap;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1480"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1239"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1238"><data key="reference"></data><data key="text">v.getLabel()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1237"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1479"><data key="reference"></data><data key="text">return dag;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1236"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1478"><data key="reference"></data><data key="text">{
    return dag;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1235"><data key="reference"></data><data key="text">projectMap.get(v.getLabel())</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1477"><data key="reference">nonQualifiedClassName</data><data key="identifier">DAG</data><data key="text">DAG</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1234"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1476"><data key="reference"></data><data key="text">DAG</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1233"><data key="reference">java.util.Set</data><data key="identifier">out</data><data key="text">out</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1475"><data key="reference">userDefinedMethodName</data><data key="identifier">getDAG</data><data key="text">getDAG</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="810"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1232"><data key="reference"></data><data key="text">out.add(projectMap.get(v.getLabel()))</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1474"><data key="reference"></data><data key="modifier">public</data><data key="text">public DAG getDAG() {
    return dag;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="811"><data key="reference"></data><data key="text">{
    if (selectedProjectNames == null)
        return sortedProjects;
    MavenProject[] selectedProjects = new MavenProject[selectedProjectNames.size()];
    for (int i = 0; i &lt; selectedProjects.length; i++) {
        selectedProjects[i] = findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject);
    }
    Set projectsToMake = new HashSet(Arrays.asList(selectedProjects));
    for (int i = 0; i &lt; selectedProjects.length; i++) {
        MavenProject project = selectedProjects[i];
        String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
        Vertex v = dag.getVertex(id);
        if (make) {
            gatherDescendents(v, projectMap, projectsToMake, new HashSet());
        }
        if (makeDependents) {
            gatherAncestors(v, projectMap, projectsToMake, new HashSet());
        }
    }
    for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        if (!projectsToMake.contains(project)) {
            i.remove();
        }
    }
    return sortedProjects;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="812"><data key="reference"></data><data key="text">if (selectedProjectNames == null)
    return sortedProjects;</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="813"><data key="reference"></data><data key="text">selectedProjectNames == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="814"><data key="reference">java.util.List</data><data key="identifier">selectedProjectNames</data><data key="text">selectedProjectNames</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="815"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="816"><data key="reference"></data><data key="text">return sortedProjects;</data><data key="type">ReturnStmt</data><data key="parentType">IfStmt</data></node><node id="817"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="818"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject[] selectedProjects = new MavenProject[selectedProjectNames.size()]</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="819"><data key="reference"></data><data key="text">selectedProjects = new MavenProject[selectedProjectNames.size()]</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1011"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1253"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1010"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1252"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="1251"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1250"><data key="reference">otherMethodCall</data><data key="identifier">getChildren</data><data key="text">getChildren</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1008"><data key="reference">otherMethodCall</data><data key="identifier">findProject</data><data key="text">findProject</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1007"><data key="reference"></data><data key="text">findProject(resumeFrom, projectMap, topLevelProject)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1249"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1006"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">resumeFromProject</data><data key="text">resumeFromProject</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1248"><data key="reference"></data><data key="text">v.getChildren()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1005"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1247"><data key="reference"></data><data key="text">v.getChildren().iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1004"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1246"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1003"><data key="reference"></data><data key="text">resumeFromProject = findProject(resumeFrom, projectMap, topLevelProject)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1245"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1487"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="820"><data key="reference"></data><data key="text">MavenProject[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="1002"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject resumeFromProject = findProject(resumeFrom, projectMap, topLevelProject)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1244"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1486"><data key="reference"></data><data key="text">return projectMap;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="821"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1001"><data key="reference"></data><data key="text">return;</data><data key="type">ReturnStmt</data><data key="parentType">IfStmt</data></node><node id="1243"><data key="reference"></data><data key="text">i = v.getChildren().iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1485"><data key="reference"></data><data key="text">{
    return projectMap;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="822"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="823"><data key="reference">org.apache.maven.project.MavenProject[]</data><data key="identifier">selectedProjects</data><data key="text">selectedProjects</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="824"><data key="reference"></data><data key="text">new MavenProject[selectedProjectNames.size()]</data><data key="type">ArrayCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="825"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="826"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="827"><data key="reference"></data><data key="text">[selectedProjectNames.size()]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="828"><data key="reference"></data><data key="text">selectedProjectNames.size()</data><data key="type">MethodCallExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="829"><data key="reference">java.util.List</data><data key="identifier">selectedProjectNames</data><data key="text">selectedProjectNames</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1009"><data key="reference">java.lang.String</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1022"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1264"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1021"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="1263"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vertex</data><data key="text">Vertex</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1020"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1262"><data key="reference"></data><data key="text">Vertex</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1261"><data key="reference"></data><data key="text">(Vertex) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1260"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">child</data><data key="text">child</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1019"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1018"><data key="reference"></data><data key="text">sortedProjects.iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1017"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1259"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vertex</data><data key="text">Vertex</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1016"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1258"><data key="reference"></data><data key="text">Vertex</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1015"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1257"><data key="reference"></data><data key="text">child = (Vertex) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="830"><data key="reference">otherMethodCall</data><data key="identifier">size</data><data key="text">size</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1014"><data key="reference"></data><data key="text">i = sortedProjects.iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1256"><data key="reference"></data><data key="modifier"></data><data key="text">Vertex child = (Vertex) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="831"><data key="reference"></data><data key="text">for (int i = 0; i &lt; selectedProjects.length; i++) {
    selectedProjects[i] = findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject);
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="1013"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = sortedProjects.iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1255"><data key="reference"></data><data key="text">{
    Vertex child = (Vertex) i.next();
    gatherDescendents(child, projectMap, out, visited);
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="832"><data key="reference"></data><data key="modifier"></data><data key="text">int i = 0</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1012"><data key="reference"></data><data key="text">for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
    MavenProject project = (MavenProject) i.next();
    if (resumeFromProject.equals(project))
        break;
    i.remove();
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="1254"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="833"><data key="reference"></data><data key="text">i = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="834"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="835"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="836"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="837"><data key="reference"></data><data key="text">i &lt; selectedProjects.length</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="838"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="839"><data key="reference"></data><data key="text">selectedProjects.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="1033"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1275"><data key="reference"></data><data key="modifier"></data><data key="text">Vertex v</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1032"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1274"><data key="reference">userDefinedMethodName</data><data key="identifier">gatherAncestors</data><data key="text">gatherAncestors</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1031"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1273"><data key="reference"></data><data key="modifier">private,static</data><data key="text">private static void gatherAncestors(Vertex v, Map projectMap, Set out, Set visited) {
    if (visited.contains(v))
        return;
    visited.add(v);
    out.add(projectMap.get(v.getLabel()));
    for (Iterator i = v.getParents().iterator(); i.hasNext(); ) {
        Vertex parent = (Vertex) i.next();
        gatherAncestors(parent, projectMap, out, visited);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1030"><data key="reference"></data><data key="text">(MavenProject) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1272"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1271"><data key="reference">java.util.Set</data><data key="identifier">out</data><data key="text">out</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1270"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1029"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1028"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1027"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1269"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">child</data><data key="text">child</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="840"><data key="reference">org.apache.maven.project.MavenProject[]</data><data key="identifier">selectedProjects</data><data key="text">selectedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1026"><data key="reference"></data><data key="text">project = (MavenProject) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1268"><data key="reference">otherMethodCall</data><data key="identifier">gatherDescendents</data><data key="text">gatherDescendents</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="841"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1025"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project = (MavenProject) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1267"><data key="reference"></data><data key="text">gatherDescendents(child, projectMap, out, visited)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="600"><data key="reference">org.apache.maven.model.ReportPlugin</data><data key="identifier">plugin</data><data key="text">plugin</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="842"><data key="reference"></data><data key="text">i++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="1024"><data key="reference"></data><data key="text">{
    MavenProject project = (MavenProject) i.next();
    if (resumeFromProject.equals(project))
        break;
    i.remove();
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1266"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="601"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="843"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1023"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1265"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="602"><data key="reference"></data><data key="text">if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
    addEdgeWithParentCheck(projectMap, pluginId, project, id);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="844"><data key="reference"></data><data key="text">{
    selectedProjects[i] = findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject);
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="603"><data key="reference"></data><data key="text">dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="845"><data key="reference"></data><data key="identifier">=</data><data key="text">selectedProjects[i] = findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="604"><data key="reference"></data><data key="text">dag.getVertex(pluginId) != null</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="846"><data key="reference"></data><data key="text">selectedProjects[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">AssignExpr</data></node><node id="605"><data key="reference"></data><data key="text">dag.getVertex(pluginId)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="847"><data key="reference">org.apache.maven.project.MavenProject[]</data><data key="identifier">selectedProjects</data><data key="text">selectedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="606"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="848"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="607"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="849"><data key="reference"></data><data key="text">findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="608"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="609"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1044"><data key="reference">otherMethodCall</data><data key="identifier">remove</data><data key="text">remove</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1286"><data key="reference">java.util.Set</data><data key="identifier">out</data><data key="text">out</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1043"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1285"><data key="reference">nonQualifiedClassName</data><data key="identifier">Set</data><data key="text">Set</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1042"><data key="reference"></data><data key="text">i.remove()</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1284"><data key="reference"></data><data key="text">Set</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1041"><data key="reference"></data><data key="text">break;</data><data key="type">BreakStmt</data><data key="parentType">IfStmt</data></node><node id="1283"><data key="reference"></data><data key="modifier"></data><data key="text">Set out</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1040"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1282"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1281"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1280"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1039"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="850"><data key="reference">otherMethodCall</data><data key="identifier">findProject</data><data key="text">findProject</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1038"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">resumeFromProject</data><data key="text">resumeFromProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="851"><data key="reference"></data><data key="text">(String) selectedProjectNames.get(i)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1037"><data key="reference"></data><data key="text">resumeFromProject.equals(project)</data><data key="type">MethodCallExpr</data><data key="parentType">IfStmt</data></node><node id="1279"><data key="reference"></data><data key="modifier"></data><data key="text">Map projectMap</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="610"><data key="reference"></data><data key="text">!pluginId.equals(id)</data><data key="type">UnaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="852"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1036"><data key="reference"></data><data key="text">if (resumeFromProject.equals(project))
    break;</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1278"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="611"><data key="reference"></data><data key="text">pluginId.equals(id)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="853"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1035"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1277"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vertex</data><data key="text">Vertex</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="612"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="854"><data key="reference"></data><data key="text">selectedProjectNames.get(i)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1034"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1276"><data key="reference"></data><data key="text">Vertex</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="613"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="855"><data key="reference">java.util.List</data><data key="identifier">selectedProjectNames</data><data key="text">selectedProjectNames</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="614"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="856"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="615"><data key="reference"></data><data key="text">{
    addEdgeWithParentCheck(projectMap, pluginId, project, id);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="857"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="616"><data key="reference"></data><data key="text">addEdgeWithParentCheck(projectMap, pluginId, project, id)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="858"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="617"><data key="reference">otherMethodCall</data><data key="identifier">addEdgeWithParentCheck</data><data key="text">addEdgeWithParentCheck</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="859"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="618"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="619"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1055"><data key="reference"></data><data key="identifier">Couldn't resume, project was not scheduled to run: </data><data key="text">"Couldn't resume, project was not scheduled to run: "</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1297"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1054"><data key="reference"></data><data key="text">"Couldn't resume, project was not scheduled to run: " + resumeFrom</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1296"><data key="reference">otherMethodCall</data><data key="identifier">contains</data><data key="text">contains</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1053"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1295"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1052"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1294"><data key="reference"></data><data key="text">visited.contains(v)</data><data key="type">MethodCallExpr</data><data key="parentType">IfStmt</data></node><node id="1051"><data key="reference"></data><data key="text">new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1293"><data key="reference"></data><data key="text">if (visited.contains(v))
    return;</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1050"><data key="reference"></data><data key="text">throw new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1292"><data key="reference"></data><data key="text">{
    if (visited.contains(v))
        return;
    visited.add(v);
    out.add(projectMap.get(v.getLabel()));
    for (Iterator i = v.getParents().iterator(); i.hasNext(); ) {
        Vertex parent = (Vertex) i.next();
        gatherAncestors(parent, projectMap, out, visited);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1291"><data key="reference"></data><data key="text">void</data><data key="type">VoidType</data><data key="parentType">MethodDeclaration</data></node><node id="1290"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="860"><data key="reference"></data><data key="modifier"></data><data key="text">Set projectsToMake = new HashSet(Arrays.asList(selectedProjects))</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="861"><data key="reference"></data><data key="text">projectsToMake = new HashSet(Arrays.asList(selectedProjects))</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1049"><data key="reference"></data><data key="text">{
    throw new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="620"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="862"><data key="reference"></data><data key="text">Set</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1048"><data key="reference">otherMethodCall</data><data key="identifier">isEmpty</data><data key="text">isEmpty</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="621"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="863"><data key="reference">nonQualifiedClassName</data><data key="identifier">Set</data><data key="text">Set</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1047"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1289"><data key="reference">nonQualifiedClassName</data><data key="identifier">Set</data><data key="text">Set</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="622"><data key="reference"></data><data key="text">for (Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); ) {
    Extension extension = (Extension) j.next();
    String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
    if (dag.getVertex(extensionId) != null) {
        addEdgeWithParentCheck(projectMap, extensionId, project, id);
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="864"><data key="reference">java.util.Set</data><data key="identifier">projectsToMake</data><data key="text">projectsToMake</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1046"><data key="reference"></data><data key="text">sortedProjects.isEmpty()</data><data key="type">MethodCallExpr</data><data key="parentType">IfStmt</data></node><node id="1288"><data key="reference"></data><data key="text">Set</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="623"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator j = project.getBuildExtensions().iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="865"><data key="reference"></data><data key="text">new HashSet(Arrays.asList(selectedProjects))</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1045"><data key="reference"></data><data key="text">if (sortedProjects.isEmpty()) {
    throw new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1287"><data key="reference"></data><data key="modifier"></data><data key="text">Set visited</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="624"><data key="reference"></data><data key="text">j = project.getBuildExtensions().iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="866"><data key="reference"></data><data key="text">HashSet</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="625"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="867"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashSet</data><data key="text">HashSet</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="626"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="868"><data key="reference"></data><data key="text">Arrays.asList(selectedProjects)</data><data key="type">MethodCallExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="627"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="869"><data key="reference">UnknownType</data><data key="identifier">Arrays</data><data key="text">Arrays</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="628"><data key="reference"></data><data key="text">project.getBuildExtensions().iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="629"><data key="reference"></data><data key="text">project.getBuildExtensions()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1066"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1065"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1064"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1063"><data key="reference"></data><data key="modifier"></data><data key="text">Map projectMap</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1062"><data key="reference">java.lang.String</data><data key="identifier">projectName</data><data key="text">projectName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1061"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1060"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="870"><data key="reference">otherMethodCall</data><data key="identifier">asList</data><data key="text">asList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="871"><data key="reference">org.apache.maven.project.MavenProject[]</data><data key="identifier">selectedProjects</data><data key="text">selectedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="630"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="872"><data key="reference"></data><data key="text">for (int i = 0; i &lt; selectedProjects.length; i++) {
    MavenProject project = selectedProjects[i];
    String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
    Vertex v = dag.getVertex(id);
    if (make) {
        gatherDescendents(v, projectMap, projectsToMake, new HashSet());
    }
    if (makeDependents) {
        gatherAncestors(v, projectMap, projectsToMake, new HashSet());
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="631"><data key="reference">otherMethodCall</data><data key="identifier">getBuildExtensions</data><data key="text">getBuildExtensions</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="873"><data key="reference"></data><data key="modifier"></data><data key="text">int i = 0</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1059"><data key="reference"></data><data key="modifier"></data><data key="text">String projectName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="632"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="874"><data key="reference"></data><data key="text">i = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1058"><data key="reference">userDefinedMethodName</data><data key="identifier">findProject</data><data key="text">findProject</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="633"><data key="reference"></data><data key="text">j.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="875"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="1057"><data key="reference"></data><data key="modifier">private,static</data><data key="text">private static MavenProject findProject(String projectName, Map projectMap, MavenProject topLevelProject) throws MissingProjectException {
    MavenProject project = (MavenProject) projectMap.get(projectName);
    if (project != null)
        return project;
    // in that case, it must be a file path
    File baseDir;
    if (topLevelProject == null) {
        baseDir = new File(System.getProperty("user.dir"));
    } else {
        baseDir = topLevelProject.getBasedir();
    // or should this be .getFile().getParentFile() ?
    }
    File projectDir = new File(baseDir, projectName);
    if (!projectDir.exists()) {
        throw new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath());
    }
    if (!projectDir.isDirectory()) {
        throw new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath());
    }
    for (Iterator i = projectMap.values().iterator(); i.hasNext(); ) {
        project = (MavenProject) i.next();
        if (projectDir.equals(project.getFile().getParentFile()))
            return project;
    }
    throw new MissingProjectException("Couldn't find specified project in module list: " + projectDir.getAbsolutePath());
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1299"><data key="reference"></data><data key="text">visited.add(v)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="634"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="876"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1056"><data key="reference">java.lang.String</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1298"><data key="reference"></data><data key="text">return;</data><data key="type">ReturnStmt</data><data key="parentType">IfStmt</data></node><node id="635"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="877"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="636"><data key="reference"></data><data key="text">{
    Extension extension = (Extension) j.next();
    String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
    if (dag.getVertex(extensionId) != null) {
        addEdgeWithParentCheck(projectMap, extensionId, project, id);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="878"><data key="reference"></data><data key="text">i &lt; selectedProjects.length</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="637"><data key="reference"></data><data key="modifier"></data><data key="text">Extension extension = (Extension) j.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="879"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="638"><data key="reference"></data><data key="text">extension = (Extension) j.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="639"><data key="reference"></data><data key="text">Extension</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1077"><data key="reference"></data><data key="text">project = (MavenProject) projectMap.get(projectName)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1076"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project = (MavenProject) projectMap.get(projectName)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1075"><data key="reference"></data><data key="text">{
    MavenProject project = (MavenProject) projectMap.get(projectName);
    if (project != null)
        return project;
    // in that case, it must be a file path
    File baseDir;
    if (topLevelProject == null) {
        baseDir = new File(System.getProperty("user.dir"));
    } else {
        baseDir = topLevelProject.getBasedir();
    // or should this be .getFile().getParentFile() ?
    }
    File projectDir = new File(baseDir, projectName);
    if (!projectDir.exists()) {
        throw new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath());
    }
    if (!projectDir.isDirectory()) {
        throw new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath());
    }
    for (Iterator i = projectMap.values().iterator(); i.hasNext(); ) {
        project = (MavenProject) i.next();
        if (projectDir.equals(project.getFile().getParentFile()))
            return project;
    }
    throw new MissingProjectException("Couldn't find specified project in module list: " + projectDir.getAbsolutePath());
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1074"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1073"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1072"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1071"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1070"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="880"><data key="reference"></data><data key="text">selectedProjects.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="881"><data key="reference">org.apache.maven.project.MavenProject[]</data><data key="identifier">selectedProjects</data><data key="text">selectedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="640"><data key="reference">nonQualifiedClassName</data><data key="identifier">Extension</data><data key="text">Extension</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="882"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="641"><data key="reference">org.apache.maven.model.Extension</data><data key="identifier">extension</data><data key="text">extension</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="883"><data key="reference"></data><data key="text">i++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="400"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="642"><data key="reference"></data><data key="text">(Extension) j.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="884"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="401"><data key="reference">java.lang.String</data><data key="identifier">parentId</data><data key="text">parentId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="643"><data key="reference"></data><data key="text">Extension</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="885"><data key="reference"></data><data key="text">{
    MavenProject project = selectedProjects[i];
    String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
    Vertex v = dag.getVertex(id);
    if (make) {
        gatherDescendents(v, projectMap, projectsToMake, new HashSet());
    }
    if (makeDependents) {
        gatherAncestors(v, projectMap, projectsToMake, new HashSet());
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1069"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="402"><data key="reference"></data><data key="modifier"></data><data key="text">List buildPlugins = project.getBuildPlugins()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="644"><data key="reference">nonQualifiedClassName</data><data key="identifier">Extension</data><data key="text">Extension</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="886"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project = selectedProjects[i]</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1068"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="403"><data key="reference"></data><data key="text">buildPlugins = project.getBuildPlugins()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="645"><data key="reference"></data><data key="text">j.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="887"><data key="reference"></data><data key="text">project = selectedProjects[i]</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1067"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject topLevelProject</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="404"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="646"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="888"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="405"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="647"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="889"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="406"><data key="reference">java.util.List</data><data key="identifier">buildPlugins</data><data key="text">buildPlugins</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="648"><data key="reference"></data><data key="modifier"></data><data key="text">String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="407"><data key="reference"></data><data key="text">project.getBuildPlugins()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="649"><data key="reference"></data><data key="text">extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="408"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="409"><data key="reference">otherMethodCall</data><data key="identifier">getBuildPlugins</data><data key="text">getBuildPlugins</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1080"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1088"><data key="reference"></data><data key="text">if (project != null)
    return project;</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1087"><data key="reference">java.lang.String</data><data key="identifier">projectName</data><data key="text">projectName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1086"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1085"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1084"><data key="reference"></data><data key="text">projectMap.get(projectName)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1083"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1082"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="890"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1081"><data key="reference"></data><data key="text">(MavenProject) projectMap.get(projectName)</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="891"><data key="reference"></data><data key="text">selectedProjects[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="650"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="892"><data key="reference">org.apache.maven.project.MavenProject[]</data><data key="identifier">selectedProjects</data><data key="text">selectedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="651"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="893"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="410"><data key="reference"></data><data key="text">if (buildPlugins != null) {
    for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
        Plugin plugin = (Plugin) j.next();
        String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
        if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
            addEdgeWithParentCheck(projectMap, pluginId, project, id);
        }
        if (!pluginId.equals(id)) {
            for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                Dependency dependency = (Dependency) k.next();
                String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                if (dag.getVertex(dependencyId) != null) {
                    // pluginManagement section.
                    if (!id.equals(dependencyId)) {
                        project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                        addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                    // TODO: Shouldn't we add an edge between the plugin and its dependency?
                    // Note that doing this may result in cycles...run
                    // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                    // for more information, if you change this:
                    // dag.addEdge( pluginId, dependencyId );
                    }
                }
            }
        }
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="652"><data key="reference">java.lang.String</data><data key="identifier">extensionId</data><data key="text">extensionId</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="894"><data key="reference"></data><data key="modifier"></data><data key="text">String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="411"><data key="reference"></data><data key="text">buildPlugins != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="653"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="895"><data key="reference"></data><data key="text">id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="412"><data key="reference">java.util.List</data><data key="identifier">buildPlugins</data><data key="text">buildPlugins</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="654"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="896"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="413"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="655"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="897"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1079"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="414"><data key="reference"></data><data key="text">{
    for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
        Plugin plugin = (Plugin) j.next();
        String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
        if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
            addEdgeWithParentCheck(projectMap, pluginId, project, id);
        }
        if (!pluginId.equals(id)) {
            for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                Dependency dependency = (Dependency) k.next();
                String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                if (dag.getVertex(dependencyId) != null) {
                    // pluginManagement section.
                    if (!id.equals(dependencyId)) {
                        project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                        addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                    // TODO: Shouldn't we add an edge between the plugin and its dependency?
                    // Note that doing this may result in cycles...run
                    // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                    // for more information, if you change this:
                    // dag.addEdge( pluginId, dependencyId );
                    }
                }
            }
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="656"><data key="reference"></data><data key="text">extension.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="898"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1078"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="415"><data key="reference"></data><data key="text">for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
    Plugin plugin = (Plugin) j.next();
    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
        addEdgeWithParentCheck(projectMap, pluginId, project, id);
    }
    if (!pluginId.equals(id)) {
        for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
            Dependency dependency = (Dependency) k.next();
            String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
            if (dag.getVertex(dependencyId) != null) {
                // pluginManagement section.
                if (!id.equals(dependencyId)) {
                    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                    addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                // TODO: Shouldn't we add an edge between the plugin and its dependency?
                // Note that doing this may result in cycles...run
                // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                // for more information, if you change this:
                // dag.addEdge( pluginId, dependencyId );
                }
            }
        }
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="657"><data key="reference">org.apache.maven.model.Extension</data><data key="identifier">extension</data><data key="text">extension</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="899"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="416"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator j = buildPlugins.iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="658"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="417"><data key="reference"></data><data key="text">j = buildPlugins.iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="659"><data key="reference"></data><data key="text">extension.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="418"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="419"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1091"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1090"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1099"><data key="reference"></data><data key="text">if (topLevelProject == null) {
    baseDir = new File(System.getProperty("user.dir"));
} else {
    baseDir = topLevelProject.getBasedir();
// or should this be .getFile().getParentFile() ?
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1098"><data key="reference">java.io.File</data><data key="identifier">baseDir</data><data key="text">baseDir</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1097"><data key="reference">nonQualifiedClassName</data><data key="identifier">File</data><data key="text">File</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1096"><data key="reference"></data><data key="text">File</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1095"><data key="reference"></data><data key="text">baseDir</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1094"><data key="reference"></data><data key="modifier"></data><data key="text">File baseDir</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1093"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1092"><data key="reference"></data><data key="text">return project;</data><data key="type">ReturnStmt</data><data key="parentType">IfStmt</data></node><node id="660"><data key="reference">org.apache.maven.model.Extension</data><data key="identifier">extension</data><data key="text">extension</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="661"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="420"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="662"><data key="reference"></data><data key="text">if (dag.getVertex(extensionId) != null) {
    addEdgeWithParentCheck(projectMap, extensionId, project, id);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="421"><data key="reference"></data><data key="text">buildPlugins.iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="663"><data key="reference"></data><data key="text">dag.getVertex(extensionId) != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="422"><data key="reference">java.util.List</data><data key="identifier">buildPlugins</data><data key="text">buildPlugins</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="664"><data key="reference"></data><data key="text">dag.getVertex(extensionId)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="423"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="665"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="424"><data key="reference"></data><data key="text">j.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="666"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="425"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="667"><data key="reference">java.lang.String</data><data key="identifier">extensionId</data><data key="text">extensionId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1089"><data key="reference"></data><data key="text">project != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="426"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="668"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="427"><data key="reference"></data><data key="text">{
    Plugin plugin = (Plugin) j.next();
    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
        addEdgeWithParentCheck(projectMap, pluginId, project, id);
    }
    if (!pluginId.equals(id)) {
        for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
            Dependency dependency = (Dependency) k.next();
            String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
            if (dag.getVertex(dependencyId) != null) {
                // pluginManagement section.
                if (!id.equals(dependencyId)) {
                    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                    addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                // TODO: Shouldn't we add an edge between the plugin and its dependency?
                // Note that doing this may result in cycles...run
                // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                // for more information, if you change this:
                // dag.addEdge( pluginId, dependencyId );
                }
            }
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="669"><data key="reference"></data><data key="text">{
    addEdgeWithParentCheck(projectMap, extensionId, project, id);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="428"><data key="reference"></data><data key="modifier"></data><data key="text">Plugin plugin = (Plugin) j.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="429"><data key="reference"></data><data key="text">plugin = (Plugin) j.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="670"><data key="reference"></data><data key="text">addEdgeWithParentCheck(projectMap, extensionId, project, id)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="671"><data key="reference">otherMethodCall</data><data key="identifier">addEdgeWithParentCheck</data><data key="text">addEdgeWithParentCheck</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="430"><data key="reference"></data><data key="text">Plugin</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="672"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="431"><data key="reference">nonQualifiedClassName</data><data key="identifier">Plugin</data><data key="text">Plugin</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="673"><data key="reference">java.lang.String</data><data key="identifier">extensionId</data><data key="text">extensionId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="432"><data key="reference">org.apache.maven.model.Plugin</data><data key="identifier">plugin</data><data key="text">plugin</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="674"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="433"><data key="reference"></data><data key="text">(Plugin) j.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="675"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="434"><data key="reference"></data><data key="text">Plugin</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="676"><data key="reference"></data><data key="modifier"></data><data key="text">List sortedProjects = new ArrayList()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="435"><data key="reference">nonQualifiedClassName</data><data key="identifier">Plugin</data><data key="text">Plugin</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="677"><data key="reference"></data><data key="text">sortedProjects = new ArrayList()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="436"><data key="reference"></data><data key="text">j.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="678"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="437"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="679"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="438"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="439"><data key="reference"></data><data key="modifier"></data><data key="text">String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="680"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="681"><data key="reference"></data><data key="text">new ArrayList()</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="440"><data key="reference"></data><data key="text">pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="682"><data key="reference"></data><data key="text">ArrayList</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="441"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="683"><data key="reference">nonQualifiedClassName</data><data key="identifier">ArrayList</data><data key="text">ArrayList</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="200"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="442"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="684"><data key="reference"></data><data key="text">for (Iterator i = TopologicalSorter.sort(dag).iterator(); i.hasNext(); ) {
    String id = (String) i.next();
    sortedProjects.add(projectMap.get(id));
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="201"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="443"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="685"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = TopologicalSorter.sort(dag).iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="202"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="444"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="686"><data key="reference"></data><data key="text">i = TopologicalSorter.sort(dag).iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="203"><data key="reference"></data><data key="text">(MavenProject) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="445"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="687"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="204"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="446"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="688"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="205"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="447"><data key="reference"></data><data key="text">plugin.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="689"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="206"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="448"><data key="reference">org.apache.maven.model.Plugin</data><data key="identifier">plugin</data><data key="text">plugin</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="207"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="449"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="208"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="209"><data key="reference"></data><data key="modifier"></data><data key="text">String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="690"><data key="reference"></data><data key="text">TopologicalSorter.sort(dag).iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="691"><data key="reference"></data><data key="text">TopologicalSorter.sort(dag)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="450"><data key="reference"></data><data key="text">plugin.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="692"><data key="reference">UnknownType</data><data key="identifier">TopologicalSorter</data><data key="text">TopologicalSorter</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="451"><data key="reference">org.apache.maven.model.Plugin</data><data key="identifier">plugin</data><data key="text">plugin</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="693"><data key="reference">otherMethodCall</data><data key="identifier">sort</data><data key="text">sort</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="210"><data key="reference"></data><data key="text">id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="452"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="694"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="211"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="453"><data key="reference"></data><data key="text">if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
    addEdgeWithParentCheck(projectMap, pluginId, project, id);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="695"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="212"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="454"><data key="reference"></data><data key="text">dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="696"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="213"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="455"><data key="reference"></data><data key="text">dag.getVertex(pluginId) != null</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="697"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="214"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="456"><data key="reference"></data><data key="text">dag.getVertex(pluginId)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="698"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="215"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="457"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="699"><data key="reference"></data><data key="text">{
    String id = (String) i.next();
    sortedProjects.add(projectMap.get(id));
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="216"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="458"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="217"><data key="reference"></data><data key="text">project.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="459"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="218"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="219"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="460"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="461"><data key="reference"></data><data key="text">!pluginId.equals(id)</data><data key="type">UnaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="220"><data key="reference"></data><data key="text">project.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="462"><data key="reference"></data><data key="text">pluginId.equals(id)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="221"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="463"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="222"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="464"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="223"><data key="reference"></data><data key="text">if (dag.getVertex(id) != null) {
    throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="465"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="224"><data key="reference"></data><data key="text">dag.getVertex(id) != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="466"><data key="reference"></data><data key="text">{
    addEdgeWithParentCheck(projectMap, pluginId, project, id);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="225"><data key="reference"></data><data key="text">dag.getVertex(id)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="467"><data key="reference"></data><data key="text">addEdgeWithParentCheck(projectMap, pluginId, project, id)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="226"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="468"><data key="reference">otherMethodCall</data><data key="identifier">addEdgeWithParentCheck</data><data key="text">addEdgeWithParentCheck</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="227"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="469"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="228"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="229"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="470"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="471"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="230"><data key="reference"></data><data key="text">{
    throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="472"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="231"><data key="reference"></data><data key="text">throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="473"><data key="reference"></data><data key="text">if (!pluginId.equals(id)) {
    for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
        Dependency dependency = (Dependency) k.next();
        String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
        if (dag.getVertex(dependencyId) != null) {
            // pluginManagement section.
            if (!id.equals(dependencyId)) {
                project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                addEdgeWithParentCheck(projectMap, dependencyId, project, id);
            // TODO: Shouldn't we add an edge between the plugin and its dependency?
            // Note that doing this may result in cycles...run
            // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
            // for more information, if you change this:
            // dag.addEdge( pluginId, dependencyId );
            }
        }
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="232"><data key="reference"></data><data key="text">new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor")</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="474"><data key="reference"></data><data key="text">!pluginId.equals(id)</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="233"><data key="reference"></data><data key="text">DuplicateProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="475"><data key="reference"></data><data key="text">pluginId.equals(id)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="234"><data key="reference">nonQualifiedClassName</data><data key="identifier">DuplicateProjectException</data><data key="text">DuplicateProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="476"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="235"><data key="reference"></data><data key="text">"Project '" + id + "' is duplicated in the reactor"</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="477"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="236"><data key="reference"></data><data key="text">"Project '" + id</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="478"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="237"><data key="reference"></data><data key="identifier">Project '</data><data key="text">"Project '"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="479"><data key="reference"></data><data key="text">{
    for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
        Dependency dependency = (Dependency) k.next();
        String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
        if (dag.getVertex(dependencyId) != null) {
            // pluginManagement section.
            if (!id.equals(dependencyId)) {
                project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                addEdgeWithParentCheck(projectMap, dependencyId, project, id);
            // TODO: Shouldn't we add an edge between the plugin and its dependency?
            // Note that doing this may result in cycles...run
            // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
            // for more information, if you change this:
            // dag.addEdge( pluginId, dependencyId );
            }
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="238"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="239"><data key="reference"></data><data key="identifier">' is duplicated in the reactor</data><data key="text">"' is duplicated in the reactor"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="480"><data key="reference"></data><data key="text">for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
    Dependency dependency = (Dependency) k.next();
    String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
    if (dag.getVertex(dependencyId) != null) {
        // pluginManagement section.
        if (!id.equals(dependencyId)) {
            project.addProjectReference((MavenProject) projectMap.get(dependencyId));
            addEdgeWithParentCheck(projectMap, dependencyId, project, id);
        // TODO: Shouldn't we add an edge between the plugin and its dependency?
        // Note that doing this may result in cycles...run
        // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
        // for more information, if you change this:
        // dag.addEdge( pluginId, dependencyId );
        }
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="481"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator k = plugin.getDependencies().iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="240"><data key="reference"></data><data key="text">dag.addVertex(id)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="482"><data key="reference"></data><data key="text">k = plugin.getDependencies().iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="241"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="483"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="242"><data key="reference">otherMethodCall</data><data key="identifier">addVertex</data><data key="text">addVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="484"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="243"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="485"><data key="reference">java.util.Iterator</data><data key="identifier">k</data><data key="text">k</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="244"><data key="reference"></data><data key="text">projectMap.put(id, project)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="486"><data key="reference"></data><data key="text">plugin.getDependencies().iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="245"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="487"><data key="reference"></data><data key="text">plugin.getDependencies()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="246"><data key="reference">otherMethodCall</data><data key="identifier">put</data><data key="text">put</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="488"><data key="reference">org.apache.maven.model.Plugin</data><data key="identifier">plugin</data><data key="text">plugin</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="247"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="489"><data key="reference">otherMethodCall</data><data key="identifier">getDependencies</data><data key="text">getDependencies</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="248"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="249"><data key="reference"></data><data key="text">for (Iterator i = projects.iterator(); i.hasNext(); ) {
    MavenProject project = (MavenProject) i.next();
    String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
    for (Iterator j = project.getDependencies().iterator(); j.hasNext(); ) {
        Dependency dependency = (Dependency) j.next();
        String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
        if (dag.getVertex(dependencyId) != null) {
            project.addProjectReference((MavenProject) projectMap.get(dependencyId));
            dag.addEdge(id, dependencyId);
        }
    }
    MavenProject parent = project.getParent();
    if (parent != null) {
        String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
        if (dag.getVertex(parentId) != null) {
            // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
            if (dag.hasEdge(parentId, id)) {
                dag.removeEdge(parentId, id);
            }
            dag.addEdge(id, parentId);
        }
    }
    List buildPlugins = project.getBuildPlugins();
    if (buildPlugins != null) {
        for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
            Plugin plugin = (Plugin) j.next();
            String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
            if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                addEdgeWithParentCheck(projectMap, pluginId, project, id);
            }
            if (!pluginId.equals(id)) {
                for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                    Dependency dependency = (Dependency) k.next();
                    String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                    if (dag.getVertex(dependencyId) != null) {
                        // pluginManagement section.
                        if (!id.equals(dependencyId)) {
                            project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                            addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                        // TODO: Shouldn't we add an edge between the plugin and its dependency?
                        // Note that doing this may result in cycles...run
                        // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                        // for more information, if you change this:
                        // dag.addEdge( pluginId, dependencyId );
                        }
                    }
                }
            }
        }
    }
    List reportPlugins = project.getReportPlugins();
    if (reportPlugins != null) {
        for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
            ReportPlugin plugin = (ReportPlugin) j.next();
            String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
            if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                addEdgeWithParentCheck(projectMap, pluginId, project, id);
            }
        }
    }
    for (Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); ) {
        Extension extension = (Extension) j.next();
        String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
        if (dag.getVertex(extensionId) != null) {
            addEdgeWithParentCheck(projectMap, extensionId, project, id);
        }
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="490"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="491"><data key="reference"></data><data key="text">k.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="250"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = projects.iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="492"><data key="reference">java.util.Iterator</data><data key="identifier">k</data><data key="text">k</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="251"><data key="reference"></data><data key="text">i = projects.iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="493"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="252"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="494"><data key="reference"></data><data key="text">{
    Dependency dependency = (Dependency) k.next();
    String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
    if (dag.getVertex(dependencyId) != null) {
        // pluginManagement section.
        if (!id.equals(dependencyId)) {
            project.addProjectReference((MavenProject) projectMap.get(dependencyId));
            addEdgeWithParentCheck(projectMap, dependencyId, project, id);
        // TODO: Shouldn't we add an edge between the plugin and its dependency?
        // Note that doing this may result in cycles...run
        // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
        // for more information, if you change this:
        // dag.addEdge( pluginId, dependencyId );
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="253"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="495"><data key="reference"></data><data key="modifier"></data><data key="text">Dependency dependency = (Dependency) k.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="254"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="496"><data key="reference"></data><data key="text">dependency = (Dependency) k.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="255"><data key="reference"></data><data key="text">projects.iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="497"><data key="reference"></data><data key="text">Dependency</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="256"><data key="reference">java.util.List</data><data key="identifier">projects</data><data key="text">projects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="498"><data key="reference">nonQualifiedClassName</data><data key="identifier">Dependency</data><data key="text">Dependency</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="257"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="499"><data key="reference">org.apache.maven.model.Dependency</data><data key="identifier">dependency</data><data key="text">dependency</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="258"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="259"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="260"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="261"><data key="reference"></data><data key="text">{
    MavenProject project = (MavenProject) i.next();
    String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
    for (Iterator j = project.getDependencies().iterator(); j.hasNext(); ) {
        Dependency dependency = (Dependency) j.next();
        String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
        if (dag.getVertex(dependencyId) != null) {
            project.addProjectReference((MavenProject) projectMap.get(dependencyId));
            dag.addEdge(id, dependencyId);
        }
    }
    MavenProject parent = project.getParent();
    if (parent != null) {
        String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
        if (dag.getVertex(parentId) != null) {
            // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
            if (dag.hasEdge(parentId, id)) {
                dag.removeEdge(parentId, id);
            }
            dag.addEdge(id, parentId);
        }
    }
    List buildPlugins = project.getBuildPlugins();
    if (buildPlugins != null) {
        for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
            Plugin plugin = (Plugin) j.next();
            String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
            if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                addEdgeWithParentCheck(projectMap, pluginId, project, id);
            }
            if (!pluginId.equals(id)) {
                for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                    Dependency dependency = (Dependency) k.next();
                    String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                    if (dag.getVertex(dependencyId) != null) {
                        // pluginManagement section.
                        if (!id.equals(dependencyId)) {
                            project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                            addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                        // TODO: Shouldn't we add an edge between the plugin and its dependency?
                        // Note that doing this may result in cycles...run
                        // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                        // for more information, if you change this:
                        // dag.addEdge( pluginId, dependencyId );
                        }
                    }
                }
            }
        }
    }
    List reportPlugins = project.getReportPlugins();
    if (reportPlugins != null) {
        for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
            ReportPlugin plugin = (ReportPlugin) j.next();
            String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
            if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                addEdgeWithParentCheck(projectMap, pluginId, project, id);
            }
        }
    }
    for (Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); ) {
        Extension extension = (Extension) j.next();
        String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
        if (dag.getVertex(extensionId) != null) {
            addEdgeWithParentCheck(projectMap, extensionId, project, id);
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="262"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project = (MavenProject) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="263"><data key="reference"></data><data key="text">project = (MavenProject) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="264"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="265"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="266"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="267"><data key="reference"></data><data key="text">(MavenProject) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="268"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="269"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="270"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="271"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="272"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="273"><data key="reference"></data><data key="modifier"></data><data key="text">String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="274"><data key="reference"></data><data key="text">id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="275"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="276"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="277"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="278"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="279"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="280"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="281"><data key="reference"></data><data key="text">project.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="282"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="283"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="284"><data key="reference"></data><data key="text">project.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="285"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="286"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="287"><data key="reference"></data><data key="text">for (Iterator j = project.getDependencies().iterator(); j.hasNext(); ) {
    Dependency dependency = (Dependency) j.next();
    String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
    if (dag.getVertex(dependencyId) != null) {
        project.addProjectReference((MavenProject) projectMap.get(dependencyId));
        dag.addEdge(id, dependencyId);
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="288"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator j = project.getDependencies().iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="289"><data key="reference"></data><data key="text">j = project.getDependencies().iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="290"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="291"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="292"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="293"><data key="reference"></data><data key="text">project.getDependencies().iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="294"><data key="reference"></data><data key="text">project.getDependencies()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="295"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="296"><data key="reference">otherMethodCall</data><data key="identifier">getDependencies</data><data key="text">getDependencies</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="297"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="298"><data key="reference"></data><data key="text">j.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="299"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1305"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1304"><data key="reference">java.util.Set</data><data key="identifier">out</data><data key="text">out</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1303"><data key="reference"></data><data key="text">out.add(projectMap.get(v.getLabel()))</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1302"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1301"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1300"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1309"><data key="reference"></data><data key="text">v.getLabel()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1308"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1307"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1306"><data key="reference"></data><data key="text">projectMap.get(v.getLabel())</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1316"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1315"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1314"><data key="reference"></data><data key="text">i = v.getParents().iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1313"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = v.getParents().iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1312"><data key="reference"></data><data key="text">for (Iterator i = v.getParents().iterator(); i.hasNext(); ) {
    Vertex parent = (Vertex) i.next();
    gatherAncestors(parent, projectMap, out, visited);
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="1311"><data key="reference">otherMethodCall</data><data key="identifier">getLabel</data><data key="text">getLabel</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1310"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1319"><data key="reference"></data><data key="text">v.getParents()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1318"><data key="reference"></data><data key="text">v.getParents().iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1317"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1330"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vertex</data><data key="text">Vertex</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1327"><data key="reference"></data><data key="modifier"></data><data key="text">Vertex parent = (Vertex) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1326"><data key="reference"></data><data key="text">{
    Vertex parent = (Vertex) i.next();
    gatherAncestors(parent, projectMap, out, visited);
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1325"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1324"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1323"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="1322"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1321"><data key="reference">otherMethodCall</data><data key="identifier">getParents</data><data key="text">getParents</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1320"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="900"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="901"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="902"><data key="reference"></data><data key="text">project.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="903"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="904"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="905"><data key="reference"></data><data key="text">project.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1329"><data key="reference"></data><data key="text">Vertex</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="906"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1328"><data key="reference"></data><data key="text">parent = (Vertex) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="907"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="908"><data key="reference"></data><data key="modifier"></data><data key="text">Vertex v = dag.getVertex(id)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="909"><data key="reference"></data><data key="text">v = dag.getVertex(id)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1341"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1340"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">parent</data><data key="text">parent</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1338"><data key="reference"></data><data key="text">gatherAncestors(parent, projectMap, out, visited)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1337"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1336"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1335"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1334"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vertex</data><data key="text">Vertex</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1333"><data key="reference"></data><data key="text">Vertex</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1332"><data key="reference"></data><data key="text">(Vertex) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1331"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">parent</data><data key="text">parent</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="910"><data key="reference"></data><data key="text">Vertex</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="911"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vertex</data><data key="text">Vertex</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="912"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="913"><data key="reference"></data><data key="text">dag.getVertex(id)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="914"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="915"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="916"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="917"><data key="reference"></data><data key="text">if (make) {
    gatherDescendents(v, projectMap, projectsToMake, new HashSet());
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1339"><data key="reference">otherMethodCall</data><data key="identifier">gatherAncestors</data><data key="text">gatherAncestors</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="918"><data key="reference">boolean</data><data key="identifier">make</data><data key="text">make</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="919"><data key="reference"></data><data key="text">{
    gatherDescendents(v, projectMap, projectsToMake, new HashSet());
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1110"><data key="reference">UnknownType</data><data key="identifier">System</data><data key="text">System</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1352"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1351"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1350"><data key="reference"></data><data key="modifier"></data><data key="text">String projectRefId</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1107"><data key="reference"></data><data key="text">File</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1349"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1106"><data key="reference"></data><data key="text">new File(System.getProperty("user.dir"))</data><data key="type">ObjectCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="1348"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1105"><data key="reference">java.io.File</data><data key="identifier">baseDir</data><data key="text">baseDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1347"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1104"><data key="reference"></data><data key="identifier">=</data><data key="text">baseDir = new File(System.getProperty("user.dir"))</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1346"><data key="reference"></data><data key="modifier"></data><data key="text">Map projectMap</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1103"><data key="reference"></data><data key="text">{
    baseDir = new File(System.getProperty("user.dir"));
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1345"><data key="reference">userDefinedMethodName</data><data key="identifier">addEdgeWithParentCheck</data><data key="text">addEdgeWithParentCheck</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1102"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1344"><data key="reference"></data><data key="modifier">private</data><data key="text">private void addEdgeWithParentCheck(Map projectMap, String projectRefId, MavenProject project, String id) throws CycleDetectedException {
    MavenProject extProject = (MavenProject) projectMap.get(projectRefId);
    if (extProject == null) {
        return;
    }
    project.addProjectReference(extProject);
    MavenProject extParent = extProject.getParent();
    if (extParent != null) {
        String parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId());
        // Don't add edge from parent to extension if a reverse edge already exists
        if (!dag.hasEdge(projectRefId, id) || !parentId.equals(id)) {
            dag.addEdge(id, projectRefId);
        }
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1101"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1343"><data key="reference">java.util.Set</data><data key="identifier">visited</data><data key="text">visited</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="920"><data key="reference"></data><data key="text">gatherDescendents(v, projectMap, projectsToMake, new HashSet())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1100"><data key="reference"></data><data key="text">topLevelProject == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1342"><data key="reference">java.util.Set</data><data key="identifier">out</data><data key="text">out</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="921"><data key="reference">otherMethodCall</data><data key="identifier">gatherDescendents</data><data key="text">gatherDescendents</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="922"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="923"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="924"><data key="reference">java.util.Set</data><data key="identifier">projectsToMake</data><data key="text">projectsToMake</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="925"><data key="reference"></data><data key="text">new HashSet()</data><data key="type">ObjectCreationExpr</data><data key="parentType">MethodCallExpr</data></node><node id="926"><data key="reference"></data><data key="text">HashSet</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="927"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashSet</data><data key="text">HashSet</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1109"><data key="reference"></data><data key="text">System.getProperty("user.dir")</data><data key="type">MethodCallExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="928"><data key="reference"></data><data key="text">if (makeDependents) {
    gatherAncestors(v, projectMap, projectsToMake, new HashSet());
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1108"><data key="reference">nonQualifiedClassName</data><data key="identifier">File</data><data key="text">File</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="929"><data key="reference">boolean</data><data key="identifier">makeDependents</data><data key="text">makeDependents</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1121"><data key="reference"></data><data key="text">File</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1363"><data key="reference">nonQualifiedClassName</data><data key="identifier">CycleDetectedException</data><data key="text">CycleDetectedException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1120"><data key="reference"></data><data key="text">projectDir = new File(baseDir, projectName)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1362"><data key="reference"></data><data key="text">CycleDetectedException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1361"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1360"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1118"><data key="reference">otherMethodCall</data><data key="identifier">getBasedir</data><data key="text">getBasedir</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1117"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1359"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1116"><data key="reference"></data><data key="text">topLevelProject.getBasedir()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1358"><data key="reference"></data><data key="modifier"></data><data key="text">String id</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1115"><data key="reference">java.io.File</data><data key="identifier">baseDir</data><data key="text">baseDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1357"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1114"><data key="reference"></data><data key="identifier">=</data><data key="text">baseDir = topLevelProject.getBasedir()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1356"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1113"><data key="reference"></data><data key="text">{
    baseDir = topLevelProject.getBasedir();
// or should this be .getFile().getParentFile() ?
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1355"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="930"><data key="reference"></data><data key="text">{
    gatherAncestors(v, projectMap, projectsToMake, new HashSet());
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1112"><data key="reference"></data><data key="identifier">user.dir</data><data key="text">"user.dir"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1354"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="931"><data key="reference"></data><data key="text">gatherAncestors(v, projectMap, projectsToMake, new HashSet())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1111"><data key="reference">otherMethodCall</data><data key="identifier">getProperty</data><data key="text">getProperty</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1353"><data key="reference">java.lang.String</data><data key="identifier">projectRefId</data><data key="text">projectRefId</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="932"><data key="reference">otherMethodCall</data><data key="identifier">gatherAncestors</data><data key="text">gatherAncestors</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="933"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="934"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="935"><data key="reference">java.util.Set</data><data key="identifier">projectsToMake</data><data key="text">projectsToMake</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="936"><data key="reference"></data><data key="text">new HashSet()</data><data key="type">ObjectCreationExpr</data><data key="parentType">MethodCallExpr</data></node><node id="937"><data key="reference"></data><data key="text">HashSet</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="938"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashSet</data><data key="text">HashSet</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="939"><data key="reference"></data><data key="text">for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
    MavenProject project = (MavenProject) i.next();
    if (!projectsToMake.contains(project)) {
        i.remove();
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="1119"><data key="reference"></data><data key="modifier"></data><data key="text">File projectDir = new File(baseDir, projectName)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1132"><data key="reference">java.io.File</data><data key="identifier">projectDir</data><data key="text">projectDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1374"><data key="reference"></data><data key="text">projectMap.get(projectRefId)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1131"><data key="reference"></data><data key="text">projectDir.exists()</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="1373"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1130"><data key="reference"></data><data key="text">!projectDir.exists()</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="1372"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1371"><data key="reference"></data><data key="text">(MavenProject) projectMap.get(projectRefId)</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1370"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extProject</data><data key="text">extProject</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1129"><data key="reference"></data><data key="text">if (!projectDir.exists()) {
    throw new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath());
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1128"><data key="reference">java.lang.String</data><data key="identifier">projectName</data><data key="text">projectName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1127"><data key="reference">java.io.File</data><data key="identifier">baseDir</data><data key="text">baseDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1369"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1126"><data key="reference">nonQualifiedClassName</data><data key="identifier">File</data><data key="text">File</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1368"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1125"><data key="reference"></data><data key="text">File</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1367"><data key="reference"></data><data key="text">extProject = (MavenProject) projectMap.get(projectRefId)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="940"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = sortedProjects.iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1124"><data key="reference"></data><data key="text">new File(baseDir, projectName)</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1366"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject extProject = (MavenProject) projectMap.get(projectRefId)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="941"><data key="reference"></data><data key="text">i = sortedProjects.iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1123"><data key="reference">java.io.File</data><data key="identifier">projectDir</data><data key="text">projectDir</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1365"><data key="reference"></data><data key="text">{
    MavenProject extProject = (MavenProject) projectMap.get(projectRefId);
    if (extProject == null) {
        return;
    }
    project.addProjectReference(extProject);
    MavenProject extParent = extProject.getParent();
    if (extParent != null) {
        String parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId());
        // Don't add edge from parent to extension if a reverse edge already exists
        if (!dag.hasEdge(projectRefId, id) || !parentId.equals(id)) {
            dag.addEdge(id, projectRefId);
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="700"><data key="reference"></data><data key="modifier"></data><data key="text">String id = (String) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="942"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1122"><data key="reference">nonQualifiedClassName</data><data key="identifier">File</data><data key="text">File</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1364"><data key="reference"></data><data key="text">void</data><data key="type">VoidType</data><data key="parentType">MethodDeclaration</data></node><node id="701"><data key="reference"></data><data key="text">id = (String) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="943"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="702"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="944"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="703"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="945"><data key="reference"></data><data key="text">sortedProjects.iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="704"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="946"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="705"><data key="reference"></data><data key="text">(String) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="947"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="706"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="948"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="707"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="949"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="708"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="709"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1143"><data key="reference">otherMethodCall</data><data key="identifier">getAbsolutePath</data><data key="text">getAbsolutePath</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1385"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1142"><data key="reference">java.io.File</data><data key="identifier">projectDir</data><data key="text">projectDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1384"><data key="reference"></data><data key="text">project.addProjectReference(extProject)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1141"><data key="reference"></data><data key="text">projectDir.getAbsolutePath()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="1383"><data key="reference"></data><data key="text">return;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1140"><data key="reference"></data><data key="identifier">Couldn't find specified project dir: </data><data key="text">"Couldn't find specified project dir: "</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1382"><data key="reference"></data><data key="text">{
    return;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1381"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1380"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extProject</data><data key="text">extProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1139"><data key="reference"></data><data key="text">"Couldn't find specified project dir: " + projectDir.getAbsolutePath()</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1138"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1137"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1379"><data key="reference"></data><data key="text">extProject == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="950"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1136"><data key="reference"></data><data key="text">new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath())</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1378"><data key="reference"></data><data key="text">if (extProject == null) {
    return;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="951"><data key="reference"></data><data key="text">{
    MavenProject project = (MavenProject) i.next();
    if (!projectsToMake.contains(project)) {
        i.remove();
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1135"><data key="reference"></data><data key="text">throw new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath());</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1377"><data key="reference">java.lang.String</data><data key="identifier">projectRefId</data><data key="text">projectRefId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="710"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="952"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project = (MavenProject) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1134"><data key="reference"></data><data key="text">{
    throw new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath());
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1376"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="711"><data key="reference"></data><data key="text">sortedProjects.add(projectMap.get(id))</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="953"><data key="reference"></data><data key="text">project = (MavenProject) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1133"><data key="reference">otherMethodCall</data><data key="identifier">exists</data><data key="text">exists</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1375"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="712"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="954"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="713"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="955"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="714"><data key="reference"></data><data key="text">projectMap.get(id)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="956"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="715"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="957"><data key="reference"></data><data key="text">(MavenProject) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="716"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="958"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="717"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="959"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="718"><data key="reference"></data><data key="text">// TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
for (Iterator i = sortedProjects.iterator(); i.hasNext() &amp;&amp; topLevelProject == null; ) {
    MavenProject project = (MavenProject) i.next();
    if (project.isExecutionRoot()) {
        topLevelProject = project;
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="719"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = sortedProjects.iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1154"><data key="reference"></data><data key="text">"Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath()</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1396"><data key="reference"></data><data key="text">if (extParent != null) {
    String parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId());
    // Don't add edge from parent to extension if a reverse edge already exists
    if (!dag.hasEdge(projectRefId, id) || !parentId.equals(id)) {
        dag.addEdge(id, projectRefId);
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1153"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1395"><data key="reference">otherMethodCall</data><data key="identifier">getParent</data><data key="text">getParent</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1152"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1394"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extProject</data><data key="text">extProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1151"><data key="reference"></data><data key="text">new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath())</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1393"><data key="reference"></data><data key="text">extProject.getParent()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1150"><data key="reference"></data><data key="text">throw new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath());</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1392"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extParent</data><data key="text">extParent</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1391"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1390"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1149"><data key="reference"></data><data key="text">{
    throw new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath());
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="960"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1148"><data key="reference">otherMethodCall</data><data key="identifier">isDirectory</data><data key="text">isDirectory</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="961"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1147"><data key="reference">java.io.File</data><data key="identifier">projectDir</data><data key="text">projectDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1389"><data key="reference"></data><data key="text">extParent = extProject.getParent()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="720"><data key="reference"></data><data key="text">i = sortedProjects.iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="962"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1146"><data key="reference"></data><data key="text">projectDir.isDirectory()</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="1388"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject extParent = extProject.getParent()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="721"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="963"><data key="reference"></data><data key="text">if (!projectsToMake.contains(project)) {
    i.remove();
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1145"><data key="reference"></data><data key="text">!projectDir.isDirectory()</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="1387"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extProject</data><data key="text">extProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="722"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="964"><data key="reference"></data><data key="text">!projectsToMake.contains(project)</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="1144"><data key="reference"></data><data key="text">if (!projectDir.isDirectory()) {
    throw new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath());
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1386"><data key="reference">otherMethodCall</data><data key="identifier">addProjectReference</data><data key="text">addProjectReference</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="723"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="965"><data key="reference"></data><data key="text">projectsToMake.contains(project)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="724"><data key="reference"></data><data key="text">sortedProjects.iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="966"><data key="reference">java.util.Set</data><data key="identifier">projectsToMake</data><data key="text">projectsToMake</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="725"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="967"><data key="reference">otherMethodCall</data><data key="identifier">contains</data><data key="text">contains</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="726"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="968"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="727"><data key="reference"></data><data key="text">i.hasNext() &amp;&amp; topLevelProject == null</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="969"><data key="reference"></data><data key="text">{
    i.remove();
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="728"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="729"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1165"><data key="reference"></data><data key="text">projectMap.values().iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1164"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1163"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1162"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1161"><data key="reference"></data><data key="text">i = projectMap.values().iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1160"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = projectMap.values().iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="970"><data key="reference"></data><data key="text">i.remove()</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="971"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1159"><data key="reference"></data><data key="text">for (Iterator i = projectMap.values().iterator(); i.hasNext(); ) {
    project = (MavenProject) i.next();
    if (projectDir.equals(project.getFile().getParentFile()))
        return project;
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="730"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="972"><data key="reference">otherMethodCall</data><data key="identifier">remove</data><data key="text">remove</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1158"><data key="reference">otherMethodCall</data><data key="identifier">getAbsolutePath</data><data key="text">getAbsolutePath</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="731"><data key="reference"></data><data key="text">topLevelProject == null</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="973"><data key="reference"></data><data key="text">return sortedProjects;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1157"><data key="reference">java.io.File</data><data key="identifier">projectDir</data><data key="text">projectDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1399"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="732"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="974"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1156"><data key="reference"></data><data key="text">projectDir.getAbsolutePath()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="1398"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extParent</data><data key="text">extParent</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="733"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="975"><data key="reference"></data><data key="modifier">private,static</data><data key="text">private static void resumeFrom(String resumeFrom, List sortedProjects, Map projectMap, MavenProject topLevelProject) throws MissingProjectException {
    if (resumeFrom == null)
        return;
    MavenProject resumeFromProject = findProject(resumeFrom, projectMap, topLevelProject);
    for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        if (resumeFromProject.equals(project))
            break;
        i.remove();
    }
    if (sortedProjects.isEmpty()) {
        throw new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1155"><data key="reference"></data><data key="identifier">Couldn't find specified project dir (not a directory): </data><data key="text">"Couldn't find specified project dir (not a directory): "</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1397"><data key="reference"></data><data key="text">extParent != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="734"><data key="reference"></data><data key="text">{
    MavenProject project = (MavenProject) i.next();
    if (project.isExecutionRoot()) {
        topLevelProject = project;
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="976"><data key="reference">userDefinedMethodName</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="735"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project = (MavenProject) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="977"><data key="reference"></data><data key="modifier"></data><data key="text">String resumeFrom</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="736"><data key="reference"></data><data key="text">project = (MavenProject) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="978"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="737"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="979"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="738"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="739"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1176"><data key="reference"></data><data key="text">(MavenProject) i.next()</data><data key="type">CastExpr</data><data key="parentType">AssignExpr</data></node><node id="1175"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1174"><data key="reference"></data><data key="identifier">=</data><data key="text">project = (MavenProject) i.next()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1173"><data key="reference"></data><data key="text">{
    project = (MavenProject) i.next();
    if (projectDir.equals(project.getFile().getParentFile()))
        return project;
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1172"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1171"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1170"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="980"><data key="reference">java.lang.String</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="981"><data key="reference"></data><data key="modifier"></data><data key="text">List sortedProjects</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="740"><data key="reference"></data><data key="text">(MavenProject) i.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="982"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="741"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="983"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1169"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="500"><data key="reference"></data><data key="text">(Dependency) k.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="742"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="984"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1168"><data key="reference">otherMethodCall</data><data key="identifier">values</data><data key="text">values</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="501"><data key="reference"></data><data key="text">Dependency</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="743"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="985"><data key="reference"></data><data key="modifier"></data><data key="text">Map projectMap</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1167"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="502"><data key="reference">nonQualifiedClassName</data><data key="identifier">Dependency</data><data key="text">Dependency</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="744"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="986"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1166"><data key="reference"></data><data key="text">projectMap.values()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="503"><data key="reference"></data><data key="text">k.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="745"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="987"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="504"><data key="reference">java.util.Iterator</data><data key="identifier">k</data><data key="text">k</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="746"><data key="reference"></data><data key="text">if (project.isExecutionRoot()) {
    topLevelProject = project;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="988"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="505"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="747"><data key="reference"></data><data key="text">project.isExecutionRoot()</data><data key="type">MethodCallExpr</data><data key="parentType">IfStmt</data></node><node id="989"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject topLevelProject</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="506"><data key="reference"></data><data key="modifier"></data><data key="text">String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="748"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="507"><data key="reference"></data><data key="text">dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="749"><data key="reference">otherMethodCall</data><data key="identifier">isExecutionRoot</data><data key="text">isExecutionRoot</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="508"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="509"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1187"><data key="reference"></data><data key="text">project.getFile()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1186"><data key="reference"></data><data key="text">project.getFile().getParentFile()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1185"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1184"><data key="reference">java.io.File</data><data key="identifier">projectDir</data><data key="text">projectDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1183"><data key="reference"></data><data key="text">projectDir.equals(project.getFile().getParentFile())</data><data key="type">MethodCallExpr</data><data key="parentType">IfStmt</data></node><node id="1182"><data key="reference"></data><data key="text">if (projectDir.equals(project.getFile().getParentFile()))
    return project;</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1181"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1180"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="990"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="991"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="750"><data key="reference"></data><data key="text">{
    topLevelProject = project;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="992"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="751"><data key="reference"></data><data key="identifier">=</data><data key="text">topLevelProject = project</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="993"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="510"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="752"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="994"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="511"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="753"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="995"><data key="reference"></data><data key="text">void</data><data key="type">VoidType</data><data key="parentType">MethodDeclaration</data></node><node id="1179"><data key="reference"></data><data key="text">i.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="512"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="754"><data key="reference"></data><data key="identifier">=</data><data key="text">sortedProjects = applyMakeFilter(sortedProjects, dag, projectMap, topLevelProject, selectedProjectNames, make, makeDependents)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="996"><data key="reference"></data><data key="text">{
    if (resumeFrom == null)
        return;
    MavenProject resumeFromProject = findProject(resumeFrom, projectMap, topLevelProject);
    for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        if (resumeFromProject.equals(project))
            break;
        i.remove();
    }
    if (sortedProjects.isEmpty()) {
        throw new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1178"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="513"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="755"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="997"><data key="reference"></data><data key="text">if (resumeFrom == null)
    return;</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1177"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="514"><data key="reference"></data><data key="text">dependency.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="756"><data key="reference"></data><data key="text">applyMakeFilter(sortedProjects, dag, projectMap, topLevelProject, selectedProjectNames, make, makeDependents)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="998"><data key="reference"></data><data key="text">resumeFrom == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="515"><data key="reference">org.apache.maven.model.Dependency</data><data key="identifier">dependency</data><data key="text">dependency</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="757"><data key="reference">otherMethodCall</data><data key="identifier">applyMakeFilter</data><data key="text">applyMakeFilter</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="999"><data key="reference">java.lang.String</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="516"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="758"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="517"><data key="reference"></data><data key="text">dependency.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="759"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="518"><data key="reference">org.apache.maven.model.Dependency</data><data key="identifier">dependency</data><data key="text">dependency</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="519"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1190"><data key="reference">otherMethodCall</data><data key="identifier">getParentFile</data><data key="text">getParentFile</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1198"><data key="reference"></data><data key="identifier">Couldn't find specified project in module list: </data><data key="text">"Couldn't find specified project in module list: "</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1197"><data key="reference"></data><data key="text">"Couldn't find specified project in module list: " + projectDir.getAbsolutePath()</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1196"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1195"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1194"><data key="reference"></data><data key="text">new MissingProjectException("Couldn't find specified project in module list: " + projectDir.getAbsolutePath())</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1193"><data key="reference"></data><data key="text">throw new MissingProjectException("Couldn't find specified project in module list: " + projectDir.getAbsolutePath());</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1192"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1191"><data key="reference"></data><data key="text">return project;</data><data key="type">ReturnStmt</data><data key="parentType">IfStmt</data></node><node id="760"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="761"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="520"><data key="reference"></data><data key="text">if (dag.getVertex(dependencyId) != null) {
    // pluginManagement section.
    if (!id.equals(dependencyId)) {
        project.addProjectReference((MavenProject) projectMap.get(dependencyId));
        addEdgeWithParentCheck(projectMap, dependencyId, project, id);
    // TODO: Shouldn't we add an edge between the plugin and its dependency?
    // Note that doing this may result in cycles...run
    // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
    // for more information, if you change this:
    // dag.addEdge( pluginId, dependencyId );
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="762"><data key="reference">java.util.List</data><data key="identifier">selectedProjectNames</data><data key="text">selectedProjectNames</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="521"><data key="reference"></data><data key="text">dag.getVertex(dependencyId) != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="763"><data key="reference">boolean</data><data key="identifier">make</data><data key="text">make</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="522"><data key="reference"></data><data key="text">dag.getVertex(dependencyId)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="764"><data key="reference">boolean</data><data key="identifier">makeDependents</data><data key="text">makeDependents</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="523"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="765"><data key="reference"></data><data key="text">resumeFrom(resumeFrom, sortedProjects, projectMap, topLevelProject)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1189"><data key="reference">otherMethodCall</data><data key="identifier">getFile</data><data key="text">getFile</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="524"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="766"><data key="reference">otherMethodCall</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1188"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="525"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="767"><data key="reference">java.lang.String</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="526"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="768"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="527"><data key="reference"></data><data key="text">{
    // pluginManagement section.
    if (!id.equals(dependencyId)) {
        project.addProjectReference((MavenProject) projectMap.get(dependencyId));
        addEdgeWithParentCheck(projectMap, dependencyId, project, id);
    // TODO: Shouldn't we add an edge between the plugin and its dependency?
    // Note that doing this may result in cycles...run
    // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
    // for more information, if you change this:
    // dag.addEdge( pluginId, dependencyId );
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="769"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="528"><data key="reference"></data><data key="text">// pluginManagement section.
if (!id.equals(dependencyId)) {
    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
    addEdgeWithParentCheck(projectMap, dependencyId, project, id);
// TODO: Shouldn't we add an edge between the plugin and its dependency?
// Note that doing this may result in cycles...run
// ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
// for more information, if you change this:
// dag.addEdge( pluginId, dependencyId );
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="529"><data key="reference"></data><data key="text">!id.equals(dependencyId)</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="770"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="771"><data key="reference"></data><data key="identifier">=</data><data key="text">this.sortedProjects = Collections.unmodifiableList(sortedProjects)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="530"><data key="reference"></data><data key="text">id.equals(dependencyId)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="772"><data key="reference"></data><data key="text">this.sortedProjects</data><data key="type">FieldAccessExpr</data><data key="parentType">AssignExpr</data></node><node id="531"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="773"><data key="reference"></data><data key="text">this</data><data key="type">ThisExpr</data><data key="parentType">FieldAccessExpr</data></node><node id="532"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="774"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="533"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="775"><data key="reference"></data><data key="text">Collections.unmodifiableList(sortedProjects)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="534"><data key="reference"></data><data key="text">{
    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
    addEdgeWithParentCheck(projectMap, dependencyId, project, id);
// TODO: Shouldn't we add an edge between the plugin and its dependency?
// Note that doing this may result in cycles...run
// ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
// for more information, if you change this:
// dag.addEdge( pluginId, dependencyId );
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="776"><data key="reference">UnknownType</data><data key="identifier">Collections</data><data key="text">Collections</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="535"><data key="reference"></data><data key="text">project.addProjectReference((MavenProject) projectMap.get(dependencyId))</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="777"><data key="reference">otherMethodCall</data><data key="identifier">unmodifiableList</data><data key="text">unmodifiableList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1199"><data key="reference"></data><data key="text">projectDir.getAbsolutePath()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="536"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="778"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="537"><data key="reference">otherMethodCall</data><data key="identifier">addProjectReference</data><data key="text">addProjectReference</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="779"><data key="reference"></data><data key="modifier">private,static</data><data key="text">// make selected projects and possibly projects they depend on, or projects that depend on them
private static List applyMakeFilter(List sortedProjects, DAG dag, Map projectMap, MavenProject topLevelProject, List selectedProjectNames, boolean make, boolean makeDependents) throws MissingProjectException {
    if (selectedProjectNames == null)
        return sortedProjects;
    MavenProject[] selectedProjects = new MavenProject[selectedProjectNames.size()];
    for (int i = 0; i &lt; selectedProjects.length; i++) {
        selectedProjects[i] = findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject);
    }
    Set projectsToMake = new HashSet(Arrays.asList(selectedProjects));
    for (int i = 0; i &lt; selectedProjects.length; i++) {
        MavenProject project = selectedProjects[i];
        String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
        Vertex v = dag.getVertex(id);
        if (make) {
            gatherDescendents(v, projectMap, projectsToMake, new HashSet());
        }
        if (makeDependents) {
            gatherAncestors(v, projectMap, projectsToMake, new HashSet());
        }
    }
    for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        if (!projectsToMake.contains(project)) {
            i.remove();
        }
    }
    return sortedProjects;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="538"><data key="reference"></data><data key="text">(MavenProject) projectMap.get(dependencyId)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="539"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="780"><data key="reference">userDefinedMethodName</data><data key="identifier">applyMakeFilter</data><data key="text">applyMakeFilter</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="781"><data key="reference"></data><data key="modifier"></data><data key="text">List sortedProjects</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="540"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="782"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="541"><data key="reference"></data><data key="text">projectMap.get(dependencyId)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="783"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="300"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="542"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="784"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="301"><data key="reference"></data><data key="text">{
    Dependency dependency = (Dependency) j.next();
    String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
    if (dag.getVertex(dependencyId) != null) {
        project.addProjectReference((MavenProject) projectMap.get(dependencyId));
        dag.addEdge(id, dependencyId);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="543"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="785"><data key="reference"></data><data key="modifier"></data><data key="text">DAG dag</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="302"><data key="reference"></data><data key="modifier"></data><data key="text">Dependency dependency = (Dependency) j.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="544"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="786"><data key="reference"></data><data key="text">DAG</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="303"><data key="reference"></data><data key="text">dependency = (Dependency) j.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="545"><data key="reference"></data><data key="text">addEdgeWithParentCheck(projectMap, dependencyId, project, id)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="787"><data key="reference">nonQualifiedClassName</data><data key="identifier">DAG</data><data key="text">DAG</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="304"><data key="reference"></data><data key="text">Dependency</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="546"><data key="reference">otherMethodCall</data><data key="identifier">addEdgeWithParentCheck</data><data key="text">addEdgeWithParentCheck</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="788"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="305"><data key="reference">nonQualifiedClassName</data><data key="identifier">Dependency</data><data key="text">Dependency</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="547"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="789"><data key="reference"></data><data key="modifier"></data><data key="text">Map projectMap</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="306"><data key="reference">org.apache.maven.model.Dependency</data><data key="identifier">dependency</data><data key="text">dependency</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="548"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="307"><data key="reference"></data><data key="text">(Dependency) j.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="549"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="308"><data key="reference"></data><data key="text">Dependency</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="309"><data key="reference">nonQualifiedClassName</data><data key="identifier">Dependency</data><data key="text">Dependency</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="790"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="791"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="550"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="792"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="551"><data key="reference"></data><data key="modifier"></data><data key="text">List reportPlugins = project.getReportPlugins()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="793"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject topLevelProject</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="310"><data key="reference"></data><data key="text">j.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="552"><data key="reference"></data><data key="text">reportPlugins = project.getReportPlugins()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="794"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="311"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="553"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="795"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="312"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="554"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="796"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="313"><data key="reference"></data><data key="modifier"></data><data key="text">String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="555"><data key="reference">java.util.List</data><data key="identifier">reportPlugins</data><data key="text">reportPlugins</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="797"><data key="reference"></data><data key="modifier"></data><data key="text">List selectedProjectNames</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="314"><data key="reference"></data><data key="text">dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="556"><data key="reference"></data><data key="text">project.getReportPlugins()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="798"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="315"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="557"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="799"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="316"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="558"><data key="reference">otherMethodCall</data><data key="identifier">getReportPlugins</data><data key="text">getReportPlugins</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="317"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="559"><data key="reference"></data><data key="text">if (reportPlugins != null) {
    for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
        ReportPlugin plugin = (ReportPlugin) j.next();
        String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
        if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
            addEdgeWithParentCheck(projectMap, pluginId, project, id);
        }
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="318"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="319"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="560"><data key="reference"></data><data key="text">reportPlugins != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="561"><data key="reference">java.util.List</data><data key="identifier">reportPlugins</data><data key="text">reportPlugins</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="320"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="562"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="321"><data key="reference"></data><data key="text">dependency.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="563"><data key="reference"></data><data key="text">{
    for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
        ReportPlugin plugin = (ReportPlugin) j.next();
        String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
        if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
            addEdgeWithParentCheck(projectMap, pluginId, project, id);
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="322"><data key="reference">org.apache.maven.model.Dependency</data><data key="identifier">dependency</data><data key="text">dependency</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="564"><data key="reference"></data><data key="text">for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
    ReportPlugin plugin = (ReportPlugin) j.next();
    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
        addEdgeWithParentCheck(projectMap, pluginId, project, id);
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="323"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="565"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator j = reportPlugins.iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="324"><data key="reference"></data><data key="text">dependency.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="566"><data key="reference"></data><data key="text">j = reportPlugins.iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="325"><data key="reference">org.apache.maven.model.Dependency</data><data key="identifier">dependency</data><data key="text">dependency</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="567"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="326"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="568"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="327"><data key="reference"></data><data key="text">if (dag.getVertex(dependencyId) != null) {
    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
    dag.addEdge(id, dependencyId);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="569"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="328"><data key="reference"></data><data key="text">dag.getVertex(dependencyId) != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="329"><data key="reference"></data><data key="text">dag.getVertex(dependencyId)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="570"><data key="reference"></data><data key="text">reportPlugins.iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="571"><data key="reference">java.util.List</data><data key="identifier">reportPlugins</data><data key="text">reportPlugins</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="330"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="572"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="331"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="573"><data key="reference"></data><data key="text">j.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="332"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="574"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="333"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="575"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="334"><data key="reference"></data><data key="text">{
    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
    dag.addEdge(id, dependencyId);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="576"><data key="reference"></data><data key="text">{
    ReportPlugin plugin = (ReportPlugin) j.next();
    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
        addEdgeWithParentCheck(projectMap, pluginId, project, id);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="335"><data key="reference"></data><data key="text">project.addProjectReference((MavenProject) projectMap.get(dependencyId))</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="577"><data key="reference"></data><data key="modifier"></data><data key="text">ReportPlugin plugin = (ReportPlugin) j.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="336"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="578"><data key="reference"></data><data key="text">plugin = (ReportPlugin) j.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="337"><data key="reference">otherMethodCall</data><data key="identifier">addProjectReference</data><data key="text">addProjectReference</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="579"><data key="reference"></data><data key="text">ReportPlugin</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="338"><data key="reference"></data><data key="text">(MavenProject) projectMap.get(dependencyId)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="339"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="580"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReportPlugin</data><data key="text">ReportPlugin</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="581"><data key="reference">org.apache.maven.model.ReportPlugin</data><data key="identifier">plugin</data><data key="text">plugin</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="340"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="582"><data key="reference"></data><data key="text">(ReportPlugin) j.next()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="341"><data key="reference"></data><data key="text">projectMap.get(dependencyId)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="583"><data key="reference"></data><data key="text">ReportPlugin</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="100"><data key="reference"></data><data key="identifier">dag</data><data key="text">org.codehaus.plexus.util.dag</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="342"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="584"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReportPlugin</data><data key="text">ReportPlugin</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="101"><data key="reference"></data><data key="identifier">util</data><data key="text">org.codehaus.plexus.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="343"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="585"><data key="reference"></data><data key="text">j.next()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="102"><data key="reference"></data><data key="identifier">plexus</data><data key="text">org.codehaus.plexus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="344"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="586"><data key="reference">java.util.Iterator</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="103"><data key="reference"></data><data key="identifier">codehaus</data><data key="text">org.codehaus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="345"><data key="reference"></data><data key="text">dag.addEdge(id, dependencyId)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="587"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="104"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="346"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="588"><data key="reference"></data><data key="modifier"></data><data key="text">String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="105"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Sort projects by dependencies.
 *
 * @author &lt;a href="mailto:brett@apache.org"&gt;Brett Porter&lt;/a&gt;
 * @version $Id: ProjectSorter.java 793745 2009-07-13 23:24:10Z jdcasey $
 */
public class ProjectSorter {

    private final DAG dag;

    private final Map projectMap;

    private final List&lt;MavenProject&gt; sortedProjects;

    private MavenProject topLevelProject;

    /**
     * Sort a list of projects.
     * &lt;ul&gt;
     * &lt;li&gt;collect all the vertices for the projects that we want to build.&lt;/li&gt;
     * &lt;li&gt;iterate through the deps of each project and if that dep is within
     * the set of projects we want to build then add an edge, otherwise throw
     * the edge away because that dependency is not within the set of projects
     * we are trying to build. we assume a closed set.&lt;/li&gt;
     * &lt;li&gt;do a topo sort on the graph that remains.&lt;/li&gt;
     * &lt;/ul&gt;
     * @throws DuplicateProjectException if any projects are duplicated by id
     * @throws MissingProjectException
     */
    public ProjectSorter(List projects) throws CycleDetectedException, DuplicateProjectException, MissingProjectException {
        this(projects, null, null, false, false);
    }

    public ProjectSorter(List projects, List selectedProjectNames, String resumeFrom, boolean make, boolean makeDependents) throws CycleDetectedException, DuplicateProjectException, MissingProjectException {
        dag = new DAG();
        projectMap = new HashMap();
        for (Iterator i = projects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
            if (dag.getVertex(id) != null) {
                throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
            }
            dag.addVertex(id);
            projectMap.put(id, project);
        }
        for (Iterator i = projects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
            for (Iterator j = project.getDependencies().iterator(); j.hasNext(); ) {
                Dependency dependency = (Dependency) j.next();
                String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                if (dag.getVertex(dependencyId) != null) {
                    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                    dag.addEdge(id, dependencyId);
                }
            }
            MavenProject parent = project.getParent();
            if (parent != null) {
                String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
                if (dag.getVertex(parentId) != null) {
                    // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
                    if (dag.hasEdge(parentId, id)) {
                        dag.removeEdge(parentId, id);
                    }
                    dag.addEdge(id, parentId);
                }
            }
            List buildPlugins = project.getBuildPlugins();
            if (buildPlugins != null) {
                for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
                    Plugin plugin = (Plugin) j.next();
                    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                        addEdgeWithParentCheck(projectMap, pluginId, project, id);
                    }
                    if (!pluginId.equals(id)) {
                        for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                            Dependency dependency = (Dependency) k.next();
                            String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                            if (dag.getVertex(dependencyId) != null) {
                                // pluginManagement section.
                                if (!id.equals(dependencyId)) {
                                    project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                                    addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                                // TODO: Shouldn't we add an edge between the plugin and its dependency?
                                // Note that doing this may result in cycles...run
                                // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                                // for more information, if you change this:
                                // dag.addEdge( pluginId, dependencyId );
                                }
                            }
                        }
                    }
                }
            }
            List reportPlugins = project.getReportPlugins();
            if (reportPlugins != null) {
                for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
                    ReportPlugin plugin = (ReportPlugin) j.next();
                    String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                    if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                        addEdgeWithParentCheck(projectMap, pluginId, project, id);
                    }
                }
            }
            for (Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); ) {
                Extension extension = (Extension) j.next();
                String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
                if (dag.getVertex(extensionId) != null) {
                    addEdgeWithParentCheck(projectMap, extensionId, project, id);
                }
            }
        }
        List sortedProjects = new ArrayList();
        for (Iterator i = TopologicalSorter.sort(dag).iterator(); i.hasNext(); ) {
            String id = (String) i.next();
            sortedProjects.add(projectMap.get(id));
        }
        // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
        for (Iterator i = sortedProjects.iterator(); i.hasNext() &amp;&amp; topLevelProject == null; ) {
            MavenProject project = (MavenProject) i.next();
            if (project.isExecutionRoot()) {
                topLevelProject = project;
            }
        }
        sortedProjects = applyMakeFilter(sortedProjects, dag, projectMap, topLevelProject, selectedProjectNames, make, makeDependents);
        resumeFrom(resumeFrom, sortedProjects, projectMap, topLevelProject);
        this.sortedProjects = Collections.unmodifiableList(sortedProjects);
    }

    // make selected projects and possibly projects they depend on, or projects that depend on them
    private static List applyMakeFilter(List sortedProjects, DAG dag, Map projectMap, MavenProject topLevelProject, List selectedProjectNames, boolean make, boolean makeDependents) throws MissingProjectException {
        if (selectedProjectNames == null)
            return sortedProjects;
        MavenProject[] selectedProjects = new MavenProject[selectedProjectNames.size()];
        for (int i = 0; i &lt; selectedProjects.length; i++) {
            selectedProjects[i] = findProject((String) selectedProjectNames.get(i), projectMap, topLevelProject);
        }
        Set projectsToMake = new HashSet(Arrays.asList(selectedProjects));
        for (int i = 0; i &lt; selectedProjects.length; i++) {
            MavenProject project = selectedProjects[i];
            String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
            Vertex v = dag.getVertex(id);
            if (make) {
                gatherDescendents(v, projectMap, projectsToMake, new HashSet());
            }
            if (makeDependents) {
                gatherAncestors(v, projectMap, projectsToMake, new HashSet());
            }
        }
        for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            if (!projectsToMake.contains(project)) {
                i.remove();
            }
        }
        return sortedProjects;
    }

    private static void resumeFrom(String resumeFrom, List sortedProjects, Map projectMap, MavenProject topLevelProject) throws MissingProjectException {
        if (resumeFrom == null)
            return;
        MavenProject resumeFromProject = findProject(resumeFrom, projectMap, topLevelProject);
        for (Iterator i = sortedProjects.iterator(); i.hasNext(); ) {
            MavenProject project = (MavenProject) i.next();
            if (resumeFromProject.equals(project))
                break;
            i.remove();
        }
        if (sortedProjects.isEmpty()) {
            throw new MissingProjectException("Couldn't resume, project was not scheduled to run: " + resumeFrom);
        }
    }

    private static MavenProject findProject(String projectName, Map projectMap, MavenProject topLevelProject) throws MissingProjectException {
        MavenProject project = (MavenProject) projectMap.get(projectName);
        if (project != null)
            return project;
        // in that case, it must be a file path
        File baseDir;
        if (topLevelProject == null) {
            baseDir = new File(System.getProperty("user.dir"));
        } else {
            baseDir = topLevelProject.getBasedir();
        // or should this be .getFile().getParentFile() ?
        }
        File projectDir = new File(baseDir, projectName);
        if (!projectDir.exists()) {
            throw new MissingProjectException("Couldn't find specified project dir: " + projectDir.getAbsolutePath());
        }
        if (!projectDir.isDirectory()) {
            throw new MissingProjectException("Couldn't find specified project dir (not a directory): " + projectDir.getAbsolutePath());
        }
        for (Iterator i = projectMap.values().iterator(); i.hasNext(); ) {
            project = (MavenProject) i.next();
            if (projectDir.equals(project.getFile().getParentFile()))
                return project;
        }
        throw new MissingProjectException("Couldn't find specified project in module list: " + projectDir.getAbsolutePath());
    }

    private static void gatherDescendents(Vertex v, Map projectMap, Set out, Set visited) {
        if (visited.contains(v))
            return;
        visited.add(v);
        out.add(projectMap.get(v.getLabel()));
        for (Iterator i = v.getChildren().iterator(); i.hasNext(); ) {
            Vertex child = (Vertex) i.next();
            gatherDescendents(child, projectMap, out, visited);
        }
    }

    private static void gatherAncestors(Vertex v, Map projectMap, Set out, Set visited) {
        if (visited.contains(v))
            return;
        visited.add(v);
        out.add(projectMap.get(v.getLabel()));
        for (Iterator i = v.getParents().iterator(); i.hasNext(); ) {
            Vertex parent = (Vertex) i.next();
            gatherAncestors(parent, projectMap, out, visited);
        }
    }

    private void addEdgeWithParentCheck(Map projectMap, String projectRefId, MavenProject project, String id) throws CycleDetectedException {
        MavenProject extProject = (MavenProject) projectMap.get(projectRefId);
        if (extProject == null) {
            return;
        }
        project.addProjectReference(extProject);
        MavenProject extParent = extProject.getParent();
        if (extParent != null) {
            String parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId());
            // Don't add edge from parent to extension if a reverse edge already exists
            if (!dag.hasEdge(projectRefId, id) || !parentId.equals(id)) {
                dag.addEdge(id, projectRefId);
            }
        }
    }

    public MavenProject getTopLevelProject() {
        return topLevelProject;
    }

    public List&lt;MavenProject&gt; getSortedProjects() {
        return sortedProjects;
    }

    public boolean hasMultipleProjects() {
        return sortedProjects.size() &gt; 1;
    }

    public List getDependents(String id) {
        return dag.getParentLabels(id);
    }

    public DAG getDAG() {
        return dag;
    }

    public Map getProjectMap() {
        return projectMap;
    }
}</data><data key="type">ClassOrInterfaceDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="347"><data key="reference">otherMethodCall</data><data key="identifier">addEdge</data><data key="text">addEdge</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="589"><data key="reference"></data><data key="text">pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="106"><data key="reference">java.lang.Object</data><data key="identifier">ProjectSorter</data><data key="text">ProjectSorter</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="348"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="107"><data key="reference"></data><data key="modifier">private,final</data><data key="text">private final DAG dag;</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="349"><data key="reference">java.lang.String</data><data key="identifier">dependencyId</data><data key="text">dependencyId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="108"><data key="reference"></data><data key="text">dag</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="109"><data key="reference"></data><data key="text">DAG</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="590"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="591"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="350"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject parent = project.getParent()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="592"><data key="reference">java.lang.String</data><data key="identifier">pluginId</data><data key="text">pluginId</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="351"><data key="reference"></data><data key="text">parent = project.getParent()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="593"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="110"><data key="reference">nonQualifiedClassName</data><data key="identifier">DAG</data><data key="text">DAG</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="352"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="594"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="111"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="353"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="595"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="112"><data key="reference"></data><data key="modifier">private,final</data><data key="text">private final Map projectMap;</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="354"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">parent</data><data key="text">parent</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="596"><data key="reference"></data><data key="text">plugin.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="113"><data key="reference"></data><data key="text">projectMap</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="355"><data key="reference"></data><data key="text">project.getParent()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="597"><data key="reference">org.apache.maven.model.ReportPlugin</data><data key="identifier">plugin</data><data key="text">plugin</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="114"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="356"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">project</data><data key="text">project</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="598"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="115"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="357"><data key="reference">otherMethodCall</data><data key="identifier">getParent</data><data key="text">getParent</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="599"><data key="reference"></data><data key="text">plugin.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="116"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="358"><data key="reference"></data><data key="text">if (parent != null) {
    String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
    if (dag.getVertex(parentId) != null) {
        // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
        if (dag.hasEdge(parentId, id)) {
            dag.removeEdge(parentId, id);
        }
        dag.addEdge(id, parentId);
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="117"><data key="reference"></data><data key="modifier">private,final</data><data key="text">private final List&lt;MavenProject&gt; sortedProjects;</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="359"><data key="reference"></data><data key="text">parent != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="118"><data key="reference"></data><data key="text">sortedProjects</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="119"><data key="reference"></data><data key="text">List&lt;MavenProject&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="10"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="11"><data key="reference"></data><data key="text">import java.util.ArrayList;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="12"><data key="reference"></data><data key="identifier">ArrayList</data><data key="text">java.util.ArrayList</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="13"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="14"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="15"><data key="reference"></data><data key="text">import java.util.Arrays;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="16"><data key="reference"></data><data key="identifier">Arrays</data><data key="text">java.util.Arrays</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="17"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="18"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="19"><data key="reference"></data><data key="text">import java.util.Collections;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="360"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">parent</data><data key="text">parent</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="361"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="120"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="362"><data key="reference"></data><data key="text">{
    String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
    if (dag.getVertex(parentId) != null) {
        // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
        if (dag.hasEdge(parentId, id)) {
            dag.removeEdge(parentId, id);
        }
        dag.addEdge(id, parentId);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="121"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="363"><data key="reference"></data><data key="modifier"></data><data key="text">String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="122"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="364"><data key="reference"></data><data key="text">parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="123"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="365"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="124"><data key="reference"></data><data key="modifier">private</data><data key="text">private MavenProject topLevelProject;</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="366"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="125"><data key="reference"></data><data key="text">topLevelProject</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="367"><data key="reference">java.lang.String</data><data key="identifier">parentId</data><data key="text">parentId</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="126"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="368"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="127"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="369"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="128"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="129"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Sort a list of projects.
 * &lt;ul&gt;
 * &lt;li&gt;collect all the vertices for the projects that we want to build.&lt;/li&gt;
 * &lt;li&gt;iterate through the deps of each project and if that dep is within
 * the set of projects we want to build then add an edge, otherwise throw
 * the edge away because that dependency is not within the set of projects
 * we are trying to build. we assume a closed set.&lt;/li&gt;
 * &lt;li&gt;do a topo sort on the graph that remains.&lt;/li&gt;
 * &lt;/ul&gt;
 * @throws DuplicateProjectException if any projects are duplicated by id
 * @throws MissingProjectException
 */
public ProjectSorter(List projects) throws CycleDetectedException, DuplicateProjectException, MissingProjectException {
    this(projects, null, null, false, false);
}</data><data key="type">ConstructorDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="20"><data key="reference"></data><data key="identifier">Collections</data><data key="text">java.util.Collections</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="21"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="22"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="23"><data key="reference"></data><data key="text">import java.util.HashMap;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="24"><data key="reference"></data><data key="identifier">HashMap</data><data key="text">java.util.HashMap</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="25"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="26"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="27"><data key="reference"></data><data key="text">import java.util.HashSet;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="28"><data key="reference"></data><data key="identifier">HashSet</data><data key="text">java.util.HashSet</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="29"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="370"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="371"><data key="reference"></data><data key="text">parent.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="130"><data key="reference">userDefinedMethodName</data><data key="identifier">ProjectSorter</data><data key="text">ProjectSorter</data><data key="type">SimpleName</data><data key="parentType">ConstructorDeclaration</data></node><node id="372"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">parent</data><data key="text">parent</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="131"><data key="reference"></data><data key="modifier"></data><data key="text">List projects</data><data key="type">Parameter</data><data key="parentType">ConstructorDeclaration</data></node><node id="373"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="132"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="374"><data key="reference"></data><data key="text">parent.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="133"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="375"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">parent</data><data key="text">parent</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="134"><data key="reference">java.util.List</data><data key="identifier">projects</data><data key="text">projects</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="376"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="135"><data key="reference"></data><data key="text">CycleDetectedException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ConstructorDeclaration</data></node><node id="377"><data key="reference"></data><data key="text">if (dag.getVertex(parentId) != null) {
    // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
    if (dag.hasEdge(parentId, id)) {
        dag.removeEdge(parentId, id);
    }
    dag.addEdge(id, parentId);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="136"><data key="reference">nonQualifiedClassName</data><data key="identifier">CycleDetectedException</data><data key="text">CycleDetectedException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="378"><data key="reference"></data><data key="text">dag.getVertex(parentId) != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="137"><data key="reference"></data><data key="text">DuplicateProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ConstructorDeclaration</data></node><node id="379"><data key="reference"></data><data key="text">dag.getVertex(parentId)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="138"><data key="reference">nonQualifiedClassName</data><data key="identifier">DuplicateProjectException</data><data key="text">DuplicateProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="139"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ConstructorDeclaration</data></node><node id="30"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="31"><data key="reference"></data><data key="text">import java.util.Iterator;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="32"><data key="reference"></data><data key="identifier">Iterator</data><data key="text">java.util.Iterator</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="33"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="34"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="35"><data key="reference"></data><data key="text">import java.util.List;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="36"><data key="reference"></data><data key="identifier">List</data><data key="text">java.util.List</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="37"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="38"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="39"><data key="reference"></data><data key="text">import java.util.Map;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="380"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="381"><data key="reference">otherMethodCall</data><data key="identifier">getVertex</data><data key="text">getVertex</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="140"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="382"><data key="reference">java.lang.String</data><data key="identifier">parentId</data><data key="text">parentId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="141"><data key="reference"></data><data key="text">{
    this(projects, null, null, false, false);
}</data><data key="type">BlockStmt</data><data key="parentType">ConstructorDeclaration</data></node><node id="383"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="142"><data key="reference"></data><data key="text">this(projects, null, null, false, false);</data><data key="type">ExplicitConstructorInvocationStmt</data><data key="parentType">BlockStmt</data></node><node id="384"><data key="reference"></data><data key="text">{
    // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
    if (dag.hasEdge(parentId, id)) {
        dag.removeEdge(parentId, id);
    }
    dag.addEdge(id, parentId);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="143"><data key="reference">java.util.List</data><data key="identifier">projects</data><data key="text">projects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="385"><data key="reference"></data><data key="text">// Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
if (dag.hasEdge(parentId, id)) {
    dag.removeEdge(parentId, id);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="144"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ExplicitConstructorInvocationStmt</data></node><node id="386"><data key="reference"></data><data key="text">dag.hasEdge(parentId, id)</data><data key="type">MethodCallExpr</data><data key="parentType">IfStmt</data></node><node id="145"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ExplicitConstructorInvocationStmt</data></node><node id="387"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="146"><data key="reference"></data><data key="identifier">false</data><data key="text">false</data><data key="type">BooleanLiteralExpr</data><data key="parentType">ExplicitConstructorInvocationStmt</data></node><node id="388"><data key="reference">otherMethodCall</data><data key="identifier">hasEdge</data><data key="text">hasEdge</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="147"><data key="reference"></data><data key="identifier">false</data><data key="text">false</data><data key="type">BooleanLiteralExpr</data><data key="parentType">ExplicitConstructorInvocationStmt</data></node><node id="389"><data key="reference">java.lang.String</data><data key="identifier">parentId</data><data key="text">parentId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="148"><data key="reference"></data><data key="modifier">public</data><data key="text">public ProjectSorter(List projects, List selectedProjectNames, String resumeFrom, boolean make, boolean makeDependents) throws CycleDetectedException, DuplicateProjectException, MissingProjectException {
    dag = new DAG();
    projectMap = new HashMap();
    for (Iterator i = projects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
        if (dag.getVertex(id) != null) {
            throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
        }
        dag.addVertex(id);
        projectMap.put(id, project);
    }
    for (Iterator i = projects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
        for (Iterator j = project.getDependencies().iterator(); j.hasNext(); ) {
            Dependency dependency = (Dependency) j.next();
            String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
            if (dag.getVertex(dependencyId) != null) {
                project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                dag.addEdge(id, dependencyId);
            }
        }
        MavenProject parent = project.getParent();
        if (parent != null) {
            String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
            if (dag.getVertex(parentId) != null) {
                // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
                if (dag.hasEdge(parentId, id)) {
                    dag.removeEdge(parentId, id);
                }
                dag.addEdge(id, parentId);
            }
        }
        List buildPlugins = project.getBuildPlugins();
        if (buildPlugins != null) {
            for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
                Plugin plugin = (Plugin) j.next();
                String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                    addEdgeWithParentCheck(projectMap, pluginId, project, id);
                }
                if (!pluginId.equals(id)) {
                    for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                        Dependency dependency = (Dependency) k.next();
                        String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                        if (dag.getVertex(dependencyId) != null) {
                            // pluginManagement section.
                            if (!id.equals(dependencyId)) {
                                project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                                addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                            // TODO: Shouldn't we add an edge between the plugin and its dependency?
                            // Note that doing this may result in cycles...run
                            // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                            // for more information, if you change this:
                            // dag.addEdge( pluginId, dependencyId );
                            }
                        }
                    }
                }
            }
        }
        List reportPlugins = project.getReportPlugins();
        if (reportPlugins != null) {
            for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
                ReportPlugin plugin = (ReportPlugin) j.next();
                String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                    addEdgeWithParentCheck(projectMap, pluginId, project, id);
                }
            }
        }
        for (Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); ) {
            Extension extension = (Extension) j.next();
            String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
            if (dag.getVertex(extensionId) != null) {
                addEdgeWithParentCheck(projectMap, extensionId, project, id);
            }
        }
    }
    List sortedProjects = new ArrayList();
    for (Iterator i = TopologicalSorter.sort(dag).iterator(); i.hasNext(); ) {
        String id = (String) i.next();
        sortedProjects.add(projectMap.get(id));
    }
    // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
    for (Iterator i = sortedProjects.iterator(); i.hasNext() &amp;&amp; topLevelProject == null; ) {
        MavenProject project = (MavenProject) i.next();
        if (project.isExecutionRoot()) {
            topLevelProject = project;
        }
    }
    sortedProjects = applyMakeFilter(sortedProjects, dag, projectMap, topLevelProject, selectedProjectNames, make, makeDependents);
    resumeFrom(resumeFrom, sortedProjects, projectMap, topLevelProject);
    this.sortedProjects = Collections.unmodifiableList(sortedProjects);
}</data><data key="type">ConstructorDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="149"><data key="reference">userDefinedMethodName</data><data key="identifier">ProjectSorter</data><data key="text">ProjectSorter</data><data key="type">SimpleName</data><data key="parentType">ConstructorDeclaration</data></node><node id="40"><data key="reference"></data><data key="identifier">Map</data><data key="text">java.util.Map</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="41"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="42"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="43"><data key="reference"></data><data key="text">import java.util.Set;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="44"><data key="reference"></data><data key="identifier">Set</data><data key="text">java.util.Set</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="45"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="46"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="47"><data key="reference"></data><data key="text">import org.apache.maven.artifact.ArtifactUtils;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="48"><data key="reference"></data><data key="identifier">ArtifactUtils</data><data key="text">org.apache.maven.artifact.ArtifactUtils</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="49"><data key="reference"></data><data key="identifier">artifact</data><data key="text">org.apache.maven.artifact</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="390"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="391"><data key="reference"></data><data key="text">{
    dag.removeEdge(parentId, id);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="150"><data key="reference"></data><data key="modifier"></data><data key="text">List projects</data><data key="type">Parameter</data><data key="parentType">ConstructorDeclaration</data></node><node id="392"><data key="reference"></data><data key="text">dag.removeEdge(parentId, id)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="151"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="393"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="152"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="394"><data key="reference">otherMethodCall</data><data key="identifier">removeEdge</data><data key="text">removeEdge</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="153"><data key="reference">java.util.List</data><data key="identifier">projects</data><data key="text">projects</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="395"><data key="reference">java.lang.String</data><data key="identifier">parentId</data><data key="text">parentId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="154"><data key="reference"></data><data key="modifier"></data><data key="text">List selectedProjectNames</data><data key="type">Parameter</data><data key="parentType">ConstructorDeclaration</data></node><node id="396"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="155"><data key="reference"></data><data key="text">List</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="397"><data key="reference"></data><data key="text">dag.addEdge(id, parentId)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="156"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="398"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="157"><data key="reference">java.util.List</data><data key="identifier">selectedProjectNames</data><data key="text">selectedProjectNames</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="399"><data key="reference">otherMethodCall</data><data key="identifier">addEdge</data><data key="text">addEdge</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="158"><data key="reference"></data><data key="modifier"></data><data key="text">String resumeFrom</data><data key="type">Parameter</data><data key="parentType">ConstructorDeclaration</data></node><node id="159"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="50"><data key="reference"></data><data key="identifier">maven</data><data key="text">org.apache.maven</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="51"><data key="reference"></data><data key="identifier">apache</data><data key="text">org.apache</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="52"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="53"><data key="reference"></data><data key="text">import org.apache.maven.model.Dependency;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="54"><data key="reference"></data><data key="identifier">Dependency</data><data key="text">org.apache.maven.model.Dependency</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="55"><data key="reference"></data><data key="identifier">model</data><data key="text">org.apache.maven.model</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="56"><data key="reference"></data><data key="identifier">maven</data><data key="text">org.apache.maven</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="57"><data key="reference"></data><data key="identifier">apache</data><data key="text">org.apache</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="58"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="59"><data key="reference"></data><data key="text">import org.apache.maven.model.Extension;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="160"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="161"><data key="reference">java.lang.String</data><data key="identifier">resumeFrom</data><data key="text">resumeFrom</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="162"><data key="reference"></data><data key="modifier"></data><data key="text">boolean make</data><data key="type">Parameter</data><data key="parentType">ConstructorDeclaration</data></node><node id="163"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">Parameter</data></node><node id="164"><data key="reference">boolean</data><data key="identifier">make</data><data key="text">make</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="165"><data key="reference"></data><data key="modifier"></data><data key="text">boolean makeDependents</data><data key="type">Parameter</data><data key="parentType">ConstructorDeclaration</data></node><node id="166"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">Parameter</data></node><node id="167"><data key="reference">boolean</data><data key="identifier">makeDependents</data><data key="text">makeDependents</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="168"><data key="reference"></data><data key="text">CycleDetectedException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ConstructorDeclaration</data></node><node id="169"><data key="reference">nonQualifiedClassName</data><data key="identifier">CycleDetectedException</data><data key="text">CycleDetectedException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="60"><data key="reference"></data><data key="identifier">Extension</data><data key="text">org.apache.maven.model.Extension</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="61"><data key="reference"></data><data key="identifier">model</data><data key="text">org.apache.maven.model</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="62"><data key="reference"></data><data key="identifier">maven</data><data key="text">org.apache.maven</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="63"><data key="reference"></data><data key="identifier">apache</data><data key="text">org.apache</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="64"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="65"><data key="reference"></data><data key="text">import org.apache.maven.model.Plugin;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="66"><data key="reference"></data><data key="identifier">Plugin</data><data key="text">org.apache.maven.model.Plugin</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="67"><data key="reference"></data><data key="identifier">model</data><data key="text">org.apache.maven.model</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="68"><data key="reference"></data><data key="identifier">maven</data><data key="text">org.apache.maven</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="69"><data key="reference"></data><data key="identifier">apache</data><data key="text">org.apache</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="170"><data key="reference"></data><data key="text">DuplicateProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ConstructorDeclaration</data></node><node id="171"><data key="reference">nonQualifiedClassName</data><data key="identifier">DuplicateProjectException</data><data key="text">DuplicateProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="172"><data key="reference"></data><data key="text">MissingProjectException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ConstructorDeclaration</data></node><node id="173"><data key="reference">nonQualifiedClassName</data><data key="identifier">MissingProjectException</data><data key="text">MissingProjectException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="174"><data key="reference"></data><data key="text">{
    dag = new DAG();
    projectMap = new HashMap();
    for (Iterator i = projects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
        if (dag.getVertex(id) != null) {
            throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
        }
        dag.addVertex(id);
        projectMap.put(id, project);
    }
    for (Iterator i = projects.iterator(); i.hasNext(); ) {
        MavenProject project = (MavenProject) i.next();
        String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
        for (Iterator j = project.getDependencies().iterator(); j.hasNext(); ) {
            Dependency dependency = (Dependency) j.next();
            String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
            if (dag.getVertex(dependencyId) != null) {
                project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                dag.addEdge(id, dependencyId);
            }
        }
        MavenProject parent = project.getParent();
        if (parent != null) {
            String parentId = ArtifactUtils.versionlessKey(parent.getGroupId(), parent.getArtifactId());
            if (dag.getVertex(parentId) != null) {
                // Parent is added as an edge, but must not cause a cycle - so we remove any other edges it has in conflict
                if (dag.hasEdge(parentId, id)) {
                    dag.removeEdge(parentId, id);
                }
                dag.addEdge(id, parentId);
            }
        }
        List buildPlugins = project.getBuildPlugins();
        if (buildPlugins != null) {
            for (Iterator j = buildPlugins.iterator(); j.hasNext(); ) {
                Plugin plugin = (Plugin) j.next();
                String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                    addEdgeWithParentCheck(projectMap, pluginId, project, id);
                }
                if (!pluginId.equals(id)) {
                    for (Iterator k = plugin.getDependencies().iterator(); k.hasNext(); ) {
                        Dependency dependency = (Dependency) k.next();
                        String dependencyId = ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());
                        if (dag.getVertex(dependencyId) != null) {
                            // pluginManagement section.
                            if (!id.equals(dependencyId)) {
                                project.addProjectReference((MavenProject) projectMap.get(dependencyId));
                                addEdgeWithParentCheck(projectMap, dependencyId, project, id);
                            // TODO: Shouldn't we add an edge between the plugin and its dependency?
                            // Note that doing this may result in cycles...run
                            // ProjectSorterTest.testPluginDependenciesInfluenceSorting_DeclarationInParent()
                            // for more information, if you change this:
                            // dag.addEdge( pluginId, dependencyId );
                            }
                        }
                    }
                }
            }
        }
        List reportPlugins = project.getReportPlugins();
        if (reportPlugins != null) {
            for (Iterator j = reportPlugins.iterator(); j.hasNext(); ) {
                ReportPlugin plugin = (ReportPlugin) j.next();
                String pluginId = ArtifactUtils.versionlessKey(plugin.getGroupId(), plugin.getArtifactId());
                if (dag.getVertex(pluginId) != null &amp;&amp; !pluginId.equals(id)) {
                    addEdgeWithParentCheck(projectMap, pluginId, project, id);
                }
            }
        }
        for (Iterator j = project.getBuildExtensions().iterator(); j.hasNext(); ) {
            Extension extension = (Extension) j.next();
            String extensionId = ArtifactUtils.versionlessKey(extension.getGroupId(), extension.getArtifactId());
            if (dag.getVertex(extensionId) != null) {
                addEdgeWithParentCheck(projectMap, extensionId, project, id);
            }
        }
    }
    List sortedProjects = new ArrayList();
    for (Iterator i = TopologicalSorter.sort(dag).iterator(); i.hasNext(); ) {
        String id = (String) i.next();
        sortedProjects.add(projectMap.get(id));
    }
    // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.
    for (Iterator i = sortedProjects.iterator(); i.hasNext() &amp;&amp; topLevelProject == null; ) {
        MavenProject project = (MavenProject) i.next();
        if (project.isExecutionRoot()) {
            topLevelProject = project;
        }
    }
    sortedProjects = applyMakeFilter(sortedProjects, dag, projectMap, topLevelProject, selectedProjectNames, make, makeDependents);
    resumeFrom(resumeFrom, sortedProjects, projectMap, topLevelProject);
    this.sortedProjects = Collections.unmodifiableList(sortedProjects);
}</data><data key="type">BlockStmt</data><data key="parentType">ConstructorDeclaration</data></node><node id="175"><data key="reference"></data><data key="identifier">=</data><data key="text">dag = new DAG()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="176"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="177"><data key="reference"></data><data key="text">new DAG()</data><data key="type">ObjectCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="178"><data key="reference"></data><data key="text">DAG</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="179"><data key="reference">nonQualifiedClassName</data><data key="identifier">DAG</data><data key="text">DAG</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="70"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="71"><data key="reference"></data><data key="text">import org.apache.maven.model.ReportPlugin;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="72"><data key="reference"></data><data key="identifier">ReportPlugin</data><data key="text">org.apache.maven.model.ReportPlugin</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="73"><data key="reference"></data><data key="identifier">model</data><data key="text">org.apache.maven.model</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="74"><data key="reference"></data><data key="identifier">maven</data><data key="text">org.apache.maven</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="75"><data key="reference"></data><data key="identifier">apache</data><data key="text">org.apache</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="76"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="77"><data key="reference"></data><data key="text">import org.codehaus.plexus.util.dag.CycleDetectedException;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="78"><data key="reference"></data><data key="identifier">CycleDetectedException</data><data key="text">org.codehaus.plexus.util.dag.CycleDetectedException</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="79"><data key="reference"></data><data key="identifier">dag</data><data key="text">org.codehaus.plexus.util.dag</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="180"><data key="reference"></data><data key="identifier">=</data><data key="text">projectMap = new HashMap()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="181"><data key="reference">java.util.Map</data><data key="identifier">projectMap</data><data key="text">projectMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="182"><data key="reference"></data><data key="text">new HashMap()</data><data key="type">ObjectCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="183"><data key="reference"></data><data key="text">HashMap</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="184"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashMap</data><data key="text">HashMap</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="185"><data key="reference"></data><data key="text">for (Iterator i = projects.iterator(); i.hasNext(); ) {
    MavenProject project = (MavenProject) i.next();
    String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
    if (dag.getVertex(id) != null) {
        throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
    }
    dag.addVertex(id);
    projectMap.put(id, project);
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="186"><data key="reference"></data><data key="modifier"></data><data key="text">Iterator i = projects.iterator()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="187"><data key="reference"></data><data key="text">i = projects.iterator()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="188"><data key="reference"></data><data key="text">Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="189"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="80"><data key="reference"></data><data key="identifier">util</data><data key="text">org.codehaus.plexus.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="81"><data key="reference"></data><data key="identifier">plexus</data><data key="text">org.codehaus.plexus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="82"><data key="reference"></data><data key="identifier">codehaus</data><data key="text">org.codehaus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="83"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="84"><data key="reference"></data><data key="text">import org.codehaus.plexus.util.dag.DAG;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="85"><data key="reference"></data><data key="identifier">DAG</data><data key="text">org.codehaus.plexus.util.dag.DAG</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="86"><data key="reference"></data><data key="identifier">dag</data><data key="text">org.codehaus.plexus.util.dag</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="87"><data key="reference"></data><data key="identifier">util</data><data key="text">org.codehaus.plexus.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="88"><data key="reference"></data><data key="identifier">plexus</data><data key="text">org.codehaus.plexus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="89"><data key="reference"></data><data key="identifier">codehaus</data><data key="text">org.codehaus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="190"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="191"><data key="reference"></data><data key="text">projects.iterator()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="192"><data key="reference">java.util.List</data><data key="identifier">projects</data><data key="text">projects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="193"><data key="reference">otherMethodCall</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="194"><data key="reference"></data><data key="text">i.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">ForStmt</data></node><node id="195"><data key="reference">java.util.Iterator</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="196"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="197"><data key="reference"></data><data key="text">{
    MavenProject project = (MavenProject) i.next();
    String id = ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());
    if (dag.getVertex(id) != null) {
        throw new DuplicateProjectException("Project '" + id + "' is duplicated in the reactor");
    }
    dag.addVertex(id);
    projectMap.put(id, project);
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="198"><data key="reference"></data><data key="modifier"></data><data key="text">MavenProject project = (MavenProject) i.next()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="199"><data key="reference"></data><data key="text">project = (MavenProject) i.next()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="90"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="91"><data key="reference"></data><data key="text">import org.codehaus.plexus.util.dag.TopologicalSorter;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="92"><data key="reference"></data><data key="identifier">TopologicalSorter</data><data key="text">org.codehaus.plexus.util.dag.TopologicalSorter</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="93"><data key="reference"></data><data key="identifier">dag</data><data key="text">org.codehaus.plexus.util.dag</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="94"><data key="reference"></data><data key="identifier">util</data><data key="text">org.codehaus.plexus.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="95"><data key="reference"></data><data key="identifier">plexus</data><data key="text">org.codehaus.plexus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="96"><data key="reference"></data><data key="identifier">codehaus</data><data key="text">org.codehaus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="97"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="98"><data key="reference"></data><data key="text">import org.codehaus.plexus.util.dag.Vertex;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="99"><data key="reference"></data><data key="identifier">Vertex</data><data key="text">org.codehaus.plexus.util.dag.Vertex</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="1404"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1403"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1402"><data key="reference"></data><data key="text">parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId())</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1401"><data key="reference"></data><data key="modifier"></data><data key="text">String parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId())</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1400"><data key="reference"></data><data key="text">{
    String parentId = ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId());
    // Don't add edge from parent to extension if a reverse edge already exists
    if (!dag.hasEdge(projectRefId, id) || !parentId.equals(id)) {
        dag.addEdge(id, projectRefId);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1409"><data key="reference"></data><data key="text">extParent.getGroupId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1408"><data key="reference">otherMethodCall</data><data key="identifier">versionlessKey</data><data key="text">versionlessKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1407"><data key="reference">UnknownType</data><data key="identifier">ArtifactUtils</data><data key="text">ArtifactUtils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1406"><data key="reference"></data><data key="text">ArtifactUtils.versionlessKey(extParent.getGroupId(), extParent.getArtifactId())</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1405"><data key="reference">java.lang.String</data><data key="identifier">parentId</data><data key="text">parentId</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1415"><data key="reference"></data><data key="text">// Don't add edge from parent to extension if a reverse edge already exists
if (!dag.hasEdge(projectRefId, id) || !parentId.equals(id)) {
    dag.addEdge(id, projectRefId);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1414"><data key="reference">otherMethodCall</data><data key="identifier">getArtifactId</data><data key="text">getArtifactId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1413"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extParent</data><data key="text">extParent</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1412"><data key="reference"></data><data key="text">extParent.getArtifactId()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1411"><data key="reference">otherMethodCall</data><data key="identifier">getGroupId</data><data key="text">getGroupId</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1410"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">extParent</data><data key="text">extParent</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1419"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1418"><data key="reference"></data><data key="text">dag.hasEdge(projectRefId, id)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="1417"><data key="reference"></data><data key="text">!dag.hasEdge(projectRefId, id)</data><data key="type">UnaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1416"><data key="reference"></data><data key="text">!dag.hasEdge(projectRefId, id) || !parentId.equals(id)</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1426"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1425"><data key="reference">java.lang.String</data><data key="identifier">parentId</data><data key="text">parentId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1424"><data key="reference"></data><data key="text">parentId.equals(id)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="1423"><data key="reference"></data><data key="text">!parentId.equals(id)</data><data key="type">UnaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1422"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1421"><data key="reference">java.lang.String</data><data key="identifier">projectRefId</data><data key="text">projectRefId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1420"><data key="reference">otherMethodCall</data><data key="identifier">hasEdge</data><data key="text">hasEdge</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1429"><data key="reference"></data><data key="text">dag.addEdge(id, projectRefId)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1428"><data key="reference"></data><data key="text">{
    dag.addEdge(id, projectRefId);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1427"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1440"><data key="reference">org.apache.maven.project.MavenProject</data><data key="identifier">topLevelProject</data><data key="text">topLevelProject</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1437"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1436"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1435"><data key="reference">userDefinedMethodName</data><data key="identifier">getTopLevelProject</data><data key="text">getTopLevelProject</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1434"><data key="reference"></data><data key="modifier">public</data><data key="text">public MavenProject getTopLevelProject() {
    return topLevelProject;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1433"><data key="reference">java.lang.String</data><data key="identifier">projectRefId</data><data key="text">projectRefId</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1432"><data key="reference">java.lang.String</data><data key="identifier">id</data><data key="text">id</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1431"><data key="reference">otherMethodCall</data><data key="identifier">addEdge</data><data key="text">addEdge</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1430"><data key="reference">org.codehaus.plexus.util.dag.DAG</data><data key="identifier">dag</data><data key="text">dag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1439"><data key="reference"></data><data key="text">return topLevelProject;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1438"><data key="reference"></data><data key="text">{
    return topLevelProject;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1451"><data key="reference">userDefinedMethodName</data><data key="identifier">hasMultipleProjects</data><data key="text">hasMultipleProjects</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1450"><data key="reference"></data><data key="modifier">public</data><data key="text">public boolean hasMultipleProjects() {
    return sortedProjects.size() &gt; 1;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1206"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vertex</data><data key="text">Vertex</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1448"><data key="reference"></data><data key="text">return sortedProjects;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1205"><data key="reference"></data><data key="text">Vertex</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1447"><data key="reference"></data><data key="text">{
    return sortedProjects;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1204"><data key="reference"></data><data key="modifier"></data><data key="text">Vertex v</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1446"><data key="reference">nonQualifiedClassName</data><data key="identifier">MavenProject</data><data key="text">MavenProject</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1203"><data key="reference">userDefinedMethodName</data><data key="identifier">gatherDescendents</data><data key="text">gatherDescendents</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1445"><data key="reference"></data><data key="text">MavenProject</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1202"><data key="reference"></data><data key="modifier">private,static</data><data key="text">private static void gatherDescendents(Vertex v, Map projectMap, Set out, Set visited) {
    if (visited.contains(v))
        return;
    visited.add(v);
    out.add(projectMap.get(v.getLabel()));
    for (Iterator i = v.getChildren().iterator(); i.hasNext(); ) {
        Vertex child = (Vertex) i.next();
        gatherDescendents(child, projectMap, out, visited);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1444"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1201"><data key="reference">otherMethodCall</data><data key="identifier">getAbsolutePath</data><data key="text">getAbsolutePath</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1443"><data key="reference"></data><data key="text">List&lt;MavenProject&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1200"><data key="reference">java.io.File</data><data key="identifier">projectDir</data><data key="text">projectDir</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1442"><data key="reference">userDefinedMethodName</data><data key="identifier">getSortedProjects</data><data key="text">getSortedProjects</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1441"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;MavenProject&gt; getSortedProjects() {
    return sortedProjects;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1209"><data key="reference"></data><data key="text">Map</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1208"><data key="reference"></data><data key="modifier"></data><data key="text">Map projectMap</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1207"><data key="reference">org.codehaus.plexus.util.dag.Vertex</data><data key="identifier">v</data><data key="text">v</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1449"><data key="reference">java.util.List</data><data key="identifier">sortedProjects</data><data key="text">sortedProjects</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><edge id="2433" source="1220" target="1221" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2953" source="1462" target="1465" label="AST"><data key="type">AST</data></edge><edge id="2950" source="1462" target="1463" label="AST"><data key="type">AST</data></edge><edge id="2954" source="1462" target="1466" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2948" source="1461" target="1462" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2955" source="1460" target="1466" label="AST"><data key="type">AST</data></edge><edge id="2949" source="1460" target="1462" label="AST"><data key="type">AST</data></edge><edge id="2947" source="1460" target="1461" label="AST"><data key="type">AST</data></edge><edge id="2958" source="1460" target="1468" label="AST"><data key="type">AST</data></edge><edge id="2970" source="1460" target="1474" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2428" source="1217" target="1218" label="AST"><data key="type">AST</data></edge><edge id="2429" source="1217" target="1219" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2427" source="1216" target="1217" label="AST"><data key="type">AST</data></edge><edge id="2430" source="1216" target="1219" label="AST"><data key="type">AST</data></edge><edge id="2431" source="1216" target="1220" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2940" source="1457" target="1458" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2941" source="1456" target="1458" label="AST"><data key="type">AST</data></edge><edge id="2939" source="1456" target="1457" label="AST"><data key="type">AST</data></edge><edge id="2942" source="1456" target="1459" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2422" source="1213" target="1214" label="AST"><data key="type">AST</data></edge><edge id="2423" source="1213" target="1215" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2943" source="1455" target="1459" label="AST"><data key="type">AST</data></edge><edge id="2938" source="1455" target="1456" label="AST"><data key="type">AST</data></edge><edge id="2424" source="1212" target="1215" label="AST"><data key="type">AST</data></edge><edge id="2421" source="1212" target="1213" label="AST"><data key="type">AST</data></edge><edge id="2425" source="1212" target="1216" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2937" source="1454" target="1455" label="AST"><data key="type">AST</data></edge><edge id="2944" source="1454" target="1450" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2936" source="1453" target="1454" label="AST"><data key="type">AST</data></edge><edge id="2934" source="1452" target="1453" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2462" source="1231" target="1207" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2461" source="1231" target="1226" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2463" source="1231" target="1226" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2967" source="1473" target="1465" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2966" source="1473" target="1465" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2968" source="1473" target="1465" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2459" source="1230" target="1231" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2964" source="1472" target="1473" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2962" source="1471" target="1472" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2965" source="1470" target="1473" label="AST"><data key="type">AST</data></edge><edge id="2963" source="1470" target="1472" label="AST"><data key="type">AST</data></edge><edge id="2961" source="1470" target="1471" label="AST"><data key="type">AST</data></edge><edge id="2458" source="1228" target="1230" label="AST"><data key="type">AST</data></edge><edge id="2453" source="1228" target="1229" label="AST"><data key="type">AST</data></edge><edge id="2460" source="1228" target="1231" label="AST"><data key="type">AST</data></edge><edge id="2464" source="1228" target="1232" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="11" source="1" target="11" label="AST"><data key="type">AST</data></edge><edge id="77" source="1" target="65" label="AST"><data key="type">AST</data></edge><edge id="99" source="1" target="84" label="AST"><data key="type">AST</data></edge><edge id="56" source="1" target="47" label="AST"><data key="type">AST</data></edge><edge id="46" source="1" target="39" label="AST"><data key="type">AST</data></edge><edge id="36" source="1" target="31" label="AST"><data key="type">AST</data></edge><edge id="26" source="1" target="23" label="AST"><data key="type">AST</data></edge><edge id="16" source="1" target="15" label="AST"><data key="type">AST</data></edge><edge id="0" source="1" target="2" label="AST"><data key="type">AST</data></edge><edge id="123" source="1" target="105" label="AST"><data key="type">AST</data></edge><edge id="115" source="1" target="98" label="AST"><data key="type">AST</data></edge><edge id="6" source="1" target="7" label="AST"><data key="type">AST</data></edge><edge id="91" source="1" target="77" label="AST"><data key="type">AST</data></edge><edge id="107" source="1" target="91" label="AST"><data key="type">AST</data></edge><edge id="70" source="1" target="59" label="AST"><data key="type">AST</data></edge><edge id="51" source="1" target="43" label="AST"><data key="type">AST</data></edge><edge id="84" source="1" target="71" label="AST"><data key="type">AST</data></edge><edge id="41" source="1" target="35" label="AST"><data key="type">AST</data></edge><edge id="63" source="1" target="53" label="AST"><data key="type">AST</data></edge><edge id="31" source="1" target="27" label="AST"><data key="type">AST</data></edge><edge id="21" source="1" target="19" label="AST"><data key="type">AST</data></edge><edge id="2450" source="1227" target="1202" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2960" source="1469" target="1470" label="AST"><data key="type">AST</data></edge><edge id="2969" source="1469" target="1460" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1" source="2" target="3" label="AST"><data key="type">AST</data></edge><edge id="5" source="2" target="7" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2446" source="1226" target="1207" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2445" source="1226" target="1207" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2447" source="1226" target="1207" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2959" source="1468" target="1469" label="AST"><data key="type">AST</data></edge><edge id="2" source="3" target="4" label="AST"><data key="type">AST</data></edge><edge id="2443" source="1225" target="1226" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3" source="4" target="5" label="AST"><data key="type">AST</data></edge><edge id="2439" source="1224" target="1219" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2438" source="1224" target="1219" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2440" source="1224" target="1219" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2441" source="1224" target="1225" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2956" source="1466" target="1467" label="AST"><data key="type">AST</data></edge><edge id="2957" source="1466" target="1468" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="4" source="5" target="6" label="AST"><data key="type">AST</data></edge><edge id="2437" source="1223" target="1224" label="AST"><data key="type">AST</data></edge><edge id="2444" source="1223" target="1226" label="AST"><data key="type">AST</data></edge><edge id="2442" source="1223" target="1225" label="AST"><data key="type">AST</data></edge><edge id="2448" source="1223" target="1227" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2449" source="1222" target="1227" label="AST"><data key="type">AST</data></edge><edge id="2436" source="1222" target="1223" label="AST"><data key="type">AST</data></edge><edge id="2451" source="1222" target="1228" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="7" source="7" target="8" label="AST"><data key="type">AST</data></edge><edge id="10" source="7" target="11" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2435" source="1221" target="1222" label="AST"><data key="type">AST</data></edge><edge id="2489" source="1221" target="1241" label="AST"><data key="type">AST</data></edge><edge id="2465" source="1221" target="1232" label="AST"><data key="type">AST</data></edge><edge id="2452" source="1221" target="1228" label="AST"><data key="type">AST</data></edge><edge id="2951" source="1463" target="1464" label="AST"><data key="type">AST</data></edge><edge id="2952" source="1463" target="1465" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="8" source="8" target="9" label="AST"><data key="type">AST</data></edge><edge id="9" source="9" target="10" label="AST"><data key="type">AST</data></edge><edge id="1540" source="801" target="803" label="AST"><data key="type">AST</data></edge><edge id="1538" source="801" target="802" label="AST"><data key="type">AST</data></edge><edge id="1541" source="801" target="804" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1539" source="802" target="803" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1545" source="804" target="806" label="AST"><data key="type">AST</data></edge><edge id="1543" source="804" target="805" label="AST"><data key="type">AST</data></edge><edge id="1546" source="804" target="807" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1544" source="805" target="806" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1548" source="807" target="808" label="AST"><data key="type">AST</data></edge><edge id="1549" source="807" target="809" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2455" source="1229" target="1219" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2454" source="1229" target="1224" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2456" source="1229" target="1224" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2457" source="1229" target="1230" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1551" source="809" target="810" label="AST"><data key="type">AST</data></edge><edge id="1552" source="809" target="811" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2491" source="1242" target="1243" label="AST"><data key="type">AST</data></edge><edge id="2507" source="1242" target="1252" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2508" source="1241" target="1252" label="AST"><data key="type">AST</data></edge><edge id="2490" source="1241" target="1242" label="AST"><data key="type">AST</data></edge><edge id="2517" source="1241" target="1255" label="AST"><data key="type">AST</data></edge><edge id="2986" source="1483" target="1484" label="AST"><data key="type">AST</data></edge><edge id="2987" source="1483" target="1485" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2984" source="1482" target="1483" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2988" source="1481" target="1485" label="AST"><data key="type">AST</data></edge><edge id="2985" source="1481" target="1483" label="AST"><data key="type">AST</data></edge><edge id="2983" source="1481" target="1482" label="AST"><data key="type">AST</data></edge><edge id="2484" source="1239" target="1207" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2483" source="1239" target="1231" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2485" source="1239" target="1231" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2486" source="1239" target="1240" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2487" source="1238" target="1240" label="AST"><data key="type">AST</data></edge><edge id="2482" source="1238" target="1239" label="AST"><data key="type">AST</data></edge><edge id="2480" source="1237" target="1238" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2979" source="1479" target="1480" label="AST"><data key="type">AST</data></edge><edge id="2980" source="1479" target="1474" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2476" source="1236" target="1211" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2475" source="1236" target="1211" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2477" source="1236" target="1211" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2478" source="1236" target="1237" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2978" source="1478" target="1479" label="AST"><data key="type">AST</data></edge><edge id="2479" source="1235" target="1237" label="AST"><data key="type">AST</data></edge><edge id="2474" source="1235" target="1236" label="AST"><data key="type">AST</data></edge><edge id="2481" source="1235" target="1238" label="AST"><data key="type">AST</data></edge><edge id="2472" source="1234" target="1235" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2975" source="1476" target="1477" label="AST"><data key="type">AST</data></edge><edge id="2976" source="1476" target="1478" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2468" source="1233" target="1215" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2467" source="1233" target="1215" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2469" source="1233" target="1215" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2470" source="1233" target="1234" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2973" source="1475" target="1476" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2466" source="1232" target="1233" label="AST"><data key="type">AST</data></edge><edge id="2473" source="1232" target="1235" label="AST"><data key="type">AST</data></edge><edge id="2471" source="1232" target="1234" label="AST"><data key="type">AST</data></edge><edge id="2488" source="1232" target="1241" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2977" source="1474" target="1478" label="AST"><data key="type">AST</data></edge><edge id="2974" source="1474" target="1476" label="AST"><data key="type">AST</data></edge><edge id="2972" source="1474" target="1475" label="AST"><data key="type">AST</data></edge><edge id="2981" source="1474" target="1481" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1865" source="811" target="939" label="AST"><data key="type">AST</data></edge><edge id="1940" source="811" target="973" label="AST"><data key="type">AST</data></edge><edge id="1554" source="811" target="812" label="AST"><data key="type">AST</data></edge><edge id="1675" source="811" target="860" label="AST"><data key="type">AST</data></edge><edge id="1697" source="811" target="872" label="AST"><data key="type">AST</data></edge><edge id="1570" source="811" target="818" label="AST"><data key="type">AST</data></edge><edge id="1591" source="811" target="831" label="AST"><data key="type">AST</data></edge><edge id="1555" source="812" target="813" label="AST"><data key="type">AST</data></edge><edge id="1563" source="812" target="816" label="AST"><data key="type">AST</data></edge><edge id="1569" source="812" target="818" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1556" source="813" target="814" label="AST"><data key="type">AST</data></edge><edge id="1561" source="813" target="815" label="AST"><data key="type">AST</data></edge><edge id="1562" source="813" target="816" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1558" source="814" target="800" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1557" source="814" target="800" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1559" source="814" target="800" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1560" source="814" target="815" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1564" source="816" target="817" label="AST"><data key="type">AST</data></edge><edge id="1568" source="816" target="779" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1566" source="817" target="784" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1565" source="817" target="784" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1567" source="817" target="784" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1571" source="818" target="819" label="AST"><data key="type">AST</data></edge><edge id="1590" source="818" target="831" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1578" source="819" target="824" label="AST"><data key="type">AST</data></edge><edge id="1576" source="819" target="823" label="AST"><data key="type">AST</data></edge><edge id="1572" source="819" target="820" label="AST"><data key="type">AST</data></edge><edge id="2014" source="1011" target="992" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2013" source="1011" target="992" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2015" source="1011" target="992" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2511" source="1253" target="1246" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2510" source="1253" target="1246" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2513" source="1253" target="1265" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2512" source="1253" target="1246" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2514" source="1253" target="1254" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2009" source="1010" target="988" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2008" source="1010" target="988" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2010" source="1010" target="988" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2011" source="1010" target="1011" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2515" source="1252" target="1254" label="AST"><data key="type">AST</data></edge><edge id="2509" source="1252" target="1253" label="AST"><data key="type">AST</data></edge><edge id="2516" source="1252" target="1255" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2001" source="1008" target="1009" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2007" source="1007" target="1010" label="AST"><data key="type">AST</data></edge><edge id="2002" source="1007" target="1009" label="AST"><data key="type">AST</data></edge><edge id="2012" source="1007" target="1011" label="AST"><data key="type">AST</data></edge><edge id="2000" source="1007" target="1008" label="AST"><data key="type">AST</data></edge><edge id="2501" source="1249" target="1207" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2500" source="1249" target="1239" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2502" source="1249" target="1239" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2503" source="1249" target="1250" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1998" source="1006" target="1007" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2504" source="1248" target="1250" label="AST"><data key="type">AST</data></edge><edge id="2499" source="1248" target="1249" label="AST"><data key="type">AST</data></edge><edge id="2505" source="1248" target="1251" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2498" source="1247" target="1248" label="AST"><data key="type">AST</data></edge><edge id="2506" source="1247" target="1251" label="AST"><data key="type">AST</data></edge><edge id="1995" source="1004" target="1005" label="AST"><data key="type">AST</data></edge><edge id="1996" source="1004" target="1006" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2496" source="1246" target="1247" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1997" source="1003" target="1006" label="AST"><data key="type">AST</data></edge><edge id="1994" source="1003" target="1004" label="AST"><data key="type">AST</data></edge><edge id="1999" source="1003" target="1007" label="AST"><data key="type">AST</data></edge><edge id="1573" source="820" target="821" label="AST"><data key="type">AST</data></edge><edge id="1575" source="820" target="823" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1993" source="1002" target="1003" label="AST"><data key="type">AST</data></edge><edge id="2016" source="1002" target="1012" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2493" source="1244" target="1245" label="AST"><data key="type">AST</data></edge><edge id="2494" source="1244" target="1246" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2990" source="1486" target="1487" label="AST"><data key="type">AST</data></edge><edge id="2991" source="1486" target="1481" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1574" source="821" target="822" label="AST"><data key="type">AST</data></edge><edge id="1990" source="1001" target="975" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2497" source="1243" target="1247" label="AST"><data key="type">AST</data></edge><edge id="2495" source="1243" target="1246" label="AST"><data key="type">AST</data></edge><edge id="2492" source="1243" target="1244" label="AST"><data key="type">AST</data></edge><edge id="2989" source="1485" target="1486" label="AST"><data key="type">AST</data></edge><edge id="1577" source="823" target="824" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1579" source="824" target="825" label="AST"><data key="type">AST</data></edge><edge id="1582" source="824" target="827" label="AST"><data key="type">AST</data></edge><edge id="1580" source="825" target="826" label="AST"><data key="type">AST</data></edge><edge id="1581" source="825" target="827" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1583" source="827" target="828" label="AST"><data key="type">AST</data></edge><edge id="1589" source="828" target="830" label="AST"><data key="type">AST</data></edge><edge id="1584" source="828" target="829" label="AST"><data key="type">AST</data></edge><edge id="1586" source="829" target="800" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1585" source="829" target="814" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1587" source="829" target="814" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1588" source="829" target="830" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2004" source="1009" target="980" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2003" source="1009" target="999" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2005" source="1009" target="999" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2006" source="1009" target="1010" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2036" source="1022" target="1017" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2035" source="1022" target="1017" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2038" source="1022" target="1043" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2037" source="1022" target="1017" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2039" source="1022" target="1023" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2535" source="1264" target="1266" label="AST"><data key="type">AST</data></edge><edge id="2530" source="1264" target="1265" label="AST"><data key="type">AST</data></edge><edge id="2034" source="1021" target="1022" label="AST"><data key="type">AST</data></edge><edge id="2040" source="1021" target="1023" label="AST"><data key="type">AST</data></edge><edge id="2041" source="1021" target="1024" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2527" source="1262" target="1263" label="AST"><data key="type">AST</data></edge><edge id="2528" source="1262" target="1264" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2526" source="1261" target="1262" label="AST"><data key="type">AST</data></edge><edge id="2529" source="1261" target="1264" label="AST"><data key="type">AST</data></edge><edge id="2524" source="1260" target="1261" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2028" source="1019" target="984" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2027" source="1019" target="984" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2029" source="1019" target="984" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2030" source="1019" target="1020" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2026" source="1018" target="1019" label="AST"><data key="type">AST</data></edge><edge id="2031" source="1018" target="1020" label="AST"><data key="type">AST</data></edge><edge id="2024" source="1017" target="1018" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2521" source="1258" target="1259" label="AST"><data key="type">AST</data></edge><edge id="2522" source="1258" target="1260" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2021" source="1015" target="1016" label="AST"><data key="type">AST</data></edge><edge id="2022" source="1015" target="1017" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2525" source="1257" target="1261" label="AST"><data key="type">AST</data></edge><edge id="2523" source="1257" target="1260" label="AST"><data key="type">AST</data></edge><edge id="2520" source="1257" target="1258" label="AST"><data key="type">AST</data></edge><edge id="2025" source="1014" target="1018" label="AST"><data key="type">AST</data></edge><edge id="2023" source="1014" target="1017" label="AST"><data key="type">AST</data></edge><edge id="2020" source="1014" target="1015" label="AST"><data key="type">AST</data></edge><edge id="2519" source="1256" target="1257" label="AST"><data key="type">AST</data></edge><edge id="2536" source="1256" target="1267" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1623" source="831" target="844" label="AST"><data key="type">AST</data></edge><edge id="1600" source="831" target="837" label="AST"><data key="type">AST</data></edge><edge id="1592" source="831" target="832" label="AST"><data key="type">AST</data></edge><edge id="1617" source="831" target="842" label="AST"><data key="type">AST</data></edge><edge id="1674" source="831" target="860" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2019" source="1013" target="1014" label="AST"><data key="type">AST</data></edge><edge id="2032" source="1013" target="1021" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2537" source="1255" target="1267" label="AST"><data key="type">AST</data></edge><edge id="2518" source="1255" target="1256" label="AST"><data key="type">AST</data></edge><edge id="1593" source="832" target="833" label="AST"><data key="type">AST</data></edge><edge id="1599" source="832" target="837" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2018" source="1012" target="1013" label="AST"><data key="type">AST</data></edge><edge id="2033" source="1012" target="1021" label="AST"><data key="type">AST</data></edge><edge id="2042" source="1012" target="1024" label="AST"><data key="type">AST</data></edge><edge id="2086" source="1012" target="1045" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1598" source="833" target="836" label="AST"><data key="type">AST</data></edge><edge id="1596" source="833" target="835" label="AST"><data key="type">AST</data></edge><edge id="1594" source="833" target="834" label="AST"><data key="type">AST</data></edge><edge id="1595" source="834" target="835" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1597" source="835" target="836" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1601" source="837" target="838" label="AST"><data key="type">AST</data></edge><edge id="1608" source="837" target="839" label="AST"><data key="type">AST</data></edge><edge id="1616" source="837" target="842" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1604" source="838" target="843" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1603" source="838" target="835" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1602" source="838" target="835" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1606" source="838" target="843" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1605" source="838" target="835" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1607" source="838" target="839" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1609" source="839" target="840" label="AST"><data key="type">AST</data></edge><edge id="1615" source="839" target="841" label="AST"><data key="type">AST</data></edge><edge id="2055" source="1033" target="1034" label="AST"><data key="type">AST</data></edge><edge id="2060" source="1033" target="1035" label="AST"><data key="type">AST</data></edge><edge id="2567" source="1275" target="1276" label="AST"><data key="type">AST</data></edge><edge id="2570" source="1275" target="1278" label="AST"><data key="type">AST</data></edge><edge id="2571" source="1275" target="1279" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2565" source="1274" target="1275" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2052" source="1031" target="1032" label="AST"><data key="type">AST</data></edge><edge id="2053" source="1031" target="1033" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2578" source="1273" target="1283" label="AST"><data key="type">AST</data></edge><edge id="2566" source="1273" target="1275" label="AST"><data key="type">AST</data></edge><edge id="2564" source="1273" target="1274" label="AST"><data key="type">AST</data></edge><edge id="2584" source="1273" target="1287" label="AST"><data key="type">AST</data></edge><edge id="2572" source="1273" target="1279" label="AST"><data key="type">AST</data></edge><edge id="2592" source="1273" target="1292" label="AST"><data key="type">AST</data></edge><edge id="2590" source="1273" target="1291" label="AST"><data key="type">AST</data></edge><edge id="2720" source="1273" target="1344" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2054" source="1030" target="1033" label="AST"><data key="type">AST</data></edge><edge id="2051" source="1030" target="1031" label="AST"><data key="type">AST</data></edge><edge id="2559" source="1272" target="1219" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2558" source="1272" target="1229" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2561" source="1272" target="1272" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2560" source="1272" target="1229" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2553" source="1271" target="1215" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2552" source="1271" target="1233" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2555" source="1271" target="1271" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2554" source="1271" target="1233" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2556" source="1271" target="1272" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2547" source="1270" target="1211" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2546" source="1270" target="1236" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2548" source="1270" target="1236" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2549" source="1270" target="1270" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2550" source="1270" target="1271" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2049" source="1029" target="1030" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2046" source="1027" target="1028" label="AST"><data key="type">AST</data></edge><edge id="2047" source="1027" target="1029" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2542" source="1269" target="1260" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2541" source="1269" target="1260" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2543" source="1269" target="1260" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2544" source="1269" target="1270" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1611" source="840" target="847" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1610" source="840" target="823" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1613" source="840" target="847" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1612" source="840" target="823" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1614" source="840" target="841" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2048" source="1026" target="1029" label="AST"><data key="type">AST</data></edge><edge id="2045" source="1026" target="1027" label="AST"><data key="type">AST</data></edge><edge id="2050" source="1026" target="1030" label="AST"><data key="type">AST</data></edge><edge id="2539" source="1268" target="1269" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2044" source="1025" target="1026" label="AST"><data key="type">AST</data></edge><edge id="2061" source="1025" target="1036" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2557" source="1267" target="1272" label="AST"><data key="type">AST</data></edge><edge id="2545" source="1267" target="1270" label="AST"><data key="type">AST</data></edge><edge id="2540" source="1267" target="1269" label="AST"><data key="type">AST</data></edge><edge id="2551" source="1267" target="1271" label="AST"><data key="type">AST</data></edge><edge id="2538" source="1267" target="1268" label="AST"><data key="type">AST</data></edge><edge id="1101" source="600" target="581" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1100" source="600" target="597" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1102" source="600" target="597" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1103" source="600" target="601" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1618" source="842" target="843" label="AST"><data key="type">AST</data></edge><edge id="1622" source="842" target="844" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2079" source="1024" target="1042" label="AST"><data key="type">AST</data></edge><edge id="2043" source="1024" target="1025" label="AST"><data key="type">AST</data></edge><edge id="2062" source="1024" target="1036" label="AST"><data key="type">AST</data></edge><edge id="1620" source="843" target="848" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1619" source="843" target="838" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1621" source="843" target="848" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2532" source="1265" target="1246" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2531" source="1265" target="1253" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2533" source="1265" target="1253" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2534" source="1265" target="1266" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1107" source="602" target="603" label="AST"><data key="type">AST</data></edge><edge id="1144" source="602" target="615" label="AST"><data key="type">AST</data></edge><edge id="1624" source="844" target="845" label="AST"><data key="type">AST</data></edge><edge id="1121" source="603" target="610" label="AST"><data key="type">AST</data></edge><edge id="1108" source="603" target="604" label="AST"><data key="type">AST</data></edge><edge id="1143" source="603" target="615" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1642" source="845" target="849" label="AST"><data key="type">AST</data></edge><edge id="1625" source="845" target="846" label="AST"><data key="type">AST</data></edge><edge id="1109" source="604" target="605" label="AST"><data key="type">AST</data></edge><edge id="1119" source="604" target="609" label="AST"><data key="type">AST</data></edge><edge id="1120" source="604" target="610" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1626" source="846" target="847" label="AST"><data key="type">AST</data></edge><edge id="1636" source="846" target="848" label="AST"><data key="type">AST</data></edge><edge id="1641" source="846" target="849" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1114" source="605" target="608" label="AST"><data key="type">AST</data></edge><edge id="1112" source="605" target="607" label="AST"><data key="type">AST</data></edge><edge id="1110" source="605" target="606" label="AST"><data key="type">AST</data></edge><edge id="1118" source="605" target="609" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1633" source="847" target="847" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1632" source="847" target="823" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1627" source="847" target="823" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1631" source="847" target="859" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1630" source="847" target="858" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1629" source="847" target="857" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1628" source="847" target="855" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1634" source="847" target="840" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1635" source="847" target="848" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1111" source="606" target="607" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1639" source="848" target="843" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1638" source="848" target="835" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1637" source="848" target="843" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1640" source="848" target="857" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1113" source="607" target="608" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1645" source="849" target="851" label="AST"><data key="type">AST</data></edge><edge id="1643" source="849" target="850" label="AST"><data key="type">AST</data></edge><edge id="1663" source="849" target="858" label="AST"><data key="type">AST</data></edge><edge id="1669" source="849" target="859" label="AST"><data key="type">AST</data></edge><edge id="1116" source="608" target="592" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1115" source="608" target="592" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1117" source="608" target="592" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2082" source="1043" target="1017" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2081" source="1043" target="1034" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2083" source="1043" target="1034" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2084" source="1043" target="1044" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2080" source="1042" target="1043" label="AST"><data key="type">AST</data></edge><edge id="2085" source="1042" target="1044" label="AST"><data key="type">AST</data></edge><edge id="2580" source="1284" target="1285" label="AST"><data key="type">AST</data></edge><edge id="2581" source="1284" target="1286" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2579" source="1283" target="1284" label="AST"><data key="type">AST</data></edge><edge id="2582" source="1283" target="1286" label="AST"><data key="type">AST</data></edge><edge id="2583" source="1283" target="1287" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2074" source="1040" target="1029" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2073" source="1040" target="1029" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2075" source="1040" target="1029" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2574" source="1280" target="1281" label="AST"><data key="type">AST</data></edge><edge id="2575" source="1280" target="1282" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2071" source="1039" target="1040" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1644" source="850" target="851" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2066" source="1038" target="1006" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2065" source="1038" target="1006" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2068" source="1038" target="1038" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2067" source="1038" target="1006" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2069" source="1038" target="1039" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1646" source="851" target="852" label="AST"><data key="type">AST</data></edge><edge id="1649" source="851" target="854" label="AST"><data key="type">AST</data></edge><edge id="1662" source="851" target="858" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2070" source="1037" target="1039" label="AST"><data key="type">AST</data></edge><edge id="2064" source="1037" target="1038" label="AST"><data key="type">AST</data></edge><edge id="2072" source="1037" target="1040" label="AST"><data key="type">AST</data></edge><edge id="2076" source="1037" target="1041" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2576" source="1279" target="1282" label="AST"><data key="type">AST</data></edge><edge id="2573" source="1279" target="1280" label="AST"><data key="type">AST</data></edge><edge id="2577" source="1279" target="1283" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1122" source="610" target="611" label="AST"><data key="type">AST</data></edge><edge id="1647" source="852" target="853" label="AST"><data key="type">AST</data></edge><edge id="1648" source="852" target="854" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2077" source="1036" target="1041" label="AST"><data key="type">AST</data></edge><edge id="2063" source="1036" target="1037" label="AST"><data key="type">AST</data></edge><edge id="2078" source="1036" target="1042" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1128" source="611" target="613" label="AST"><data key="type">AST</data></edge><edge id="1123" source="611" target="612" label="AST"><data key="type">AST</data></edge><edge id="1130" source="611" target="614" label="AST"><data key="type">AST</data></edge><edge id="1125" source="612" target="592" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1124" source="612" target="608" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1126" source="612" target="608" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1127" source="612" target="613" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1656" source="854" target="856" label="AST"><data key="type">AST</data></edge><edge id="1650" source="854" target="855" label="AST"><data key="type">AST</data></edge><edge id="1658" source="854" target="857" label="AST"><data key="type">AST</data></edge><edge id="2057" source="1034" target="1017" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2056" source="1034" target="1022" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2058" source="1034" target="1022" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2059" source="1034" target="1035" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2568" source="1276" target="1277" label="AST"><data key="type">AST</data></edge><edge id="2569" source="1276" target="1278" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1129" source="613" target="614" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1652" source="855" target="800" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1651" source="855" target="829" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1654" source="855" target="855" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1653" source="855" target="829" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1655" source="855" target="856" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1135" source="614" target="614" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1134" source="614" target="531" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1133" source="614" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1132" source="614" target="277" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1131" source="614" target="550" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1139" source="614" target="478" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1138" source="614" target="400" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1137" source="614" target="348" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1136" source="614" target="277" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1142" source="614" target="621" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1141" source="614" target="550" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1140" source="614" target="531" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1657" source="856" target="857" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1145" source="615" target="616" label="AST"><data key="type">AST</data></edge><edge id="1660" source="857" target="835" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1659" source="857" target="848" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1661" source="857" target="838" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1148" source="616" target="618" label="AST"><data key="type">AST</data></edge><edge id="1146" source="616" target="617" label="AST"><data key="type">AST</data></edge><edge id="1155" source="616" target="620" label="AST"><data key="type">AST</data></edge><edge id="1150" source="616" target="619" label="AST"><data key="type">AST</data></edge><edge id="1160" source="616" target="621" label="AST"><data key="type">AST</data></edge><edge id="1665" source="858" target="792" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1664" source="858" target="792" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1667" source="858" target="858" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1666" source="858" target="792" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1668" source="858" target="859" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1147" source="617" target="618" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1671" source="859" target="796" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1670" source="859" target="796" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1673" source="859" target="859" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1672" source="859" target="796" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1149" source="618" target="619" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1152" source="619" target="612" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1151" source="619" target="612" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1153" source="619" target="612" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1154" source="619" target="620" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2104" source="1055" target="1056" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2604" source="1297" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2603" source="1297" target="1278" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2605" source="1297" target="1278" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2105" source="1054" target="1056" label="AST"><data key="type">AST</data></edge><edge id="2103" source="1054" target="1055" label="AST"><data key="type">AST</data></edge><edge id="2601" source="1296" target="1297" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2597" source="1295" target="1290" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2596" source="1295" target="1290" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2598" source="1295" target="1290" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2599" source="1295" target="1296" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2100" source="1052" target="1053" label="AST"><data key="type">AST</data></edge><edge id="2101" source="1052" target="1054" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2602" source="1294" target="1297" label="AST"><data key="type">AST</data></edge><edge id="2600" source="1294" target="1296" label="AST"><data key="type">AST</data></edge><edge id="2595" source="1294" target="1295" label="AST"><data key="type">AST</data></edge><edge id="2606" source="1294" target="1298" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2102" source="1051" target="1054" label="AST"><data key="type">AST</data></edge><edge id="2099" source="1051" target="1052" label="AST"><data key="type">AST</data></edge><edge id="2594" source="1293" target="1294" label="AST"><data key="type">AST</data></edge><edge id="2607" source="1293" target="1298" label="AST"><data key="type">AST</data></edge><edge id="2609" source="1293" target="1299" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2098" source="1050" target="1051" label="AST"><data key="type">AST</data></edge><edge id="2647" source="1292" target="1312" label="AST"><data key="type">AST</data></edge><edge id="2623" source="1292" target="1303" label="AST"><data key="type">AST</data></edge><edge id="2610" source="1292" target="1299" label="AST"><data key="type">AST</data></edge><edge id="2593" source="1292" target="1293" label="AST"><data key="type">AST</data></edge><edge id="2591" source="1291" target="1292" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1676" source="860" target="861" label="AST"><data key="type">AST</data></edge><edge id="1696" source="860" target="872" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1677" source="861" target="862" label="AST"><data key="type">AST</data></edge><edge id="1682" source="861" target="865" label="AST"><data key="type">AST</data></edge><edge id="1680" source="861" target="864" label="AST"><data key="type">AST</data></edge><edge id="2097" source="1049" target="1050" label="AST"><data key="type">AST</data></edge><edge id="1157" source="620" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1156" source="620" target="557" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1158" source="620" target="557" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1159" source="620" target="621" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1678" source="862" target="863" label="AST"><data key="type">AST</data></edge><edge id="1679" source="862" target="864" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1162" source="621" target="614" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1161" source="621" target="614" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1163" source="621" target="614" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2091" source="1047" target="984" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2090" source="1047" target="1019" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2092" source="1047" target="1019" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2093" source="1047" target="1048" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1166" source="622" target="623" label="AST"><data key="type">AST</data></edge><edge id="1185" source="622" target="633" label="AST"><data key="type">AST</data></edge><edge id="1194" source="622" target="636" label="AST"><data key="type">AST</data></edge><edge id="1681" source="864" target="865" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2089" source="1046" target="1047" label="AST"><data key="type">AST</data></edge><edge id="2094" source="1046" target="1048" label="AST"><data key="type">AST</data></edge><edge id="2095" source="1046" target="1049" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2586" source="1288" target="1289" label="AST"><data key="type">AST</data></edge><edge id="2587" source="1288" target="1290" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1167" source="623" target="624" label="AST"><data key="type">AST</data></edge><edge id="1184" source="623" target="633" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1686" source="865" target="868" label="AST"><data key="type">AST</data></edge><edge id="1683" source="865" target="866" label="AST"><data key="type">AST</data></edge><edge id="2088" source="1045" target="1046" label="AST"><data key="type">AST</data></edge><edge id="2096" source="1045" target="1049" label="AST"><data key="type">AST</data></edge><edge id="2588" source="1287" target="1290" label="AST"><data key="type">AST</data></edge><edge id="2585" source="1287" target="1288" label="AST"><data key="type">AST</data></edge><edge id="2589" source="1287" target="1291" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1168" source="624" target="625" label="AST"><data key="type">AST</data></edge><edge id="1173" source="624" target="628" label="AST"><data key="type">AST</data></edge><edge id="1171" source="624" target="627" label="AST"><data key="type">AST</data></edge><edge id="1684" source="866" target="867" label="AST"><data key="type">AST</data></edge><edge id="1685" source="866" target="868" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1169" source="625" target="626" label="AST"><data key="type">AST</data></edge><edge id="1170" source="625" target="627" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1689" source="868" target="870" label="AST"><data key="type">AST</data></edge><edge id="1687" source="868" target="869" label="AST"><data key="type">AST</data></edge><edge id="1691" source="868" target="871" label="AST"><data key="type">AST</data></edge><edge id="1172" source="627" target="628" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1688" source="869" target="870" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1174" source="628" target="629" label="AST"><data key="type">AST</data></edge><edge id="1183" source="628" target="632" label="AST"><data key="type">AST</data></edge><edge id="1175" source="629" target="630" label="AST"><data key="type">AST</data></edge><edge id="1181" source="629" target="631" label="AST"><data key="type">AST</data></edge><edge id="1182" source="629" target="632" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2121" source="1064" target="1065" label="AST"><data key="type">AST</data></edge><edge id="2122" source="1064" target="1066" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2123" source="1063" target="1066" label="AST"><data key="type">AST</data></edge><edge id="2120" source="1063" target="1064" label="AST"><data key="type">AST</data></edge><edge id="2124" source="1063" target="1067" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2115" source="1060" target="1061" label="AST"><data key="type">AST</data></edge><edge id="2116" source="1060" target="1062" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1690" source="870" target="871" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1694" source="871" target="847" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1693" source="871" target="823" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1692" source="871" target="847" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1695" source="871" target="840" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1177" source="630" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1176" source="630" target="620" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1179" source="630" target="620" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1178" source="630" target="557" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1180" source="630" target="631" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1698" source="872" target="873" label="AST"><data key="type">AST</data></edge><edge id="1731" source="872" target="885" label="AST"><data key="type">AST</data></edge><edge id="1706" source="872" target="878" label="AST"><data key="type">AST</data></edge><edge id="1724" source="872" target="883" label="AST"><data key="type">AST</data></edge><edge id="1864" source="872" target="939" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1699" source="873" target="874" label="AST"><data key="type">AST</data></edge><edge id="1705" source="873" target="878" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2117" source="1059" target="1062" label="AST"><data key="type">AST</data></edge><edge id="2114" source="1059" target="1060" label="AST"><data key="type">AST</data></edge><edge id="2118" source="1059" target="1063" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1700" source="874" target="875" label="AST"><data key="type">AST</data></edge><edge id="1704" source="874" target="877" label="AST"><data key="type">AST</data></edge><edge id="1702" source="874" target="876" label="AST"><data key="type">AST</data></edge><edge id="2112" source="1058" target="1059" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1186" source="633" target="634" label="AST"><data key="type">AST</data></edge><edge id="1192" source="633" target="635" label="AST"><data key="type">AST</data></edge><edge id="1193" source="633" target="636" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1701" source="875" target="876" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2119" source="1057" target="1063" label="AST"><data key="type">AST</data></edge><edge id="2137" source="1057" target="1075" label="AST"><data key="type">AST</data></edge><edge id="2125" source="1057" target="1067" label="AST"><data key="type">AST</data></edge><edge id="2113" source="1057" target="1059" label="AST"><data key="type">AST</data></edge><edge id="2134" source="1057" target="1073" label="AST"><data key="type">AST</data></edge><edge id="2111" source="1057" target="1058" label="AST"><data key="type">AST</data></edge><edge id="2131" source="1057" target="1071" label="AST"><data key="type">AST</data></edge><edge id="2404" source="1057" target="1202" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2611" source="1299" target="1300" label="AST"><data key="type">AST</data></edge><edge id="2618" source="1299" target="1302" label="AST"><data key="type">AST</data></edge><edge id="2616" source="1299" target="1301" label="AST"><data key="type">AST</data></edge><edge id="2622" source="1299" target="1303" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1188" source="634" target="627" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1187" source="634" target="627" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1190" source="634" target="646" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1189" source="634" target="627" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1191" source="634" target="635" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1703" source="876" target="877" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2107" source="1056" target="980" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2106" source="1056" target="1009" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2108" source="1056" target="1009" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2608" source="1298" target="1273" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1214" source="636" target="648" label="AST"><data key="type">AST</data></edge><edge id="1242" source="636" target="662" label="AST"><data key="type">AST</data></edge><edge id="1195" source="636" target="637" label="AST"><data key="type">AST</data></edge><edge id="1707" source="878" target="879" label="AST"><data key="type">AST</data></edge><edge id="1714" source="878" target="880" label="AST"><data key="type">AST</data></edge><edge id="1723" source="878" target="883" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1196" source="637" target="638" label="AST"><data key="type">AST</data></edge><edge id="1213" source="637" target="648" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1710" source="879" target="884" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1709" source="879" target="876" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1708" source="879" target="876" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1712" source="879" target="884" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1711" source="879" target="876" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1713" source="879" target="880" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1202" source="638" target="642" label="AST"><data key="type">AST</data></edge><edge id="1200" source="638" target="641" label="AST"><data key="type">AST</data></edge><edge id="1197" source="638" target="639" label="AST"><data key="type">AST</data></edge><edge id="1198" source="639" target="640" label="AST"><data key="type">AST</data></edge><edge id="1199" source="639" target="641" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2145" source="1077" target="1081" label="AST"><data key="type">AST</data></edge><edge id="2143" source="1077" target="1080" label="AST"><data key="type">AST</data></edge><edge id="2140" source="1077" target="1078" label="AST"><data key="type">AST</data></edge><edge id="2139" source="1076" target="1077" label="AST"><data key="type">AST</data></edge><edge id="2161" source="1076" target="1088" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2229" source="1075" target="1119" label="AST"><data key="type">AST</data></edge><edge id="2138" source="1075" target="1076" label="AST"><data key="type">AST</data></edge><edge id="2279" source="1075" target="1144" label="AST"><data key="type">AST</data></edge><edge id="2178" source="1075" target="1094" label="AST"><data key="type">AST</data></edge><edge id="2387" source="1075" target="1193" label="AST"><data key="type">AST</data></edge><edge id="2252" source="1075" target="1129" label="AST"><data key="type">AST</data></edge><edge id="2185" source="1075" target="1099" label="AST"><data key="type">AST</data></edge><edge id="2162" source="1075" target="1088" label="AST"><data key="type">AST</data></edge><edge id="2307" source="1075" target="1159" label="AST"><data key="type">AST</data></edge><edge id="2135" source="1073" target="1074" label="AST"><data key="type">AST</data></edge><edge id="2136" source="1073" target="1075" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2132" source="1071" target="1072" label="AST"><data key="type">AST</data></edge><edge id="2133" source="1071" target="1073" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1722" source="880" target="882" label="AST"><data key="type">AST</data></edge><edge id="1716" source="880" target="881" label="AST"><data key="type">AST</data></edge><edge id="1715" source="880" target="839" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="1718" source="881" target="847" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1717" source="881" target="823" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1720" source="881" target="892" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1719" source="881" target="871" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1721" source="881" target="882" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1201" source="641" target="642" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1725" source="883" target="884" label="AST"><data key="type">AST</data></edge><edge id="1730" source="883" target="885" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="676" source="400" target="277" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="675" source="400" target="396" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="677" source="400" target="390" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="678" source="400" target="396" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="679" source="400" target="401" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1206" source="642" target="645" label="AST"><data key="type">AST</data></edge><edge id="1203" source="642" target="643" label="AST"><data key="type">AST</data></edge><edge id="1728" source="884" target="884" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1727" source="884" target="876" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1726" source="884" target="879" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1729" source="884" target="893" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="682" source="401" target="367" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="681" source="401" target="395" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="683" source="401" target="389" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="684" source="401" target="395" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1204" source="643" target="644" label="AST"><data key="type">AST</data></edge><edge id="1205" source="643" target="645" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1800" source="885" target="917" label="AST"><data key="type">AST</data></edge><edge id="1732" source="885" target="886" label="AST"><data key="type">AST</data></edge><edge id="1831" source="885" target="928" label="AST"><data key="type">AST</data></edge><edge id="1751" source="885" target="894" label="AST"><data key="type">AST</data></edge><edge id="1779" source="885" target="908" label="AST"><data key="type">AST</data></edge><edge id="687" source="402" target="403" label="AST"><data key="type">AST</data></edge><edge id="700" source="402" target="410" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1733" source="886" target="887" label="AST"><data key="type">AST</data></edge><edge id="1750" source="886" target="894" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2127" source="1068" target="1069" label="AST"><data key="type">AST</data></edge><edge id="2128" source="1068" target="1070" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="693" source="403" target="407" label="AST"><data key="type">AST</data></edge><edge id="688" source="403" target="404" label="AST"><data key="type">AST</data></edge><edge id="691" source="403" target="406" label="AST"><data key="type">AST</data></edge><edge id="1212" source="645" target="647" label="AST"><data key="type">AST</data></edge><edge id="1207" source="645" target="646" label="AST"><data key="type">AST</data></edge><edge id="1734" source="887" target="888" label="AST"><data key="type">AST</data></edge><edge id="1739" source="887" target="891" label="AST"><data key="type">AST</data></edge><edge id="1737" source="887" target="890" label="AST"><data key="type">AST</data></edge><edge id="2129" source="1067" target="1070" label="AST"><data key="type">AST</data></edge><edge id="2126" source="1067" target="1068" label="AST"><data key="type">AST</data></edge><edge id="2130" source="1067" target="1071" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="689" source="404" target="405" label="AST"><data key="type">AST</data></edge><edge id="690" source="404" target="406" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1209" source="646" target="627" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1208" source="646" target="634" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1210" source="646" target="634" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1211" source="646" target="647" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1735" source="888" target="889" label="AST"><data key="type">AST</data></edge><edge id="1736" source="888" target="890" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="692" source="406" target="407" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1215" source="648" target="649" label="AST"><data key="type">AST</data></edge><edge id="1241" source="648" target="662" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="694" source="407" target="408" label="AST"><data key="type">AST</data></edge><edge id="699" source="407" target="409" label="AST"><data key="type">AST</data></edge><edge id="1216" source="649" target="650" label="AST"><data key="type">AST</data></edge><edge id="1221" source="649" target="653" label="AST"><data key="type">AST</data></edge><edge id="1219" source="649" target="652" label="AST"><data key="type">AST</data></edge><edge id="696" source="408" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="695" source="408" target="356" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="697" source="408" target="356" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="698" source="408" target="409" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2144" source="1080" target="1081" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2163" source="1088" target="1089" label="AST"><data key="type">AST</data></edge><edge id="2171" source="1088" target="1092" label="AST"><data key="type">AST</data></edge><edge id="2177" source="1088" target="1094" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2159" source="1087" target="1062" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2158" source="1087" target="1062" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2160" source="1087" target="1062" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2156" source="1086" target="1087" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2152" source="1085" target="1066" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2151" source="1085" target="1066" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2153" source="1085" target="1066" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2154" source="1085" target="1086" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2157" source="1084" target="1087" label="AST"><data key="type">AST</data></edge><edge id="2155" source="1084" target="1086" label="AST"><data key="type">AST</data></edge><edge id="2150" source="1084" target="1085" label="AST"><data key="type">AST</data></edge><edge id="2147" source="1082" target="1083" label="AST"><data key="type">AST</data></edge><edge id="2148" source="1082" target="1084" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1738" source="890" target="891" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2149" source="1081" target="1084" label="AST"><data key="type">AST</data></edge><edge id="2146" source="1081" target="1082" label="AST"><data key="type">AST</data></edge><edge id="1740" source="891" target="892" label="AST"><data key="type">AST</data></edge><edge id="1746" source="891" target="893" label="AST"><data key="type">AST</data></edge><edge id="1217" source="650" target="651" label="AST"><data key="type">AST</data></edge><edge id="1218" source="650" target="652" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1743" source="892" target="847" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1742" source="892" target="823" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1741" source="892" target="871" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1744" source="892" target="881" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1745" source="892" target="893" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1748" source="893" target="876" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1747" source="893" target="884" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1749" source="893" target="879" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="710" source="410" target="414" label="AST"><data key="type">AST</data></edge><edge id="702" source="410" target="411" label="AST"><data key="type">AST</data></edge><edge id="1005" source="410" target="551" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1220" source="652" target="653" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1752" source="894" target="895" label="AST"><data key="type">AST</data></edge><edge id="1778" source="894" target="908" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="703" source="411" target="412" label="AST"><data key="type">AST</data></edge><edge id="708" source="411" target="413" label="AST"><data key="type">AST</data></edge><edge id="709" source="411" target="414" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1226" source="653" target="656" label="AST"><data key="type">AST</data></edge><edge id="1224" source="653" target="655" label="AST"><data key="type">AST</data></edge><edge id="1234" source="653" target="659" label="AST"><data key="type">AST</data></edge><edge id="1222" source="653" target="654" label="AST"><data key="type">AST</data></edge><edge id="1756" source="895" target="898" label="AST"><data key="type">AST</data></edge><edge id="1753" source="895" target="896" label="AST"><data key="type">AST</data></edge><edge id="1758" source="895" target="899" label="AST"><data key="type">AST</data></edge><edge id="705" source="412" target="406" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="704" source="412" target="406" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="706" source="412" target="406" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="707" source="412" target="413" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1223" source="654" target="655" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1754" source="896" target="897" label="AST"><data key="type">AST</data></edge><edge id="1755" source="896" target="898" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1225" source="655" target="656" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="711" source="414" target="415" label="AST"><data key="type">AST</data></edge><edge id="1227" source="656" target="657" label="AST"><data key="type">AST</data></edge><edge id="1232" source="656" target="658" label="AST"><data key="type">AST</data></edge><edge id="1233" source="656" target="659" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1757" source="898" target="899" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2141" source="1078" target="1079" label="AST"><data key="type">AST</data></edge><edge id="2142" source="1078" target="1080" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="712" source="415" target="416" label="AST"><data key="type">AST</data></edge><edge id="736" source="415" target="427" label="AST"><data key="type">AST</data></edge><edge id="727" source="415" target="424" label="AST"><data key="type">AST</data></edge><edge id="1229" source="657" target="641" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1228" source="657" target="641" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1230" source="657" target="641" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1231" source="657" target="658" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1763" source="899" target="902" label="AST"><data key="type">AST</data></edge><edge id="1761" source="899" target="901" label="AST"><data key="type">AST</data></edge><edge id="1771" source="899" target="905" label="AST"><data key="type">AST</data></edge><edge id="1759" source="899" target="900" label="AST"><data key="type">AST</data></edge><edge id="713" source="416" target="417" label="AST"><data key="type">AST</data></edge><edge id="726" source="416" target="424" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="714" source="417" target="418" label="AST"><data key="type">AST</data></edge><edge id="717" source="417" target="420" label="AST"><data key="type">AST</data></edge><edge id="719" source="417" target="421" label="AST"><data key="type">AST</data></edge><edge id="1235" source="659" target="660" label="AST"><data key="type">AST</data></edge><edge id="1240" source="659" target="661" label="AST"><data key="type">AST</data></edge><edge id="715" source="418" target="419" label="AST"><data key="type">AST</data></edge><edge id="716" source="418" target="420" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2166" source="1090" target="1080" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2165" source="1090" target="1080" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2167" source="1090" target="1080" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2168" source="1090" target="1091" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2213" source="1099" target="1113" label="AST"><data key="type">AST</data></edge><edge id="2186" source="1099" target="1100" label="AST"><data key="type">AST</data></edge><edge id="2194" source="1099" target="1103" label="AST"><data key="type">AST</data></edge><edge id="2228" source="1099" target="1119" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2181" source="1096" target="1097" label="AST"><data key="type">AST</data></edge><edge id="2182" source="1096" target="1098" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2180" source="1095" target="1096" label="AST"><data key="type">AST</data></edge><edge id="2183" source="1095" target="1098" label="AST"><data key="type">AST</data></edge><edge id="2179" source="1094" target="1095" label="AST"><data key="type">AST</data></edge><edge id="2184" source="1094" target="1099" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2174" source="1093" target="1080" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2173" source="1093" target="1090" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2175" source="1093" target="1090" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2172" source="1092" target="1093" label="AST"><data key="type">AST</data></edge><edge id="2176" source="1092" target="1057" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1237" source="660" target="641" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1236" source="660" target="657" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1238" source="660" target="657" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1239" source="660" target="661" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="718" source="420" target="421" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1256" source="662" target="669" label="AST"><data key="type">AST</data></edge><edge id="1243" source="662" target="663" label="AST"><data key="type">AST</data></edge><edge id="720" source="421" target="422" label="AST"><data key="type">AST</data></edge><edge id="725" source="421" target="423" label="AST"><data key="type">AST</data></edge><edge id="1244" source="663" target="664" label="AST"><data key="type">AST</data></edge><edge id="1254" source="663" target="668" label="AST"><data key="type">AST</data></edge><edge id="1255" source="663" target="669" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="722" source="422" target="406" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="721" source="422" target="412" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="723" source="422" target="412" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="724" source="422" target="423" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1249" source="664" target="667" label="AST"><data key="type">AST</data></edge><edge id="1247" source="664" target="666" label="AST"><data key="type">AST</data></edge><edge id="1245" source="664" target="665" label="AST"><data key="type">AST</data></edge><edge id="1253" source="664" target="668" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1246" source="665" target="666" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="734" source="424" target="426" label="AST"><data key="type">AST</data></edge><edge id="728" source="424" target="425" label="AST"><data key="type">AST</data></edge><edge id="735" source="424" target="427" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1248" source="666" target="667" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="730" source="425" target="420" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="729" source="425" target="311" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="731" source="425" target="420" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="732" source="425" target="437" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="733" source="425" target="426" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1251" source="667" target="652" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1250" source="667" target="652" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1252" source="667" target="652" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2169" source="1089" target="1091" label="AST"><data key="type">AST</data></edge><edge id="2164" source="1089" target="1090" label="AST"><data key="type">AST</data></edge><edge id="2170" source="1089" target="1092" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="784" source="427" target="453" label="AST"><data key="type">AST</data></edge><edge id="756" source="427" target="439" label="AST"><data key="type">AST</data></edge><edge id="737" source="427" target="428" label="AST"><data key="type">AST</data></edge><edge id="838" source="427" target="473" label="AST"><data key="type">AST</data></edge><edge id="1257" source="669" target="670" label="AST"><data key="type">AST</data></edge><edge id="738" source="428" target="429" label="AST"><data key="type">AST</data></edge><edge id="755" source="428" target="439" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="742" source="429" target="432" label="AST"><data key="type">AST</data></edge><edge id="744" source="429" target="433" label="AST"><data key="type">AST</data></edge><edge id="739" source="429" target="430" label="AST"><data key="type">AST</data></edge><edge id="1258" source="670" target="671" label="AST"><data key="type">AST</data></edge><edge id="1267" source="670" target="674" label="AST"><data key="type">AST</data></edge><edge id="1262" source="670" target="673" label="AST"><data key="type">AST</data></edge><edge id="1272" source="670" target="675" label="AST"><data key="type">AST</data></edge><edge id="1260" source="670" target="672" label="AST"><data key="type">AST</data></edge><edge id="1259" source="671" target="672" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="740" source="430" target="431" label="AST"><data key="type">AST</data></edge><edge id="741" source="430" target="432" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1261" source="672" target="673" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1264" source="673" target="652" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1263" source="673" target="667" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1265" source="673" target="667" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1266" source="673" target="674" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="743" source="432" target="433" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1269" source="674" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1268" source="674" target="630" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1270" source="674" target="630" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1271" source="674" target="675" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="745" source="433" target="434" label="AST"><data key="type">AST</data></edge><edge id="748" source="433" target="436" label="AST"><data key="type">AST</data></edge><edge id="1277" source="675" target="614" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1276" source="675" target="531" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1275" source="675" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1274" source="675" target="277" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1273" source="675" target="621" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1279" source="675" target="348" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1278" source="675" target="277" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1285" source="675" target="621" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1284" source="675" target="614" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1283" source="675" target="550" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1282" source="675" target="531" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1281" source="675" target="478" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1280" source="675" target="400" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="746" source="434" target="435" label="AST"><data key="type">AST</data></edge><edge id="747" source="434" target="436" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1288" source="676" target="677" label="AST"><data key="type">AST</data></edge><edge id="1297" source="676" target="684" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1289" source="677" target="678" label="AST"><data key="type">AST</data></edge><edge id="1294" source="677" target="681" label="AST"><data key="type">AST</data></edge><edge id="1292" source="677" target="680" label="AST"><data key="type">AST</data></edge><edge id="754" source="436" target="438" label="AST"><data key="type">AST</data></edge><edge id="749" source="436" target="437" label="AST"><data key="type">AST</data></edge><edge id="1290" source="678" target="679" label="AST"><data key="type">AST</data></edge><edge id="1291" source="678" target="680" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="751" source="437" target="420" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="750" source="437" target="425" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="752" source="437" target="425" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="753" source="437" target="438" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="757" source="439" target="440" label="AST"><data key="type">AST</data></edge><edge id="783" source="439" target="453" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1293" source="680" target="681" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1295" source="681" target="682" label="AST"><data key="type">AST</data></edge><edge id="761" source="440" target="443" label="AST"><data key="type">AST</data></edge><edge id="763" source="440" target="444" label="AST"><data key="type">AST</data></edge><edge id="758" source="440" target="441" label="AST"><data key="type">AST</data></edge><edge id="1296" source="682" target="683" label="AST"><data key="type">AST</data></edge><edge id="759" source="441" target="442" label="AST"><data key="type">AST</data></edge><edge id="760" source="441" target="443" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="268" source="200" target="201" label="AST"><data key="type">AST</data></edge><edge id="269" source="200" target="202" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1316" source="684" target="696" label="AST"><data key="type">AST</data></edge><edge id="1325" source="684" target="699" label="AST"><data key="type">AST</data></edge><edge id="1299" source="684" target="685" label="AST"><data key="type">AST</data></edge><edge id="1363" source="684" target="718" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="762" source="443" target="444" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1300" source="685" target="686" label="AST"><data key="type">AST</data></edge><edge id="1315" source="685" target="696" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="271" source="202" target="203" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="764" source="444" target="445" label="AST"><data key="type">AST</data></edge><edge id="776" source="444" target="450" label="AST"><data key="type">AST</data></edge><edge id="766" source="444" target="446" label="AST"><data key="type">AST</data></edge><edge id="768" source="444" target="447" label="AST"><data key="type">AST</data></edge><edge id="1304" source="686" target="689" label="AST"><data key="type">AST</data></edge><edge id="1301" source="686" target="687" label="AST"><data key="type">AST</data></edge><edge id="1306" source="686" target="690" label="AST"><data key="type">AST</data></edge><edge id="276" source="203" target="206" label="AST"><data key="type">AST</data></edge><edge id="273" source="203" target="204" label="AST"><data key="type">AST</data></edge><edge id="765" source="445" target="446" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1302" source="687" target="688" label="AST"><data key="type">AST</data></edge><edge id="1303" source="687" target="689" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="274" source="204" target="205" label="AST"><data key="type">AST</data></edge><edge id="275" source="204" target="206" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="767" source="446" target="447" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="774" source="447" target="449" label="AST"><data key="type">AST</data></edge><edge id="769" source="447" target="448" label="AST"><data key="type">AST</data></edge><edge id="775" source="447" target="450" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1305" source="689" target="690" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="277" source="206" target="207" label="AST"><data key="type">AST</data></edge><edge id="282" source="206" target="208" label="AST"><data key="type">AST</data></edge><edge id="771" source="448" target="432" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="770" source="448" target="432" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="772" source="448" target="432" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="773" source="448" target="449" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="279" source="207" target="190" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="278" source="207" target="195" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="280" source="207" target="195" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="281" source="207" target="208" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="285" source="209" target="210" label="AST"><data key="type">AST</data></edge><edge id="311" source="209" target="223" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1314" source="690" target="695" label="AST"><data key="type">AST</data></edge><edge id="1307" source="690" target="691" label="AST"><data key="type">AST</data></edge><edge id="1312" source="691" target="694" label="AST"><data key="type">AST</data></edge><edge id="1310" source="691" target="693" label="AST"><data key="type">AST</data></edge><edge id="1308" source="691" target="692" label="AST"><data key="type">AST</data></edge><edge id="1313" source="691" target="695" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="782" source="450" target="452" label="AST"><data key="type">AST</data></edge><edge id="777" source="450" target="451" label="AST"><data key="type">AST</data></edge><edge id="1309" source="692" target="693" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="779" source="451" target="432" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="778" source="451" target="448" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="780" source="451" target="448" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="781" source="451" target="452" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1311" source="693" target="694" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="286" source="210" target="211" label="AST"><data key="type">AST</data></edge><edge id="289" source="210" target="213" label="AST"><data key="type">AST</data></edge><edge id="291" source="210" target="214" label="AST"><data key="type">AST</data></edge><edge id="287" source="211" target="212" label="AST"><data key="type">AST</data></edge><edge id="288" source="211" target="213" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="785" source="453" target="454" label="AST"><data key="type">AST</data></edge><edge id="817" source="453" target="466" label="AST"><data key="type">AST</data></edge><edge id="837" source="453" target="473" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="786" source="454" target="455" label="AST"><data key="type">AST</data></edge><edge id="799" source="454" target="461" label="AST"><data key="type">AST</data></edge><edge id="816" source="454" target="466" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1323" source="696" target="698" label="AST"><data key="type">AST</data></edge><edge id="1317" source="696" target="697" label="AST"><data key="type">AST</data></edge><edge id="1324" source="696" target="699" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="290" source="213" target="214" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="797" source="455" target="460" label="AST"><data key="type">AST</data></edge><edge id="787" source="455" target="456" label="AST"><data key="type">AST</data></edge><edge id="798" source="455" target="461" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1319" source="697" target="689" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1318" source="697" target="689" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1321" source="697" target="709" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1320" source="697" target="689" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1322" source="697" target="698" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="304" source="214" target="220" label="AST"><data key="type">AST</data></edge><edge id="292" source="214" target="215" label="AST"><data key="type">AST</data></edge><edge id="294" source="214" target="216" label="AST"><data key="type">AST</data></edge><edge id="296" source="214" target="217" label="AST"><data key="type">AST</data></edge><edge id="792" source="456" target="459" label="AST"><data key="type">AST</data></edge><edge id="788" source="456" target="457" label="AST"><data key="type">AST</data></edge><edge id="790" source="456" target="458" label="AST"><data key="type">AST</data></edge><edge id="796" source="456" target="460" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="293" source="215" target="216" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="789" source="457" target="458" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1326" source="699" target="700" label="AST"><data key="type">AST</data></edge><edge id="1345" source="699" target="711" label="AST"><data key="type">AST</data></edge><edge id="295" source="216" target="217" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="791" source="458" target="459" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="297" source="217" target="218" label="AST"><data key="type">AST</data></edge><edge id="302" source="217" target="219" label="AST"><data key="type">AST</data></edge><edge id="303" source="217" target="220" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="794" source="459" target="443" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="793" source="459" target="443" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="795" source="459" target="443" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="299" source="218" target="202" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="298" source="218" target="202" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="300" source="218" target="202" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="301" source="218" target="219" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="800" source="461" target="462" label="AST"><data key="type">AST</data></edge><edge id="310" source="220" target="222" label="AST"><data key="type">AST</data></edge><edge id="305" source="220" target="221" label="AST"><data key="type">AST</data></edge><edge id="808" source="462" target="465" label="AST"><data key="type">AST</data></edge><edge id="801" source="462" target="463" label="AST"><data key="type">AST</data></edge><edge id="806" source="462" target="464" label="AST"><data key="type">AST</data></edge><edge id="307" source="221" target="202" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="306" source="221" target="218" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="308" source="221" target="218" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="309" source="221" target="222" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="803" source="463" target="443" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="802" source="463" target="459" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="804" source="463" target="459" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="805" source="463" target="464" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="807" source="464" target="465" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="313" source="223" target="224" label="AST"><data key="type">AST</data></edge><edge id="326" source="223" target="230" label="AST"><data key="type">AST</data></edge><edge id="342" source="223" target="240" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="810" source="465" target="277" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="811" source="465" target="531" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="809" source="465" target="400" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="812" source="465" target="277" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="813" source="465" target="348" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="814" source="465" target="400" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="815" source="465" target="550" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="324" source="224" target="229" label="AST"><data key="type">AST</data></edge><edge id="314" source="224" target="225" label="AST"><data key="type">AST</data></edge><edge id="325" source="224" target="230" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="818" source="466" target="467" label="AST"><data key="type">AST</data></edge><edge id="315" source="225" target="226" label="AST"><data key="type">AST</data></edge><edge id="317" source="225" target="227" label="AST"><data key="type">AST</data></edge><edge id="319" source="225" target="228" label="AST"><data key="type">AST</data></edge><edge id="323" source="225" target="229" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="819" source="467" target="468" label="AST"><data key="type">AST</data></edge><edge id="821" source="467" target="469" label="AST"><data key="type">AST</data></edge><edge id="833" source="467" target="472" label="AST"><data key="type">AST</data></edge><edge id="823" source="467" target="470" label="AST"><data key="type">AST</data></edge><edge id="828" source="467" target="471" label="AST"><data key="type">AST</data></edge><edge id="316" source="226" target="227" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="820" source="468" target="469" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="318" source="227" target="228" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="822" source="469" target="470" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="321" source="228" target="213" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="320" source="228" target="213" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="322" source="228" target="213" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="825" source="470" target="463" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="824" source="470" target="463" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="826" source="470" target="463" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="827" source="470" target="471" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="830" source="471" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="829" source="471" target="408" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="831" source="471" target="408" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="832" source="471" target="472" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="327" source="230" target="231" label="AST"><data key="type">AST</data></edge><edge id="835" source="472" target="465" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="834" source="472" target="465" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="836" source="472" target="465" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="328" source="231" target="232" label="AST"><data key="type">AST</data></edge><edge id="855" source="473" target="479" label="AST"><data key="type">AST</data></edge><edge id="839" source="473" target="474" label="AST"><data key="type">AST</data></edge><edge id="332" source="232" target="235" label="AST"><data key="type">AST</data></edge><edge id="329" source="232" target="233" label="AST"><data key="type">AST</data></edge><edge id="840" source="474" target="475" label="AST"><data key="type">AST</data></edge><edge id="854" source="474" target="479" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="330" source="233" target="234" label="AST"><data key="type">AST</data></edge><edge id="331" source="233" target="235" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="841" source="475" target="476" label="AST"><data key="type">AST</data></edge><edge id="847" source="475" target="477" label="AST"><data key="type">AST</data></edge><edge id="849" source="475" target="478" label="AST"><data key="type">AST</data></edge><edge id="843" source="476" target="463" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="842" source="476" target="470" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="844" source="476" target="463" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="845" source="476" target="470" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="846" source="476" target="477" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="341" source="235" target="239" label="AST"><data key="type">AST</data></edge><edge id="333" source="235" target="236" label="AST"><data key="type">AST</data></edge><edge id="848" source="477" target="478" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="334" source="236" target="237" label="AST"><data key="type">AST</data></edge><edge id="336" source="236" target="238" label="AST"><data key="type">AST</data></edge><edge id="340" source="236" target="239" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="851" source="478" target="465" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="850" source="478" target="472" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="852" source="478" target="465" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="853" source="478" target="472" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="335" source="237" target="238" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="856" source="479" target="480" label="AST"><data key="type">AST</data></edge><edge id="338" source="238" target="213" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="337" source="238" target="228" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="339" source="238" target="228" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="884" source="480" target="494" label="AST"><data key="type">AST</data></edge><edge id="875" source="480" target="491" label="AST"><data key="type">AST</data></edge><edge id="857" source="480" target="481" label="AST"><data key="type">AST</data></edge><edge id="858" source="481" target="482" label="AST"><data key="type">AST</data></edge><edge id="874" source="481" target="491" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="344" source="240" target="241" label="AST"><data key="type">AST</data></edge><edge id="346" source="240" target="242" label="AST"><data key="type">AST</data></edge><edge id="348" source="240" target="243" label="AST"><data key="type">AST</data></edge><edge id="353" source="240" target="244" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="862" source="482" target="485" label="AST"><data key="type">AST</data></edge><edge id="864" source="482" target="486" label="AST"><data key="type">AST</data></edge><edge id="859" source="482" target="483" label="AST"><data key="type">AST</data></edge><edge id="345" source="241" target="242" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="860" source="483" target="484" label="AST"><data key="type">AST</data></edge><edge id="861" source="483" target="485" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="347" source="242" target="243" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="350" source="243" target="213" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="349" source="243" target="238" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="352" source="243" target="238" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="351" source="243" target="228" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="863" source="485" target="486" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="364" source="244" target="248" label="AST"><data key="type">AST</data></edge><edge id="355" source="244" target="245" label="AST"><data key="type">AST</data></edge><edge id="357" source="244" target="246" label="AST"><data key="type">AST</data></edge><edge id="359" source="244" target="247" label="AST"><data key="type">AST</data></edge><edge id="873" source="486" target="490" label="AST"><data key="type">AST</data></edge><edge id="865" source="486" target="487" label="AST"><data key="type">AST</data></edge><edge id="356" source="245" target="246" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="871" source="487" target="489" label="AST"><data key="type">AST</data></edge><edge id="866" source="487" target="488" label="AST"><data key="type">AST</data></edge><edge id="872" source="487" target="490" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="358" source="246" target="247" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="868" source="488" target="432" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="867" source="488" target="451" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="869" source="488" target="451" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="870" source="488" target="489" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="361" source="247" target="213" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="360" source="247" target="243" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="362" source="247" target="243" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="363" source="247" target="248" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="366" source="248" target="202" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="365" source="248" target="221" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="367" source="248" target="221" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="391" source="249" target="261" label="AST"><data key="type">AST</data></edge><edge id="370" source="249" target="250" label="AST"><data key="type">AST</data></edge><edge id="382" source="249" target="258" label="AST"><data key="type">AST</data></edge><edge id="1286" source="249" target="676" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="882" source="491" target="493" label="AST"><data key="type">AST</data></edge><edge id="876" source="491" target="492" label="AST"><data key="type">AST</data></edge><edge id="883" source="491" target="494" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="371" source="250" target="251" label="AST"><data key="type">AST</data></edge><edge id="381" source="250" target="258" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="878" source="492" target="485" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="877" source="492" target="485" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="880" source="492" target="504" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="879" source="492" target="485" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="881" source="492" target="493" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="375" source="251" target="254" label="AST"><data key="type">AST</data></edge><edge id="377" source="251" target="255" label="AST"><data key="type">AST</data></edge><edge id="372" source="251" target="252" label="AST"><data key="type">AST</data></edge><edge id="373" source="252" target="253" label="AST"><data key="type">AST</data></edge><edge id="374" source="252" target="254" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="885" source="494" target="495" label="AST"><data key="type">AST</data></edge><edge id="932" source="494" target="520" label="AST"><data key="type">AST</data></edge><edge id="904" source="494" target="506" label="AST"><data key="type">AST</data></edge><edge id="886" source="495" target="496" label="AST"><data key="type">AST</data></edge><edge id="903" source="495" target="506" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="376" source="254" target="255" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="892" source="496" target="500" label="AST"><data key="type">AST</data></edge><edge id="887" source="496" target="497" label="AST"><data key="type">AST</data></edge><edge id="890" source="496" target="499" label="AST"><data key="type">AST</data></edge><edge id="378" source="255" target="256" label="AST"><data key="type">AST</data></edge><edge id="380" source="255" target="257" label="AST"><data key="type">AST</data></edge><edge id="888" source="497" target="498" label="AST"><data key="type">AST</data></edge><edge id="889" source="497" target="499" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="379" source="256" target="257" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="891" source="499" target="500" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="389" source="258" target="260" label="AST"><data key="type">AST</data></edge><edge id="383" source="258" target="259" label="AST"><data key="type">AST</data></edge><edge id="390" source="258" target="261" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="385" source="259" target="254" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="384" source="259" target="254" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="386" source="259" target="254" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="387" source="259" target="271" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="388" source="259" target="260" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="583" source="261" target="358" label="AST"><data key="type">AST</data></edge><edge id="1006" source="261" target="551" label="AST"><data key="type">AST</data></edge><edge id="411" source="261" target="273" label="AST"><data key="type">AST</data></edge><edge id="686" source="261" target="402" label="AST"><data key="type">AST</data></edge><edge id="567" source="261" target="350" label="AST"><data key="type">AST</data></edge><edge id="1023" source="261" target="559" label="AST"><data key="type">AST</data></edge><edge id="701" source="261" target="410" label="AST"><data key="type">AST</data></edge><edge id="1165" source="261" target="622" label="AST"><data key="type">AST</data></edge><edge id="439" source="261" target="287" label="AST"><data key="type">AST</data></edge><edge id="392" source="261" target="262" label="AST"><data key="type">AST</data></edge><edge id="393" source="262" target="263" label="AST"><data key="type">AST</data></edge><edge id="410" source="262" target="273" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="397" source="263" target="266" label="AST"><data key="type">AST</data></edge><edge id="399" source="263" target="267" label="AST"><data key="type">AST</data></edge><edge id="394" source="263" target="264" label="AST"><data key="type">AST</data></edge><edge id="395" source="264" target="265" label="AST"><data key="type">AST</data></edge><edge id="396" source="264" target="266" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="398" source="266" target="267" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="400" source="267" target="268" label="AST"><data key="type">AST</data></edge><edge id="403" source="267" target="270" label="AST"><data key="type">AST</data></edge><edge id="401" source="268" target="269" label="AST"><data key="type">AST</data></edge><edge id="402" source="268" target="270" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="404" source="270" target="271" label="AST"><data key="type">AST</data></edge><edge id="409" source="270" target="272" label="AST"><data key="type">AST</data></edge><edge id="406" source="271" target="254" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="405" source="271" target="259" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="407" source="271" target="259" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="408" source="271" target="272" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="412" source="273" target="274" label="AST"><data key="type">AST</data></edge><edge id="438" source="273" target="287" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="413" source="274" target="275" label="AST"><data key="type">AST</data></edge><edge id="416" source="274" target="277" label="AST"><data key="type">AST</data></edge><edge id="418" source="274" target="278" label="AST"><data key="type">AST</data></edge><edge id="414" source="275" target="276" label="AST"><data key="type">AST</data></edge><edge id="415" source="275" target="277" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="417" source="277" target="278" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="431" source="278" target="284" label="AST"><data key="type">AST</data></edge><edge id="421" source="278" target="280" label="AST"><data key="type">AST</data></edge><edge id="423" source="278" target="281" label="AST"><data key="type">AST</data></edge><edge id="419" source="278" target="279" label="AST"><data key="type">AST</data></edge><edge id="420" source="279" target="280" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="422" source="280" target="281" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="424" source="281" target="282" label="AST"><data key="type">AST</data></edge><edge id="429" source="281" target="283" label="AST"><data key="type">AST</data></edge><edge id="430" source="281" target="284" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="426" source="282" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="425" source="282" target="266" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="427" source="282" target="266" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="428" source="282" target="283" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="432" source="284" target="285" label="AST"><data key="type">AST</data></edge><edge id="437" source="284" target="286" label="AST"><data key="type">AST</data></edge><edge id="434" source="285" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="433" source="285" target="282" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="435" source="285" target="282" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="436" source="285" target="286" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="440" source="287" target="288" label="AST"><data key="type">AST</data></edge><edge id="467" source="287" target="301" label="AST"><data key="type">AST</data></edge><edge id="458" source="287" target="298" label="AST"><data key="type">AST</data></edge><edge id="566" source="287" target="350" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="441" source="288" target="289" label="AST"><data key="type">AST</data></edge><edge id="457" source="288" target="298" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="442" source="289" target="290" label="AST"><data key="type">AST</data></edge><edge id="445" source="289" target="292" label="AST"><data key="type">AST</data></edge><edge id="447" source="289" target="293" label="AST"><data key="type">AST</data></edge><edge id="443" source="290" target="291" label="AST"><data key="type">AST</data></edge><edge id="444" source="290" target="292" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="446" source="292" target="293" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="456" source="293" target="297" label="AST"><data key="type">AST</data></edge><edge id="448" source="293" target="294" label="AST"><data key="type">AST</data></edge><edge id="454" source="294" target="296" label="AST"><data key="type">AST</data></edge><edge id="449" source="294" target="295" label="AST"><data key="type">AST</data></edge><edge id="455" source="294" target="297" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="451" source="295" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="450" source="295" target="285" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="452" source="295" target="285" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="453" source="295" target="296" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="465" source="298" target="300" label="AST"><data key="type">AST</data></edge><edge id="459" source="298" target="299" label="AST"><data key="type">AST</data></edge><edge id="466" source="298" target="301" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="461" source="299" target="292" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="460" source="299" target="292" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="462" source="299" target="292" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="463" source="299" target="311" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="464" source="299" target="300" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2630" source="1305" target="1306" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2626" source="1304" target="1286" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2625" source="1304" target="1286" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2627" source="1304" target="1286" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2628" source="1304" target="1305" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2624" source="1303" target="1304" label="AST"><data key="type">AST</data></edge><edge id="2631" source="1303" target="1306" label="AST"><data key="type">AST</data></edge><edge id="2629" source="1303" target="1305" label="AST"><data key="type">AST</data></edge><edge id="2646" source="1303" target="1312" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2620" source="1302" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2619" source="1302" target="1297" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2621" source="1302" target="1297" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2617" source="1301" target="1302" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2613" source="1300" target="1290" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2612" source="1300" target="1295" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2614" source="1300" target="1295" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2615" source="1300" target="1301" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2645" source="1309" target="1311" label="AST"><data key="type">AST</data></edge><edge id="2640" source="1309" target="1310" label="AST"><data key="type">AST</data></edge><edge id="2638" source="1308" target="1309" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2634" source="1307" target="1282" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2633" source="1307" target="1282" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2635" source="1307" target="1282" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2636" source="1307" target="1308" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2632" source="1306" target="1307" label="AST"><data key="type">AST</data></edge><edge id="2639" source="1306" target="1309" label="AST"><data key="type">AST</data></edge><edge id="2637" source="1306" target="1308" label="AST"><data key="type">AST</data></edge><edge id="2651" source="1315" target="1316" label="AST"><data key="type">AST</data></edge><edge id="2652" source="1315" target="1317" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2655" source="1314" target="1318" label="AST"><data key="type">AST</data></edge><edge id="2653" source="1314" target="1317" label="AST"><data key="type">AST</data></edge><edge id="2650" source="1314" target="1315" label="AST"><data key="type">AST</data></edge><edge id="2649" source="1313" target="1314" label="AST"><data key="type">AST</data></edge><edge id="2665" source="1313" target="1323" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2666" source="1312" target="1323" label="AST"><data key="type">AST</data></edge><edge id="2675" source="1312" target="1326" label="AST"><data key="type">AST</data></edge><edge id="2648" source="1312" target="1313" label="AST"><data key="type">AST</data></edge><edge id="2642" source="1310" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2641" source="1310" target="1302" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2643" source="1310" target="1302" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2644" source="1310" target="1311" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2657" source="1319" target="1320" label="AST"><data key="type">AST</data></edge><edge id="2662" source="1319" target="1321" label="AST"><data key="type">AST</data></edge><edge id="2663" source="1319" target="1322" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2656" source="1318" target="1319" label="AST"><data key="type">AST</data></edge><edge id="2664" source="1318" target="1322" label="AST"><data key="type">AST</data></edge><edge id="2654" source="1317" target="1318" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2677" source="1327" target="1328" label="AST"><data key="type">AST</data></edge><edge id="2694" source="1327" target="1338" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2676" source="1326" target="1327" label="AST"><data key="type">AST</data></edge><edge id="2695" source="1326" target="1338" label="AST"><data key="type">AST</data></edge><edge id="2669" source="1324" target="1317" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2668" source="1324" target="1317" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2671" source="1324" target="1336" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2670" source="1324" target="1317" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2672" source="1324" target="1325" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2667" source="1323" target="1324" label="AST"><data key="type">AST</data></edge><edge id="2673" source="1323" target="1325" label="AST"><data key="type">AST</data></edge><edge id="2674" source="1323" target="1326" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2659" source="1320" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2658" source="1320" target="1310" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2660" source="1320" target="1310" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2661" source="1320" target="1321" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1760" source="900" target="901" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1762" source="901" target="902" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1764" source="902" target="903" label="AST"><data key="type">AST</data></edge><edge id="1769" source="902" target="904" label="AST"><data key="type">AST</data></edge><edge id="1770" source="902" target="905" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1766" source="903" target="890" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1765" source="903" target="890" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1767" source="903" target="890" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1768" source="903" target="904" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1777" source="905" target="907" label="AST"><data key="type">AST</data></edge><edge id="1772" source="905" target="906" label="AST"><data key="type">AST</data></edge><edge id="2679" source="1329" target="1330" label="AST"><data key="type">AST</data></edge><edge id="2680" source="1329" target="1331" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1774" source="906" target="890" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1773" source="906" target="903" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1775" source="906" target="903" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1776" source="906" target="907" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2678" source="1328" target="1329" label="AST"><data key="type">AST</data></edge><edge id="2683" source="1328" target="1332" label="AST"><data key="type">AST</data></edge><edge id="2681" source="1328" target="1331" label="AST"><data key="type">AST</data></edge><edge id="1780" source="908" target="909" label="AST"><data key="type">AST</data></edge><edge id="1799" source="908" target="917" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1786" source="909" target="913" label="AST"><data key="type">AST</data></edge><edge id="1784" source="909" target="912" label="AST"><data key="type">AST</data></edge><edge id="1781" source="909" target="910" label="AST"><data key="type">AST</data></edge><edge id="2705" source="1341" target="1282" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2704" source="1341" target="1307" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2707" source="1341" target="1341" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2706" source="1341" target="1307" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2708" source="1341" target="1342" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2700" source="1340" target="1331" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2699" source="1340" target="1331" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2701" source="1340" target="1331" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2702" source="1340" target="1341" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2698" source="1338" target="1340" label="AST"><data key="type">AST</data></edge><edge id="2696" source="1338" target="1339" label="AST"><data key="type">AST</data></edge><edge id="2709" source="1338" target="1342" label="AST"><data key="type">AST</data></edge><edge id="2715" source="1338" target="1343" label="AST"><data key="type">AST</data></edge><edge id="2703" source="1338" target="1341" label="AST"><data key="type">AST</data></edge><edge id="2690" source="1336" target="1317" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2689" source="1336" target="1324" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2691" source="1336" target="1324" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2692" source="1336" target="1337" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2688" source="1335" target="1336" label="AST"><data key="type">AST</data></edge><edge id="2693" source="1335" target="1337" label="AST"><data key="type">AST</data></edge><edge id="2685" source="1333" target="1334" label="AST"><data key="type">AST</data></edge><edge id="2686" source="1333" target="1335" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2687" source="1332" target="1335" label="AST"><data key="type">AST</data></edge><edge id="2684" source="1332" target="1333" label="AST"><data key="type">AST</data></edge><edge id="2682" source="1331" target="1332" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1782" source="910" target="911" label="AST"><data key="type">AST</data></edge><edge id="1783" source="910" target="912" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1785" source="912" target="913" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1787" source="913" target="914" label="AST"><data key="type">AST</data></edge><edge id="1795" source="913" target="916" label="AST"><data key="type">AST</data></edge><edge id="1793" source="913" target="915" label="AST"><data key="type">AST</data></edge><edge id="1789" source="914" target="788" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1788" source="914" target="788" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1791" source="914" target="914" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1790" source="914" target="788" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1792" source="914" target="915" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1794" source="915" target="916" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1797" source="916" target="898" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1796" source="916" target="898" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1798" source="916" target="898" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1807" source="917" target="919" label="AST"><data key="type">AST</data></edge><edge id="1801" source="917" target="918" label="AST"><data key="type">AST</data></edge><edge id="1830" source="917" target="928" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2697" source="1339" target="1340" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1803" source="918" target="803" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1802" source="918" target="803" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1805" source="918" target="918" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1804" source="918" target="803" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1806" source="918" target="919" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1808" source="919" target="920" label="AST"><data key="type">AST</data></edge><edge id="2208" source="1110" target="1111" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2732" source="1351" target="1352" label="AST"><data key="type">AST</data></edge><edge id="2733" source="1351" target="1353" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2734" source="1350" target="1353" label="AST"><data key="type">AST</data></edge><edge id="2731" source="1350" target="1351" label="AST"><data key="type">AST</data></edge><edge id="2735" source="1350" target="1354" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2204" source="1107" target="1108" label="AST"><data key="type">AST</data></edge><edge id="2205" source="1107" target="1109" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2206" source="1106" target="1109" label="AST"><data key="type">AST</data></edge><edge id="2203" source="1106" target="1107" label="AST"><data key="type">AST</data></edge><edge id="2199" source="1105" target="1098" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2197" source="1105" target="1098" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2198" source="1105" target="1110" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2200" source="1105" target="1098" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2201" source="1105" target="1106" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2726" source="1347" target="1348" label="AST"><data key="type">AST</data></edge><edge id="2727" source="1347" target="1349" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2202" source="1104" target="1106" label="AST"><data key="type">AST</data></edge><edge id="2196" source="1104" target="1105" label="AST"><data key="type">AST</data></edge><edge id="2728" source="1346" target="1349" label="AST"><data key="type">AST</data></edge><edge id="2725" source="1346" target="1347" label="AST"><data key="type">AST</data></edge><edge id="2729" source="1346" target="1350" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2195" source="1103" target="1104" label="AST"><data key="type">AST</data></edge><edge id="2212" source="1103" target="1113" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2723" source="1345" target="1346" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2724" source="1344" target="1346" label="AST"><data key="type">AST</data></edge><edge id="2722" source="1344" target="1345" label="AST"><data key="type">AST</data></edge><edge id="2742" source="1344" target="1358" label="AST"><data key="type">AST</data></edge><edge id="2753" source="1344" target="1365" label="AST"><data key="type">AST</data></edge><edge id="2730" source="1344" target="1350" label="AST"><data key="type">AST</data></edge><edge id="2751" source="1344" target="1364" label="AST"><data key="type">AST</data></edge><edge id="2748" source="1344" target="1362" label="AST"><data key="type">AST</data></edge><edge id="2736" source="1344" target="1354" label="AST"><data key="type">AST</data></edge><edge id="2904" source="1344" target="1434" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2189" source="1101" target="1070" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2188" source="1101" target="1070" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2190" source="1101" target="1070" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2191" source="1101" target="1102" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2717" source="1343" target="1290" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2716" source="1343" target="1300" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2719" source="1343" target="1343" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2718" source="1343" target="1300" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1811" source="920" target="922" label="AST"><data key="type">AST</data></edge><edge id="1822" source="920" target="924" label="AST"><data key="type">AST</data></edge><edge id="1809" source="920" target="921" label="AST"><data key="type">AST</data></edge><edge id="1816" source="920" target="923" label="AST"><data key="type">AST</data></edge><edge id="1827" source="920" target="925" label="AST"><data key="type">AST</data></edge><edge id="2187" source="1100" target="1101" label="AST"><data key="type">AST</data></edge><edge id="2192" source="1100" target="1102" label="AST"><data key="type">AST</data></edge><edge id="2193" source="1100" target="1103" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2711" source="1342" target="1286" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2710" source="1342" target="1304" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2713" source="1342" target="1342" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2712" source="1342" target="1304" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2714" source="1342" target="1343" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1810" source="921" target="922" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1813" source="922" target="912" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1812" source="922" target="912" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1814" source="922" target="912" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1815" source="922" target="923" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1818" source="923" target="792" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1817" source="923" target="858" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1820" source="923" target="858" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1819" source="923" target="792" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1821" source="923" target="924" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1824" source="924" target="864" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1823" source="924" target="864" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1825" source="924" target="864" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1826" source="924" target="925" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1828" source="925" target="926" label="AST"><data key="type">AST</data></edge><edge id="1829" source="926" target="927" label="AST"><data key="type">AST</data></edge><edge id="2207" source="1109" target="1110" label="AST"><data key="type">AST</data></edge><edge id="2211" source="1109" target="1112" label="AST"><data key="type">AST</data></edge><edge id="2209" source="1109" target="1111" label="AST"><data key="type">AST</data></edge><edge id="1832" source="928" target="929" label="AST"><data key="type">AST</data></edge><edge id="1838" source="928" target="930" label="AST"><data key="type">AST</data></edge><edge id="1834" source="929" target="806" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1833" source="929" target="806" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1836" source="929" target="929" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1835" source="929" target="806" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1837" source="929" target="930" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2232" source="1121" target="1122" label="AST"><data key="type">AST</data></edge><edge id="2233" source="1121" target="1123" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2236" source="1120" target="1124" label="AST"><data key="type">AST</data></edge><edge id="2234" source="1120" target="1123" label="AST"><data key="type">AST</data></edge><edge id="2231" source="1120" target="1121" label="AST"><data key="type">AST</data></edge><edge id="2749" source="1362" target="1363" label="AST"><data key="type">AST</data></edge><edge id="2750" source="1362" target="1364" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2224" source="1117" target="1070" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2223" source="1117" target="1101" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2225" source="1117" target="1101" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2226" source="1117" target="1118" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2744" source="1359" target="1360" label="AST"><data key="type">AST</data></edge><edge id="2745" source="1359" target="1361" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2227" source="1116" target="1118" label="AST"><data key="type">AST</data></edge><edge id="2222" source="1116" target="1117" label="AST"><data key="type">AST</data></edge><edge id="2746" source="1358" target="1361" label="AST"><data key="type">AST</data></edge><edge id="2743" source="1358" target="1359" label="AST"><data key="type">AST</data></edge><edge id="2747" source="1358" target="1362" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2218" source="1115" target="1098" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2216" source="1115" target="1105" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2217" source="1115" target="1117" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2219" source="1115" target="1098" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2220" source="1115" target="1116" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2215" source="1114" target="1115" label="AST"><data key="type">AST</data></edge><edge id="2221" source="1114" target="1116" label="AST"><data key="type">AST</data></edge><edge id="2214" source="1113" target="1114" label="AST"><data key="type">AST</data></edge><edge id="2738" source="1355" target="1356" label="AST"><data key="type">AST</data></edge><edge id="2739" source="1355" target="1357" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1839" source="930" target="931" label="AST"><data key="type">AST</data></edge><edge id="2740" source="1354" target="1357" label="AST"><data key="type">AST</data></edge><edge id="2737" source="1354" target="1355" label="AST"><data key="type">AST</data></edge><edge id="2741" source="1354" target="1358" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1855" source="931" target="935" label="AST"><data key="type">AST</data></edge><edge id="1842" source="931" target="933" label="AST"><data key="type">AST</data></edge><edge id="1840" source="931" target="932" label="AST"><data key="type">AST</data></edge><edge id="1861" source="931" target="936" label="AST"><data key="type">AST</data></edge><edge id="1848" source="931" target="934" label="AST"><data key="type">AST</data></edge><edge id="2210" source="1111" target="1112" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1841" source="932" target="933" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1844" source="933" target="912" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1843" source="933" target="922" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1846" source="933" target="922" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1845" source="933" target="912" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1847" source="933" target="934" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1850" source="934" target="792" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1849" source="934" target="923" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1853" source="934" target="923" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1852" source="934" target="858" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1851" source="934" target="792" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1854" source="934" target="935" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1857" source="935" target="864" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1856" source="935" target="924" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1859" source="935" target="924" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1858" source="935" target="864" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1860" source="935" target="936" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1862" source="936" target="937" label="AST"><data key="type">AST</data></edge><edge id="1863" source="937" target="938" label="AST"><data key="type">AST</data></edge><edge id="1866" source="939" target="940" label="AST"><data key="type">AST</data></edge><edge id="1882" source="939" target="948" label="AST"><data key="type">AST</data></edge><edge id="1892" source="939" target="951" label="AST"><data key="type">AST</data></edge><edge id="1939" source="939" target="973" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2230" source="1119" target="1120" label="AST"><data key="type">AST</data></edge><edge id="2251" source="1119" target="1129" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2257" source="1132" target="1123" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2256" source="1132" target="1123" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2258" source="1132" target="1123" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2259" source="1132" target="1133" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2766" source="1374" target="1375" label="AST"><data key="type">AST</data></edge><edge id="2773" source="1374" target="1377" label="AST"><data key="type">AST</data></edge><edge id="2771" source="1374" target="1376" label="AST"><data key="type">AST</data></edge><edge id="2255" source="1131" target="1132" label="AST"><data key="type">AST</data></edge><edge id="2260" source="1131" target="1133" label="AST"><data key="type">AST</data></edge><edge id="2254" source="1130" target="1131" label="AST"><data key="type">AST</data></edge><edge id="2261" source="1130" target="1134" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2763" source="1372" target="1373" label="AST"><data key="type">AST</data></edge><edge id="2764" source="1372" target="1374" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2765" source="1371" target="1374" label="AST"><data key="type">AST</data></edge><edge id="2762" source="1371" target="1372" label="AST"><data key="type">AST</data></edge><edge id="2760" source="1370" target="1371" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2253" source="1129" target="1130" label="AST"><data key="type">AST</data></edge><edge id="2262" source="1129" target="1134" label="AST"><data key="type">AST</data></edge><edge id="2278" source="1129" target="1144" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2249" source="1128" target="1062" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2248" source="1128" target="1087" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2250" source="1128" target="1087" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2243" source="1127" target="1115" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2242" source="1127" target="1105" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2241" source="1127" target="1115" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2245" source="1127" target="1115" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2244" source="1127" target="1105" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2246" source="1127" target="1128" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2757" source="1368" target="1369" label="AST"><data key="type">AST</data></edge><edge id="2758" source="1368" target="1370" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2238" source="1125" target="1126" label="AST"><data key="type">AST</data></edge><edge id="2239" source="1125" target="1127" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2756" source="1367" target="1368" label="AST"><data key="type">AST</data></edge><edge id="2761" source="1367" target="1371" label="AST"><data key="type">AST</data></edge><edge id="2759" source="1367" target="1370" label="AST"><data key="type">AST</data></edge><edge id="1867" source="940" target="941" label="AST"><data key="type">AST</data></edge><edge id="1881" source="940" target="948" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2237" source="1124" target="1125" label="AST"><data key="type">AST</data></edge><edge id="2247" source="1124" target="1128" label="AST"><data key="type">AST</data></edge><edge id="2240" source="1124" target="1127" label="AST"><data key="type">AST</data></edge><edge id="2755" source="1366" target="1367" label="AST"><data key="type">AST</data></edge><edge id="2777" source="1366" target="1378" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1873" source="941" target="945" label="AST"><data key="type">AST</data></edge><edge id="1871" source="941" target="944" label="AST"><data key="type">AST</data></edge><edge id="1868" source="941" target="942" label="AST"><data key="type">AST</data></edge><edge id="2235" source="1123" target="1124" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2778" source="1365" target="1378" label="AST"><data key="type">AST</data></edge><edge id="2754" source="1365" target="1366" label="AST"><data key="type">AST</data></edge><edge id="2819" source="1365" target="1396" label="AST"><data key="type">AST</data></edge><edge id="2791" source="1365" target="1384" label="AST"><data key="type">AST</data></edge><edge id="2804" source="1365" target="1388" label="AST"><data key="type">AST</data></edge><edge id="1327" source="700" target="701" label="AST"><data key="type">AST</data></edge><edge id="1344" source="700" target="711" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1869" source="942" target="943" label="AST"><data key="type">AST</data></edge><edge id="1870" source="942" target="944" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2752" source="1364" target="1365" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1333" source="701" target="705" label="AST"><data key="type">AST</data></edge><edge id="1331" source="701" target="704" label="AST"><data key="type">AST</data></edge><edge id="1328" source="701" target="702" label="AST"><data key="type">AST</data></edge><edge id="1329" source="702" target="703" label="AST"><data key="type">AST</data></edge><edge id="1330" source="702" target="704" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1872" source="944" target="945" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1874" source="945" target="946" label="AST"><data key="type">AST</data></edge><edge id="1880" source="945" target="947" label="AST"><data key="type">AST</data></edge><edge id="1332" source="704" target="705" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1876" source="946" target="784" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1875" source="946" target="817" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1877" source="946" target="784" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1878" source="946" target="817" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1879" source="946" target="947" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1337" source="705" target="708" label="AST"><data key="type">AST</data></edge><edge id="1334" source="705" target="706" label="AST"><data key="type">AST</data></edge><edge id="1335" source="706" target="707" label="AST"><data key="type">AST</data></edge><edge id="1336" source="706" target="708" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1883" source="948" target="949" label="AST"><data key="type">AST</data></edge><edge id="1890" source="948" target="950" label="AST"><data key="type">AST</data></edge><edge id="1891" source="948" target="951" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1885" source="949" target="944" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1884" source="949" target="944" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1888" source="949" target="971" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1887" source="949" target="961" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1886" source="949" target="944" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1889" source="949" target="950" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1338" source="708" target="709" label="AST"><data key="type">AST</data></edge><edge id="1343" source="708" target="710" label="AST"><data key="type">AST</data></edge><edge id="1340" source="709" target="689" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1339" source="709" target="697" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1341" source="709" target="697" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1342" source="709" target="710" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2794" source="1385" target="1357" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2793" source="1385" target="1357" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2795" source="1385" target="1357" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2796" source="1385" target="1386" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2274" source="1142" target="1132" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2273" source="1142" target="1132" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2275" source="1142" target="1132" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2276" source="1142" target="1143" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2799" source="1384" target="1387" label="AST"><data key="type">AST</data></edge><edge id="2797" source="1384" target="1386" label="AST"><data key="type">AST</data></edge><edge id="2792" source="1384" target="1385" label="AST"><data key="type">AST</data></edge><edge id="2803" source="1384" target="1388" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2277" source="1141" target="1143" label="AST"><data key="type">AST</data></edge><edge id="2272" source="1141" target="1142" label="AST"><data key="type">AST</data></edge><edge id="2789" source="1383" target="1344" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2270" source="1140" target="1141" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2788" source="1382" target="1383" label="AST"><data key="type">AST</data></edge><edge id="2782" source="1380" target="1370" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2781" source="1380" target="1370" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2783" source="1380" target="1370" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2784" source="1380" target="1381" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2269" source="1139" target="1140" label="AST"><data key="type">AST</data></edge><edge id="2271" source="1139" target="1141" label="AST"><data key="type">AST</data></edge><edge id="2266" source="1137" target="1138" label="AST"><data key="type">AST</data></edge><edge id="2267" source="1137" target="1139" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2785" source="1379" target="1381" label="AST"><data key="type">AST</data></edge><edge id="2780" source="1379" target="1380" label="AST"><data key="type">AST</data></edge><edge id="2786" source="1379" target="1382" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2268" source="1136" target="1139" label="AST"><data key="type">AST</data></edge><edge id="2265" source="1136" target="1137" label="AST"><data key="type">AST</data></edge><edge id="2779" source="1378" target="1379" label="AST"><data key="type">AST</data></edge><edge id="2787" source="1378" target="1382" label="AST"><data key="type">AST</data></edge><edge id="2790" source="1378" target="1384" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1893" source="951" target="952" label="AST"><data key="type">AST</data></edge><edge id="1912" source="951" target="963" label="AST"><data key="type">AST</data></edge><edge id="2264" source="1135" target="1136" label="AST"><data key="type">AST</data></edge><edge id="2775" source="1377" target="1353" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2774" source="1377" target="1353" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2776" source="1377" target="1353" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1894" source="952" target="953" label="AST"><data key="type">AST</data></edge><edge id="1911" source="952" target="963" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2263" source="1134" target="1135" label="AST"><data key="type">AST</data></edge><edge id="2772" source="1376" target="1377" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1346" source="711" target="712" label="AST"><data key="type">AST</data></edge><edge id="1354" source="711" target="714" label="AST"><data key="type">AST</data></edge><edge id="1352" source="711" target="713" label="AST"><data key="type">AST</data></edge><edge id="1898" source="953" target="956" label="AST"><data key="type">AST</data></edge><edge id="1895" source="953" target="954" label="AST"><data key="type">AST</data></edge><edge id="1900" source="953" target="957" label="AST"><data key="type">AST</data></edge><edge id="2768" source="1375" target="1349" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2767" source="1375" target="1349" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2769" source="1375" target="1349" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2770" source="1375" target="1376" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1348" source="712" target="680" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1347" source="712" target="680" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1349" source="712" target="680" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1350" source="712" target="712" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1351" source="712" target="713" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1896" source="954" target="955" label="AST"><data key="type">AST</data></edge><edge id="1897" source="954" target="956" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1353" source="713" target="714" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1359" source="714" target="717" label="AST"><data key="type">AST</data></edge><edge id="1357" source="714" target="716" label="AST"><data key="type">AST</data></edge><edge id="1355" source="714" target="715" label="AST"><data key="type">AST</data></edge><edge id="1899" source="956" target="957" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1356" source="715" target="716" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1904" source="957" target="960" label="AST"><data key="type">AST</data></edge><edge id="1901" source="957" target="958" label="AST"><data key="type">AST</data></edge><edge id="1358" source="716" target="717" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1902" source="958" target="959" label="AST"><data key="type">AST</data></edge><edge id="1903" source="958" target="960" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1361" source="717" target="704" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1360" source="717" target="704" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1362" source="717" target="704" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1365" source="718" target="719" label="AST"><data key="type">AST</data></edge><edge id="1396" source="718" target="734" label="AST"><data key="type">AST</data></edge><edge id="1381" source="718" target="727" label="AST"><data key="type">AST</data></edge><edge id="1434" source="718" target="754" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1366" source="719" target="720" label="AST"><data key="type">AST</data></edge><edge id="1380" source="719" target="727" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2299" source="1154" target="1156" label="AST"><data key="type">AST</data></edge><edge id="2297" source="1154" target="1155" label="AST"><data key="type">AST</data></edge><edge id="2820" source="1396" target="1397" label="AST"><data key="type">AST</data></edge><edge id="2828" source="1396" target="1400" label="AST"><data key="type">AST</data></edge><edge id="2294" source="1152" target="1153" label="AST"><data key="type">AST</data></edge><edge id="2295" source="1152" target="1154" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2814" source="1394" target="1370" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2813" source="1394" target="1387" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2815" source="1394" target="1387" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2816" source="1394" target="1395" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2296" source="1151" target="1154" label="AST"><data key="type">AST</data></edge><edge id="2293" source="1151" target="1152" label="AST"><data key="type">AST</data></edge><edge id="2812" source="1393" target="1394" label="AST"><data key="type">AST</data></edge><edge id="2817" source="1393" target="1395" label="AST"><data key="type">AST</data></edge><edge id="2292" source="1150" target="1151" label="AST"><data key="type">AST</data></edge><edge id="2810" source="1392" target="1393" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2807" source="1390" target="1391" label="AST"><data key="type">AST</data></edge><edge id="2808" source="1390" target="1392" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2291" source="1149" target="1150" label="AST"><data key="type">AST</data></edge><edge id="1910" source="960" target="962" label="AST"><data key="type">AST</data></edge><edge id="1905" source="960" target="961" label="AST"><data key="type">AST</data></edge><edge id="1907" source="961" target="944" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1906" source="961" target="949" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1908" source="961" target="949" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1909" source="961" target="962" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2284" source="1147" target="1132" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2283" source="1147" target="1142" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2286" source="1147" target="1142" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2285" source="1147" target="1132" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2287" source="1147" target="1148" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2811" source="1389" target="1393" label="AST"><data key="type">AST</data></edge><edge id="2809" source="1389" target="1392" label="AST"><data key="type">AST</data></edge><edge id="2806" source="1389" target="1390" label="AST"><data key="type">AST</data></edge><edge id="1367" source="720" target="721" label="AST"><data key="type">AST</data></edge><edge id="1372" source="720" target="724" label="AST"><data key="type">AST</data></edge><edge id="1370" source="720" target="723" label="AST"><data key="type">AST</data></edge><edge id="2288" source="1146" target="1148" label="AST"><data key="type">AST</data></edge><edge id="2282" source="1146" target="1147" label="AST"><data key="type">AST</data></edge><edge id="2805" source="1388" target="1389" label="AST"><data key="type">AST</data></edge><edge id="2818" source="1388" target="1396" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1368" source="721" target="722" label="AST"><data key="type">AST</data></edge><edge id="1369" source="721" target="723" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1931" source="963" target="969" label="AST"><data key="type">AST</data></edge><edge id="1913" source="963" target="964" label="AST"><data key="type">AST</data></edge><edge id="2281" source="1145" target="1146" label="AST"><data key="type">AST</data></edge><edge id="2289" source="1145" target="1149" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2801" source="1387" target="1370" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2800" source="1387" target="1380" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2802" source="1387" target="1380" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1914" source="964" target="965" label="AST"><data key="type">AST</data></edge><edge id="1930" source="964" target="969" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2290" source="1144" target="1149" label="AST"><data key="type">AST</data></edge><edge id="2280" source="1144" target="1145" label="AST"><data key="type">AST</data></edge><edge id="2306" source="1144" target="1159" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2798" source="1386" target="1387" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1371" source="723" target="724" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1915" source="965" target="966" label="AST"><data key="type">AST</data></edge><edge id="1926" source="965" target="968" label="AST"><data key="type">AST</data></edge><edge id="1924" source="965" target="967" label="AST"><data key="type">AST</data></edge><edge id="1379" source="724" target="726" label="AST"><data key="type">AST</data></edge><edge id="1373" source="724" target="725" label="AST"><data key="type">AST</data></edge><edge id="1918" source="966" target="966" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1917" source="966" target="864" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1916" source="966" target="935" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1921" source="966" target="935" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1920" source="966" target="924" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1919" source="966" target="864" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1922" source="966" target="966" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1923" source="966" target="967" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1375" source="725" target="680" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1374" source="725" target="712" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1377" source="725" target="712" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1376" source="725" target="680" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1378" source="725" target="726" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1925" source="967" target="968" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1928" source="968" target="956" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1927" source="968" target="956" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1929" source="968" target="956" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1382" source="727" target="728" label="AST"><data key="type">AST</data></edge><edge id="1391" source="727" target="731" label="AST"><data key="type">AST</data></edge><edge id="1395" source="727" target="734" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1932" source="969" target="970" label="AST"><data key="type">AST</data></edge><edge id="1389" source="728" target="730" label="AST"><data key="type">AST</data></edge><edge id="1383" source="728" target="729" label="AST"><data key="type">AST</data></edge><edge id="1390" source="728" target="731" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1385" source="729" target="723" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1384" source="729" target="723" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1387" source="729" target="744" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1386" source="729" target="723" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1388" source="729" target="730" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2316" source="1165" target="1166" label="AST"><data key="type">AST</data></edge><edge id="2324" source="1165" target="1169" label="AST"><data key="type">AST</data></edge><edge id="2314" source="1164" target="1165" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2311" source="1162" target="1163" label="AST"><data key="type">AST</data></edge><edge id="2312" source="1162" target="1164" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2315" source="1161" target="1165" label="AST"><data key="type">AST</data></edge><edge id="2313" source="1161" target="1164" label="AST"><data key="type">AST</data></edge><edge id="2310" source="1161" target="1162" label="AST"><data key="type">AST</data></edge><edge id="2309" source="1160" target="1161" label="AST"><data key="type">AST</data></edge><edge id="2325" source="1160" target="1170" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1938" source="970" target="972" label="AST"><data key="type">AST</data></edge><edge id="1933" source="970" target="971" label="AST"><data key="type">AST</data></edge><edge id="1935" source="971" target="944" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1934" source="971" target="961" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1936" source="971" target="961" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1937" source="971" target="972" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2326" source="1159" target="1170" label="AST"><data key="type">AST</data></edge><edge id="2335" source="1159" target="1173" label="AST"><data key="type">AST</data></edge><edge id="2308" source="1159" target="1160" label="AST"><data key="type">AST</data></edge><edge id="2386" source="1159" target="1193" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1394" source="731" target="733" label="AST"><data key="type">AST</data></edge><edge id="1392" source="731" target="732" label="AST"><data key="type">AST</data></edge><edge id="1941" source="973" target="974" label="AST"><data key="type">AST</data></edge><edge id="1945" source="973" target="779" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2302" source="1157" target="1147" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2301" source="1157" target="1147" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2303" source="1157" target="1147" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2304" source="1157" target="1158" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1393" source="732" target="733" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1943" source="974" target="784" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1942" source="974" target="946" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1944" source="974" target="946" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2305" source="1156" target="1158" label="AST"><data key="type">AST</data></edge><edge id="2300" source="1156" target="1157" label="AST"><data key="type">AST</data></edge><edge id="2823" source="1398" target="1392" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2822" source="1398" target="1392" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2824" source="1398" target="1392" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2825" source="1398" target="1399" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1974" source="975" target="993" label="AST"><data key="type">AST</data></edge><edge id="1962" source="975" target="985" label="AST"><data key="type">AST</data></edge><edge id="1950" source="975" target="977" label="AST"><data key="type">AST</data></edge><edge id="1948" source="975" target="976" label="AST"><data key="type">AST</data></edge><edge id="1968" source="975" target="989" label="AST"><data key="type">AST</data></edge><edge id="1979" source="975" target="996" label="AST"><data key="type">AST</data></edge><edge id="1956" source="975" target="981" label="AST"><data key="type">AST</data></edge><edge id="1977" source="975" target="995" label="AST"><data key="type">AST</data></edge><edge id="2109" source="975" target="1057" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2298" source="1155" target="1156" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2821" source="1397" target="1398" label="AST"><data key="type">AST</data></edge><edge id="2826" source="1397" target="1399" label="AST"><data key="type">AST</data></edge><edge id="2827" source="1397" target="1400" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1397" source="734" target="735" label="AST"><data key="type">AST</data></edge><edge id="1416" source="734" target="746" label="AST"><data key="type">AST</data></edge><edge id="1949" source="976" target="977" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1398" source="735" target="736" label="AST"><data key="type">AST</data></edge><edge id="1415" source="735" target="746" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1954" source="977" target="980" label="AST"><data key="type">AST</data></edge><edge id="1951" source="977" target="978" label="AST"><data key="type">AST</data></edge><edge id="1955" source="977" target="981" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1404" source="736" target="740" label="AST"><data key="type">AST</data></edge><edge id="1402" source="736" target="739" label="AST"><data key="type">AST</data></edge><edge id="1399" source="736" target="737" label="AST"><data key="type">AST</data></edge><edge id="1952" source="978" target="979" label="AST"><data key="type">AST</data></edge><edge id="1953" source="978" target="980" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1400" source="737" target="738" label="AST"><data key="type">AST</data></edge><edge id="1401" source="737" target="739" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1403" source="739" target="740" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2347" source="1176" target="1177" label="AST"><data key="type">AST</data></edge><edge id="2350" source="1176" target="1179" label="AST"><data key="type">AST</data></edge><edge id="2341" source="1175" target="1175" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2340" source="1175" target="1080" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2338" source="1175" target="1093" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2339" source="1175" target="1180" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2344" source="1175" target="1192" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2343" source="1175" target="1093" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2342" source="1175" target="1090" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2345" source="1175" target="1176" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2337" source="1174" target="1175" label="AST"><data key="type">AST</data></edge><edge id="2346" source="1174" target="1176" label="AST"><data key="type">AST</data></edge><edge id="2357" source="1174" target="1182" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2336" source="1173" target="1174" label="AST"><data key="type">AST</data></edge><edge id="2358" source="1173" target="1182" label="AST"><data key="type">AST</data></edge><edge id="2329" source="1171" target="1164" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2328" source="1171" target="1164" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2331" source="1171" target="1180" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2330" source="1171" target="1164" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2332" source="1171" target="1172" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2327" source="1170" target="1171" label="AST"><data key="type">AST</data></edge><edge id="2333" source="1170" target="1172" label="AST"><data key="type">AST</data></edge><edge id="2334" source="1170" target="1173" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1960" source="981" target="984" label="AST"><data key="type">AST</data></edge><edge id="1957" source="981" target="982" label="AST"><data key="type">AST</data></edge><edge id="1961" source="981" target="985" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1408" source="740" target="743" label="AST"><data key="type">AST</data></edge><edge id="1405" source="740" target="741" label="AST"><data key="type">AST</data></edge><edge id="1958" source="982" target="983" label="AST"><data key="type">AST</data></edge><edge id="1959" source="982" target="984" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1406" source="741" target="742" label="AST"><data key="type">AST</data></edge><edge id="1407" source="741" target="743" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="893" source="500" target="501" label="AST"><data key="type">AST</data></edge><edge id="896" source="500" target="503" label="AST"><data key="type">AST</data></edge><edge id="894" source="501" target="502" label="AST"><data key="type">AST</data></edge><edge id="895" source="501" target="503" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1414" source="743" target="745" label="AST"><data key="type">AST</data></edge><edge id="1409" source="743" target="744" label="AST"><data key="type">AST</data></edge><edge id="1963" source="985" target="986" label="AST"><data key="type">AST</data></edge><edge id="1966" source="985" target="988" label="AST"><data key="type">AST</data></edge><edge id="1967" source="985" target="989" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2319" source="1167" target="1066" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2318" source="1167" target="1085" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2320" source="1167" target="1085" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2321" source="1167" target="1168" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1411" source="744" target="723" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1410" source="744" target="729" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1412" source="744" target="729" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1413" source="744" target="745" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1964" source="986" target="987" label="AST"><data key="type">AST</data></edge><edge id="1965" source="986" target="988" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2317" source="1166" target="1167" label="AST"><data key="type">AST</data></edge><edge id="2322" source="1166" target="1168" label="AST"><data key="type">AST</data></edge><edge id="2323" source="1166" target="1169" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="897" source="503" target="504" label="AST"><data key="type">AST</data></edge><edge id="902" source="503" target="505" label="AST"><data key="type">AST</data></edge><edge id="899" source="504" target="485" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="898" source="504" target="492" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="900" source="504" target="492" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="901" source="504" target="505" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1425" source="746" target="750" label="AST"><data key="type">AST</data></edge><edge id="1417" source="746" target="747" label="AST"><data key="type">AST</data></edge><edge id="1423" source="747" target="749" label="AST"><data key="type">AST</data></edge><edge id="1418" source="747" target="748" label="AST"><data key="type">AST</data></edge><edge id="1424" source="747" target="750" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1972" source="989" target="992" label="AST"><data key="type">AST</data></edge><edge id="1969" source="989" target="990" label="AST"><data key="type">AST</data></edge><edge id="1973" source="989" target="993" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="905" source="506" target="507" label="AST"><data key="type">AST</data></edge><edge id="931" source="506" target="520" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1420" source="748" target="739" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1419" source="748" target="739" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1421" source="748" target="739" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1422" source="748" target="749" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="909" source="507" target="510" label="AST"><data key="type">AST</data></edge><edge id="911" source="507" target="511" label="AST"><data key="type">AST</data></edge><edge id="906" source="507" target="508" label="AST"><data key="type">AST</data></edge><edge id="907" source="508" target="509" label="AST"><data key="type">AST</data></edge><edge id="908" source="508" target="510" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2376" source="1187" target="1189" label="AST"><data key="type">AST</data></edge><edge id="2371" source="1187" target="1188" label="AST"><data key="type">AST</data></edge><edge id="2377" source="1187" target="1190" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2378" source="1186" target="1190" label="AST"><data key="type">AST</data></edge><edge id="2370" source="1186" target="1187" label="AST"><data key="type">AST</data></edge><edge id="2368" source="1185" target="1186" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2362" source="1184" target="1147" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2361" source="1184" target="1157" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2365" source="1184" target="1184" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2364" source="1184" target="1157" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2363" source="1184" target="1147" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2366" source="1184" target="1185" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2369" source="1183" target="1186" label="AST"><data key="type">AST</data></edge><edge id="2367" source="1183" target="1185" label="AST"><data key="type">AST</data></edge><edge id="2360" source="1183" target="1184" label="AST"><data key="type">AST</data></edge><edge id="2379" source="1183" target="1191" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2359" source="1182" target="1183" label="AST"><data key="type">AST</data></edge><edge id="2380" source="1182" target="1191" label="AST"><data key="type">AST</data></edge><edge id="2353" source="1180" target="1164" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2352" source="1180" target="1171" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2354" source="1180" target="1171" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2355" source="1180" target="1181" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1970" source="990" target="991" label="AST"><data key="type">AST</data></edge><edge id="1971" source="990" target="992" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1426" source="750" target="751" label="AST"><data key="type">AST</data></edge><edge id="1430" source="751" target="753" label="AST"><data key="type">AST</data></edge><edge id="1427" source="751" target="752" label="AST"><data key="type">AST</data></edge><edge id="1975" source="993" target="994" label="AST"><data key="type">AST</data></edge><edge id="1976" source="993" target="995" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="910" source="510" target="511" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1428" source="752" target="753" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1429" source="752" target="753" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="912" source="511" target="512" label="AST"><data key="type">AST</data></edge><edge id="924" source="511" target="517" label="AST"><data key="type">AST</data></edge><edge id="914" source="511" target="513" label="AST"><data key="type">AST</data></edge><edge id="916" source="511" target="514" label="AST"><data key="type">AST</data></edge><edge id="1432" source="753" target="739" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1431" source="753" target="748" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1433" source="753" target="748" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1978" source="995" target="996" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2356" source="1179" target="1181" label="AST"><data key="type">AST</data></edge><edge id="2351" source="1179" target="1180" label="AST"><data key="type">AST</data></edge><edge id="913" source="512" target="513" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1448" source="754" target="756" label="AST"><data key="type">AST</data></edge><edge id="1436" source="754" target="755" label="AST"><data key="type">AST</data></edge><edge id="1467" source="754" target="765" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2017" source="996" target="1012" label="AST"><data key="type">AST</data></edge><edge id="1992" source="996" target="1002" label="AST"><data key="type">AST</data></edge><edge id="1980" source="996" target="997" label="AST"><data key="type">AST</data></edge><edge id="2087" source="996" target="1045" label="AST"><data key="type">AST</data></edge><edge id="915" source="513" target="514" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1445" source="755" target="680" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1437" source="755" target="725" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1444" source="755" target="764" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1443" source="755" target="763" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1442" source="755" target="762" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1441" source="755" target="761" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1440" source="755" target="760" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1439" source="755" target="759" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1438" source="755" target="758" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1446" source="755" target="758" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1447" source="755" target="756" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1981" source="997" target="998" label="AST"><data key="type">AST</data></edge><edge id="1989" source="997" target="1001" label="AST"><data key="type">AST</data></edge><edge id="1991" source="997" target="1002" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2348" source="1177" target="1178" label="AST"><data key="type">AST</data></edge><edge id="2349" source="1177" target="1179" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="922" source="514" target="516" label="AST"><data key="type">AST</data></edge><edge id="917" source="514" target="515" label="AST"><data key="type">AST</data></edge><edge id="923" source="514" target="517" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1458" source="756" target="760" label="AST"><data key="type">AST</data></edge><edge id="1456" source="756" target="759" label="AST"><data key="type">AST</data></edge><edge id="1466" source="756" target="764" label="AST"><data key="type">AST</data></edge><edge id="1464" source="756" target="763" label="AST"><data key="type">AST</data></edge><edge id="1451" source="756" target="758" label="AST"><data key="type">AST</data></edge><edge id="1462" source="756" target="762" label="AST"><data key="type">AST</data></edge><edge id="1460" source="756" target="761" label="AST"><data key="type">AST</data></edge><edge id="1449" source="756" target="757" label="AST"><data key="type">AST</data></edge><edge id="1987" source="998" target="1000" label="AST"><data key="type">AST</data></edge><edge id="1982" source="998" target="999" label="AST"><data key="type">AST</data></edge><edge id="1988" source="998" target="1001" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="919" source="515" target="499" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="918" source="515" target="499" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="920" source="515" target="499" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="921" source="515" target="516" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1450" source="757" target="758" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1984" source="999" target="980" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1983" source="999" target="980" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1985" source="999" target="980" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1986" source="999" target="1000" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1453" source="758" target="680" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1452" source="758" target="755" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1454" source="758" target="725" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1455" source="758" target="759" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="930" source="517" target="519" label="AST"><data key="type">AST</data></edge><edge id="925" source="517" target="518" label="AST"><data key="type">AST</data></edge><edge id="1457" source="759" target="760" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="927" source="518" target="499" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="926" source="518" target="515" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="928" source="518" target="515" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="929" source="518" target="519" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2394" source="1198" target="1199" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2395" source="1197" target="1199" label="AST"><data key="type">AST</data></edge><edge id="2393" source="1197" target="1198" label="AST"><data key="type">AST</data></edge><edge id="2390" source="1195" target="1196" label="AST"><data key="type">AST</data></edge><edge id="2391" source="1195" target="1197" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2389" source="1194" target="1195" label="AST"><data key="type">AST</data></edge><edge id="2392" source="1194" target="1197" label="AST"><data key="type">AST</data></edge><edge id="2388" source="1193" target="1194" label="AST"><data key="type">AST</data></edge><edge id="2383" source="1192" target="1175" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2382" source="1192" target="1188" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2384" source="1192" target="1188" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2381" source="1191" target="1192" label="AST"><data key="type">AST</data></edge><edge id="2385" source="1191" target="1057" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1459" source="760" target="761" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1461" source="761" target="762" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="933" source="520" target="521" label="AST"><data key="type">AST</data></edge><edge id="946" source="520" target="527" label="AST"><data key="type">AST</data></edge><edge id="1463" source="762" target="763" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="944" source="521" target="526" label="AST"><data key="type">AST</data></edge><edge id="934" source="521" target="522" label="AST"><data key="type">AST</data></edge><edge id="945" source="521" target="527" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1465" source="763" target="764" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="935" source="522" target="523" label="AST"><data key="type">AST</data></edge><edge id="937" source="522" target="524" label="AST"><data key="type">AST</data></edge><edge id="939" source="522" target="525" label="AST"><data key="type">AST</data></edge><edge id="943" source="522" target="526" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="936" source="523" target="524" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1469" source="765" target="766" label="AST"><data key="type">AST</data></edge><edge id="1478" source="765" target="769" label="AST"><data key="type">AST</data></edge><edge id="1473" source="765" target="768" label="AST"><data key="type">AST</data></edge><edge id="1471" source="765" target="767" label="AST"><data key="type">AST</data></edge><edge id="1480" source="765" target="770" label="AST"><data key="type">AST</data></edge><edge id="1481" source="765" target="771" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="938" source="524" target="525" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1470" source="766" target="767" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2373" source="1188" target="1175" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2372" source="1188" target="1175" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2374" source="1188" target="1175" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2375" source="1188" target="1189" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="941" source="525" target="510" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="940" source="525" target="510" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="942" source="525" target="510" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1472" source="767" target="768" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1475" source="768" target="755" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1474" source="768" target="758" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1476" source="768" target="755" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1477" source="768" target="769" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="947" source="527" target="528" label="AST"><data key="type">AST</data></edge><edge id="1479" source="769" target="770" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="962" source="528" target="534" label="AST"><data key="type">AST</data></edge><edge id="948" source="528" target="529" label="AST"><data key="type">AST</data></edge><edge id="949" source="529" target="530" label="AST"><data key="type">AST</data></edge><edge id="961" source="529" target="534" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1483" source="771" target="772" label="AST"><data key="type">AST</data></edge><edge id="1494" source="771" target="775" label="AST"><data key="type">AST</data></edge><edge id="950" source="530" target="531" label="AST"><data key="type">AST</data></edge><edge id="955" source="530" target="532" label="AST"><data key="type">AST</data></edge><edge id="957" source="530" target="533" label="AST"><data key="type">AST</data></edge><edge id="1487" source="772" target="774" label="AST"><data key="type">AST</data></edge><edge id="1485" source="772" target="773" label="AST"><data key="type">AST</data></edge><edge id="1484" source="772" target="118" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="1493" source="772" target="775" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="952" source="531" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="951" source="531" target="478" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="953" source="531" target="478" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="954" source="531" target="532" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1486" source="773" target="774" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="956" source="532" target="533" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1490" source="774" target="755" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1489" source="774" target="778" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1488" source="774" target="776" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1491" source="774" target="778" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1492" source="774" target="123" label="FIELD"><data key="type">FIELD</data></edge><edge id="959" source="533" target="510" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="958" source="533" target="525" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="960" source="533" target="525" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1499" source="775" target="778" label="AST"><data key="type">AST</data></edge><edge id="1497" source="775" target="777" label="AST"><data key="type">AST</data></edge><edge id="1495" source="775" target="776" label="AST"><data key="type">AST</data></edge><edge id="963" source="534" target="535" label="AST"><data key="type">AST</data></edge><edge id="986" source="534" target="545" label="AST"><data key="type">AST</data></edge><edge id="1496" source="776" target="777" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="970" source="535" target="537" label="AST"><data key="type">AST</data></edge><edge id="972" source="535" target="538" label="AST"><data key="type">AST</data></edge><edge id="964" source="535" target="536" label="AST"><data key="type">AST</data></edge><edge id="985" source="535" target="545" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1498" source="777" target="778" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2403" source="1199" target="1201" label="AST"><data key="type">AST</data></edge><edge id="2396" source="1199" target="1200" label="AST"><data key="type">AST</data></edge><edge id="966" source="536" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="965" source="536" target="471" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="967" source="536" target="408" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="968" source="536" target="471" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="969" source="536" target="537" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1501" source="778" target="755" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1500" source="778" target="768" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1502" source="778" target="768" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="971" source="537" target="538" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1525" source="779" target="793" label="AST"><data key="type">AST</data></edge><edge id="1547" source="779" target="807" label="AST"><data key="type">AST</data></edge><edge id="1513" source="779" target="785" label="AST"><data key="type">AST</data></edge><edge id="1531" source="779" target="797" label="AST"><data key="type">AST</data></edge><edge id="1542" source="779" target="804" label="AST"><data key="type">AST</data></edge><edge id="1553" source="779" target="811" label="AST"><data key="type">AST</data></edge><edge id="1550" source="779" target="809" label="AST"><data key="type">AST</data></edge><edge id="1519" source="779" target="789" label="AST"><data key="type">AST</data></edge><edge id="1507" source="779" target="781" label="AST"><data key="type">AST</data></edge><edge id="1505" source="779" target="780" label="AST"><data key="type">AST</data></edge><edge id="1537" source="779" target="801" label="AST"><data key="type">AST</data></edge><edge id="1946" source="779" target="975" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="973" source="538" target="539" label="AST"><data key="type">AST</data></edge><edge id="976" source="538" target="541" label="AST"><data key="type">AST</data></edge><edge id="974" source="539" target="540" label="AST"><data key="type">AST</data></edge><edge id="975" source="539" target="541" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1506" source="780" target="781" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1511" source="781" target="784" label="AST"><data key="type">AST</data></edge><edge id="1508" source="781" target="782" label="AST"><data key="type">AST</data></edge><edge id="1512" source="781" target="785" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1509" source="782" target="783" label="AST"><data key="type">AST</data></edge><edge id="1510" source="782" target="784" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="981" source="541" target="544" label="AST"><data key="type">AST</data></edge><edge id="977" source="541" target="542" label="AST"><data key="type">AST</data></edge><edge id="979" source="541" target="543" label="AST"><data key="type">AST</data></edge><edge id="978" source="542" target="543" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="487" source="301" target="313" label="AST"><data key="type">AST</data></edge><edge id="468" source="301" target="302" label="AST"><data key="type">AST</data></edge><edge id="515" source="301" target="327" label="AST"><data key="type">AST</data></edge><edge id="980" source="543" target="544" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1514" source="785" target="786" label="AST"><data key="type">AST</data></edge><edge id="1517" source="785" target="788" label="AST"><data key="type">AST</data></edge><edge id="1518" source="785" target="789" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="469" source="302" target="303" label="AST"><data key="type">AST</data></edge><edge id="486" source="302" target="313" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="983" source="544" target="533" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="982" source="544" target="533" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="984" source="544" target="533" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1515" source="786" target="787" label="AST"><data key="type">AST</data></edge><edge id="1516" source="786" target="788" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="473" source="303" target="306" label="AST"><data key="type">AST</data></edge><edge id="475" source="303" target="307" label="AST"><data key="type">AST</data></edge><edge id="470" source="303" target="304" label="AST"><data key="type">AST</data></edge><edge id="991" source="545" target="548" label="AST"><data key="type">AST</data></edge><edge id="996" source="545" target="549" label="AST"><data key="type">AST</data></edge><edge id="1001" source="545" target="550" label="AST"><data key="type">AST</data></edge><edge id="987" source="545" target="546" label="AST"><data key="type">AST</data></edge><edge id="989" source="545" target="547" label="AST"><data key="type">AST</data></edge><edge id="471" source="304" target="305" label="AST"><data key="type">AST</data></edge><edge id="472" source="304" target="306" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="988" source="546" target="547" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="990" source="547" target="548" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1523" source="789" target="792" label="AST"><data key="type">AST</data></edge><edge id="1520" source="789" target="790" label="AST"><data key="type">AST</data></edge><edge id="1524" source="789" target="793" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="474" source="306" target="307" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="993" source="548" target="533" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="992" source="548" target="544" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="994" source="548" target="544" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="995" source="548" target="549" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="476" source="307" target="308" label="AST"><data key="type">AST</data></edge><edge id="479" source="307" target="310" label="AST"><data key="type">AST</data></edge><edge id="998" source="549" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="997" source="549" target="536" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="999" source="549" target="536" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1000" source="549" target="550" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="477" source="308" target="309" label="AST"><data key="type">AST</data></edge><edge id="478" source="308" target="310" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1521" source="790" target="791" label="AST"><data key="type">AST</data></edge><edge id="1522" source="790" target="792" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1003" source="550" target="531" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1002" source="550" target="531" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1004" source="550" target="531" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1007" source="551" target="552" label="AST"><data key="type">AST</data></edge><edge id="1022" source="551" target="559" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1529" source="793" target="796" label="AST"><data key="type">AST</data></edge><edge id="1526" source="793" target="794" label="AST"><data key="type">AST</data></edge><edge id="1530" source="793" target="797" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="485" source="310" target="312" label="AST"><data key="type">AST</data></edge><edge id="480" source="310" target="311" label="AST"><data key="type">AST</data></edge><edge id="1008" source="552" target="553" label="AST"><data key="type">AST</data></edge><edge id="1013" source="552" target="556" label="AST"><data key="type">AST</data></edge><edge id="1011" source="552" target="555" label="AST"><data key="type">AST</data></edge><edge id="1527" source="794" target="795" label="AST"><data key="type">AST</data></edge><edge id="1528" source="794" target="796" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="482" source="311" target="292" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="481" source="311" target="299" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="483" source="311" target="299" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="484" source="311" target="312" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1009" source="553" target="554" label="AST"><data key="type">AST</data></edge><edge id="1010" source="553" target="555" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="488" source="313" target="314" label="AST"><data key="type">AST</data></edge><edge id="514" source="313" target="327" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1012" source="555" target="556" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1535" source="797" target="800" label="AST"><data key="type">AST</data></edge><edge id="1532" source="797" target="798" label="AST"><data key="type">AST</data></edge><edge id="1536" source="797" target="801" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="489" source="314" target="315" label="AST"><data key="type">AST</data></edge><edge id="492" source="314" target="317" label="AST"><data key="type">AST</data></edge><edge id="494" source="314" target="318" label="AST"><data key="type">AST</data></edge><edge id="1014" source="556" target="557" label="AST"><data key="type">AST</data></edge><edge id="1021" source="556" target="558" label="AST"><data key="type">AST</data></edge><edge id="1533" source="798" target="799" label="AST"><data key="type">AST</data></edge><edge id="1534" source="798" target="800" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="490" source="315" target="316" label="AST"><data key="type">AST</data></edge><edge id="491" source="315" target="317" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1016" source="557" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1015" source="557" target="549" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1019" source="557" target="549" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1018" source="557" target="471" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1017" source="557" target="408" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1020" source="557" target="558" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="493" source="317" target="318" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1024" source="559" target="560" label="AST"><data key="type">AST</data></edge><edge id="1032" source="559" target="563" label="AST"><data key="type">AST</data></edge><edge id="1164" source="559" target="622" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="495" source="318" target="319" label="AST"><data key="type">AST</data></edge><edge id="497" source="318" target="320" label="AST"><data key="type">AST</data></edge><edge id="499" source="318" target="321" label="AST"><data key="type">AST</data></edge><edge id="507" source="318" target="324" label="AST"><data key="type">AST</data></edge><edge id="496" source="319" target="320" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1025" source="560" target="561" label="AST"><data key="type">AST</data></edge><edge id="1030" source="560" target="562" label="AST"><data key="type">AST</data></edge><edge id="1031" source="560" target="563" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1027" source="561" target="555" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1026" source="561" target="555" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1028" source="561" target="555" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1029" source="561" target="562" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="498" source="320" target="321" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="500" source="321" target="322" label="AST"><data key="type">AST</data></edge><edge id="505" source="321" target="323" label="AST"><data key="type">AST</data></edge><edge id="506" source="321" target="324" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1033" source="563" target="564" label="AST"><data key="type">AST</data></edge><edge id="502" source="322" target="306" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="501" source="322" target="306" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="503" source="322" target="306" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="504" source="322" target="323" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1049" source="564" target="573" label="AST"><data key="type">AST</data></edge><edge id="1058" source="564" target="576" label="AST"><data key="type">AST</data></edge><edge id="1034" source="564" target="565" label="AST"><data key="type">AST</data></edge><edge id="1035" source="565" target="566" label="AST"><data key="type">AST</data></edge><edge id="1048" source="565" target="573" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="513" source="324" target="326" label="AST"><data key="type">AST</data></edge><edge id="508" source="324" target="325" label="AST"><data key="type">AST</data></edge><edge id="1039" source="566" target="569" label="AST"><data key="type">AST</data></edge><edge id="1036" source="566" target="567" label="AST"><data key="type">AST</data></edge><edge id="1041" source="566" target="570" label="AST"><data key="type">AST</data></edge><edge id="510" source="325" target="306" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="509" source="325" target="322" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="511" source="325" target="322" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="512" source="325" target="326" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1037" source="567" target="568" label="AST"><data key="type">AST</data></edge><edge id="1038" source="567" target="569" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="516" source="327" target="328" label="AST"><data key="type">AST</data></edge><edge id="529" source="327" target="334" label="AST"><data key="type">AST</data></edge><edge id="1040" source="569" target="570" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="527" source="328" target="333" label="AST"><data key="type">AST</data></edge><edge id="517" source="328" target="329" label="AST"><data key="type">AST</data></edge><edge id="528" source="328" target="334" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="520" source="329" target="331" label="AST"><data key="type">AST</data></edge><edge id="522" source="329" target="332" label="AST"><data key="type">AST</data></edge><edge id="518" source="329" target="330" label="AST"><data key="type">AST</data></edge><edge id="526" source="329" target="333" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1047" source="570" target="572" label="AST"><data key="type">AST</data></edge><edge id="1042" source="570" target="571" label="AST"><data key="type">AST</data></edge><edge id="1044" source="571" target="555" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1043" source="571" target="561" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1045" source="571" target="561" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1046" source="571" target="572" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="519" source="330" target="331" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="521" source="331" target="332" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1056" source="573" target="575" label="AST"><data key="type">AST</data></edge><edge id="1050" source="573" target="574" label="AST"><data key="type">AST</data></edge><edge id="1057" source="573" target="576" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="524" source="332" target="317" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="523" source="332" target="317" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="525" source="332" target="317" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1052" source="574" target="569" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1051" source="574" target="437" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1054" source="574" target="586" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1053" source="574" target="569" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1055" source="574" target="575" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="530" source="334" target="335" label="AST"><data key="type">AST</data></edge><edge id="552" source="334" target="345" label="AST"><data key="type">AST</data></edge><edge id="1106" source="576" target="602" label="AST"><data key="type">AST</data></edge><edge id="1059" source="576" target="577" label="AST"><data key="type">AST</data></edge><edge id="1078" source="576" target="588" label="AST"><data key="type">AST</data></edge><edge id="531" source="335" target="336" label="AST"><data key="type">AST</data></edge><edge id="536" source="335" target="337" label="AST"><data key="type">AST</data></edge><edge id="538" source="335" target="338" label="AST"><data key="type">AST</data></edge><edge id="551" source="335" target="345" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1060" source="577" target="578" label="AST"><data key="type">AST</data></edge><edge id="1077" source="577" target="588" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="533" source="336" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="532" source="336" target="295" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="534" source="336" target="295" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="535" source="336" target="337" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1066" source="578" target="582" label="AST"><data key="type">AST</data></edge><edge id="1064" source="578" target="581" label="AST"><data key="type">AST</data></edge><edge id="1061" source="578" target="579" label="AST"><data key="type">AST</data></edge><edge id="537" source="337" target="338" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1062" source="579" target="580" label="AST"><data key="type">AST</data></edge><edge id="1063" source="579" target="581" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="542" source="338" target="341" label="AST"><data key="type">AST</data></edge><edge id="539" source="338" target="339" label="AST"><data key="type">AST</data></edge><edge id="540" source="339" target="340" label="AST"><data key="type">AST</data></edge><edge id="541" source="339" target="341" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1065" source="581" target="582" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1067" source="582" target="583" label="AST"><data key="type">AST</data></edge><edge id="1070" source="582" target="585" label="AST"><data key="type">AST</data></edge><edge id="543" source="341" target="342" label="AST"><data key="type">AST</data></edge><edge id="545" source="341" target="343" label="AST"><data key="type">AST</data></edge><edge id="547" source="341" target="344" label="AST"><data key="type">AST</data></edge><edge id="1068" source="583" target="584" label="AST"><data key="type">AST</data></edge><edge id="1069" source="583" target="585" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="118" source="100" target="101" label="AST"><data key="type">AST</data></edge><edge id="544" source="342" target="343" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="119" source="101" target="102" label="AST"><data key="type">AST</data></edge><edge id="546" source="343" target="344" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1076" source="585" target="587" label="AST"><data key="type">AST</data></edge><edge id="1071" source="585" target="586" label="AST"><data key="type">AST</data></edge><edge id="120" source="102" target="103" label="AST"><data key="type">AST</data></edge><edge id="549" source="344" target="317" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="548" source="344" target="332" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="550" source="344" target="332" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1073" source="586" target="569" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1072" source="586" target="574" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1074" source="586" target="574" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1075" source="586" target="587" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="121" source="103" target="104" label="AST"><data key="type">AST</data></edge><edge id="562" source="345" target="349" label="AST"><data key="type">AST</data></edge><edge id="553" source="345" target="346" label="AST"><data key="type">AST</data></edge><edge id="555" source="345" target="347" label="AST"><data key="type">AST</data></edge><edge id="557" source="345" target="348" label="AST"><data key="type">AST</data></edge><edge id="554" source="346" target="347" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1079" source="588" target="589" label="AST"><data key="type">AST</data></edge><edge id="1105" source="588" target="602" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2110" source="105" target="1057" label="AST"><data key="type">AST</data></edge><edge id="150" source="105" target="124" label="AST"><data key="type">AST</data></edge><edge id="140" source="105" target="117" label="AST"><data key="type">AST</data></edge><edge id="187" source="105" target="148" label="AST"><data key="type">AST</data></edge><edge id="2405" source="105" target="1202" label="AST"><data key="type">AST</data></edge><edge id="133" source="105" target="112" label="AST"><data key="type">AST</data></edge><edge id="124" source="105" target="106" label="AST"><data key="type">AST</data></edge><edge id="157" source="105" target="129" label="AST"><data key="type">AST</data></edge><edge id="2721" source="105" target="1344" label="AST"><data key="type">AST</data></edge><edge id="2930" source="105" target="1450" label="AST"><data key="type">AST</data></edge><edge id="126" source="105" target="107" label="AST"><data key="type">AST</data></edge><edge id="2971" source="105" target="1474" label="AST"><data key="type">AST</data></edge><edge id="2982" source="105" target="1481" label="AST"><data key="type">AST</data></edge><edge id="2563" source="105" target="1273" label="AST"><data key="type">AST</data></edge><edge id="2905" source="105" target="1434" label="AST"><data key="type">AST</data></edge><edge id="2916" source="105" target="1441" label="AST"><data key="type">AST</data></edge><edge id="1947" source="105" target="975" label="AST"><data key="type">AST</data></edge><edge id="2946" source="105" target="1460" label="AST"><data key="type">AST</data></edge><edge id="1504" source="105" target="779" label="AST"><data key="type">AST</data></edge><edge id="556" source="347" target="348" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1080" source="589" target="590" label="AST"><data key="type">AST</data></edge><edge id="1085" source="589" target="593" label="AST"><data key="type">AST</data></edge><edge id="1083" source="589" target="592" label="AST"><data key="type">AST</data></edge><edge id="125" source="106" target="107" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="559" source="348" target="277" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="558" source="348" target="277" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="560" source="348" target="277" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="561" source="348" target="349" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="127" source="107" target="108" label="AST"><data key="type">AST</data></edge><edge id="132" source="107" target="112" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="564" source="349" target="317" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="563" source="349" target="344" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="565" source="349" target="344" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="128" source="108" target="109" label="AST"><data key="type">AST</data></edge><edge id="131" source="108" target="111" label="AST"><data key="type">AST</data></edge><edge id="129" source="109" target="110" label="AST"><data key="type">AST</data></edge><edge id="130" source="109" target="111" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1081" source="590" target="591" label="AST"><data key="type">AST</data></edge><edge id="1082" source="590" target="592" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="568" source="350" target="351" label="AST"><data key="type">AST</data></edge><edge id="582" source="350" target="358" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1084" source="592" target="593" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="572" source="351" target="354" label="AST"><data key="type">AST</data></edge><edge id="574" source="351" target="355" label="AST"><data key="type">AST</data></edge><edge id="569" source="351" target="352" label="AST"><data key="type">AST</data></edge><edge id="1090" source="593" target="596" label="AST"><data key="type">AST</data></edge><edge id="1088" source="593" target="595" label="AST"><data key="type">AST</data></edge><edge id="1098" source="593" target="599" label="AST"><data key="type">AST</data></edge><edge id="1086" source="593" target="594" label="AST"><data key="type">AST</data></edge><edge id="570" source="352" target="353" label="AST"><data key="type">AST</data></edge><edge id="571" source="352" target="354" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1087" source="594" target="595" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1089" source="595" target="596" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="134" source="112" target="113" label="AST"><data key="type">AST</data></edge><edge id="139" source="112" target="117" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="573" source="354" target="355" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1091" source="596" target="597" label="AST"><data key="type">AST</data></edge><edge id="1096" source="596" target="598" label="AST"><data key="type">AST</data></edge><edge id="1097" source="596" target="599" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="135" source="113" target="114" label="AST"><data key="type">AST</data></edge><edge id="138" source="113" target="116" label="AST"><data key="type">AST</data></edge><edge id="575" source="355" target="356" label="AST"><data key="type">AST</data></edge><edge id="581" source="355" target="357" label="AST"><data key="type">AST</data></edge><edge id="1093" source="597" target="581" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1092" source="597" target="581" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1094" source="597" target="581" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1095" source="597" target="598" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="136" source="114" target="115" label="AST"><data key="type">AST</data></edge><edge id="137" source="114" target="116" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="577" source="356" target="266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="576" source="356" target="336" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="578" source="356" target="295" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="579" source="356" target="336" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="580" source="356" target="357" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1104" source="599" target="601" label="AST"><data key="type">AST</data></edge><edge id="1099" source="599" target="600" label="AST"><data key="type">AST</data></edge><edge id="584" source="358" target="359" label="AST"><data key="type">AST</data></edge><edge id="592" source="358" target="362" label="AST"><data key="type">AST</data></edge><edge id="685" source="358" target="402" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="141" source="117" target="118" label="AST"><data key="type">AST</data></edge><edge id="149" source="117" target="124" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="585" source="359" target="360" label="AST"><data key="type">AST</data></edge><edge id="590" source="359" target="361" label="AST"><data key="type">AST</data></edge><edge id="591" source="359" target="362" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="148" source="118" target="123" label="AST"><data key="type">AST</data></edge><edge id="142" source="118" target="119" label="AST"><data key="type">AST</data></edge><edge id="143" source="119" target="120" label="AST"><data key="type">AST</data></edge><edge id="145" source="119" target="121" label="AST"><data key="type">AST</data></edge><edge id="147" source="119" target="123" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="12" source="11" target="12" label="AST"><data key="type">AST</data></edge><edge id="15" source="11" target="15" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="13" source="12" target="13" label="AST"><data key="type">AST</data></edge><edge id="14" source="13" target="14" label="AST"><data key="type">AST</data></edge><edge id="17" source="15" target="16" label="AST"><data key="type">AST</data></edge><edge id="20" source="15" target="19" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="18" source="16" target="17" label="AST"><data key="type">AST</data></edge><edge id="19" source="17" target="18" label="AST"><data key="type">AST</data></edge><edge id="22" source="19" target="20" label="AST"><data key="type">AST</data></edge><edge id="25" source="19" target="23" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="587" source="360" target="354" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="586" source="360" target="354" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="588" source="360" target="354" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="589" source="360" target="361" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="144" source="120" target="121" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="621" source="362" target="377" label="AST"><data key="type">AST</data></edge><edge id="593" source="362" target="363" label="AST"><data key="type">AST</data></edge><edge id="146" source="121" target="122" label="AST"><data key="type">AST</data></edge><edge id="594" source="363" target="364" label="AST"><data key="type">AST</data></edge><edge id="620" source="363" target="377" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="595" source="364" target="365" label="AST"><data key="type">AST</data></edge><edge id="598" source="364" target="367" label="AST"><data key="type">AST</data></edge><edge id="600" source="364" target="368" label="AST"><data key="type">AST</data></edge><edge id="596" source="365" target="366" label="AST"><data key="type">AST</data></edge><edge id="597" source="365" target="367" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="151" source="124" target="125" label="AST"><data key="type">AST</data></edge><edge id="156" source="124" target="129" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="155" source="125" target="128" label="AST"><data key="type">AST</data></edge><edge id="152" source="125" target="126" label="AST"><data key="type">AST</data></edge><edge id="599" source="367" target="368" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="153" source="126" target="127" label="AST"><data key="type">AST</data></edge><edge id="154" source="126" target="128" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="601" source="368" target="369" label="AST"><data key="type">AST</data></edge><edge id="613" source="368" target="374" label="AST"><data key="type">AST</data></edge><edge id="603" source="368" target="370" label="AST"><data key="type">AST</data></edge><edge id="605" source="368" target="371" label="AST"><data key="type">AST</data></edge><edge id="602" source="369" target="370" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="166" source="129" target="135" label="AST"><data key="type">AST</data></edge><edge id="158" source="129" target="130" label="AST"><data key="type">AST</data></edge><edge id="169" source="129" target="137" label="AST"><data key="type">AST</data></edge><edge id="160" source="129" target="131" label="AST"><data key="type">AST</data></edge><edge id="172" source="129" target="139" label="AST"><data key="type">AST</data></edge><edge id="175" source="129" target="141" label="AST"><data key="type">AST</data></edge><edge id="186" source="129" target="148" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="23" source="20" target="21" label="AST"><data key="type">AST</data></edge><edge id="24" source="21" target="22" label="AST"><data key="type">AST</data></edge><edge id="27" source="23" target="24" label="AST"><data key="type">AST</data></edge><edge id="30" source="23" target="27" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="28" source="24" target="25" label="AST"><data key="type">AST</data></edge><edge id="29" source="25" target="26" label="AST"><data key="type">AST</data></edge><edge id="32" source="27" target="28" label="AST"><data key="type">AST</data></edge><edge id="35" source="27" target="31" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="33" source="28" target="29" label="AST"><data key="type">AST</data></edge><edge id="34" source="29" target="30" label="AST"><data key="type">AST</data></edge><edge id="604" source="370" target="371" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="611" source="371" target="373" label="AST"><data key="type">AST</data></edge><edge id="606" source="371" target="372" label="AST"><data key="type">AST</data></edge><edge id="612" source="371" target="374" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="159" source="130" target="131" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="608" source="372" target="354" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="607" source="372" target="360" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="609" source="372" target="360" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="610" source="372" target="373" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="161" source="131" target="132" label="AST"><data key="type">AST</data></edge><edge id="164" source="131" target="134" label="AST"><data key="type">AST</data></edge><edge id="165" source="131" target="135" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="162" source="132" target="133" label="AST"><data key="type">AST</data></edge><edge id="163" source="132" target="134" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="614" source="374" target="375" label="AST"><data key="type">AST</data></edge><edge id="619" source="374" target="376" label="AST"><data key="type">AST</data></edge><edge id="616" source="375" target="354" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="615" source="375" target="372" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="617" source="375" target="372" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="618" source="375" target="376" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="167" source="135" target="136" label="AST"><data key="type">AST</data></edge><edge id="168" source="135" target="137" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="622" source="377" target="378" label="AST"><data key="type">AST</data></edge><edge id="635" source="377" target="384" label="AST"><data key="type">AST</data></edge><edge id="633" source="378" target="383" label="AST"><data key="type">AST</data></edge><edge id="623" source="378" target="379" label="AST"><data key="type">AST</data></edge><edge id="634" source="378" target="384" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="170" source="137" target="138" label="AST"><data key="type">AST</data></edge><edge id="171" source="137" target="139" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="624" source="379" target="380" label="AST"><data key="type">AST</data></edge><edge id="626" source="379" target="381" label="AST"><data key="type">AST</data></edge><edge id="628" source="379" target="382" label="AST"><data key="type">AST</data></edge><edge id="632" source="379" target="383" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="173" source="139" target="140" label="AST"><data key="type">AST</data></edge><edge id="174" source="139" target="141" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="37" source="31" target="32" label="AST"><data key="type">AST</data></edge><edge id="40" source="31" target="35" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="38" source="32" target="33" label="AST"><data key="type">AST</data></edge><edge id="39" source="33" target="34" label="AST"><data key="type">AST</data></edge><edge id="42" source="35" target="36" label="AST"><data key="type">AST</data></edge><edge id="45" source="35" target="39" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="43" source="36" target="37" label="AST"><data key="type">AST</data></edge><edge id="44" source="37" target="38" label="AST"><data key="type">AST</data></edge><edge id="47" source="39" target="40" label="AST"><data key="type">AST</data></edge><edge id="50" source="39" target="43" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="625" source="380" target="381" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="627" source="381" target="382" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="630" source="382" target="367" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="629" source="382" target="367" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="631" source="382" target="367" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="176" source="141" target="142" label="AST"><data key="type">AST</data></edge><edge id="177" source="142" target="143" label="AST"><data key="type">AST</data></edge><edge id="179" source="142" target="144" label="AST"><data key="type">AST</data></edge><edge id="181" source="142" target="145" label="AST"><data key="type">AST</data></edge><edge id="183" source="142" target="146" label="AST"><data key="type">AST</data></edge><edge id="185" source="142" target="147" label="AST"><data key="type">AST</data></edge><edge id="636" source="384" target="385" label="AST"><data key="type">AST</data></edge><edge id="669" source="384" target="397" label="AST"><data key="type">AST</data></edge><edge id="178" source="143" target="144" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="653" source="385" target="391" label="AST"><data key="type">AST</data></edge><edge id="637" source="385" target="386" label="AST"><data key="type">AST</data></edge><edge id="668" source="385" target="397" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="180" source="144" target="145" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="640" source="386" target="388" label="AST"><data key="type">AST</data></edge><edge id="642" source="386" target="389" label="AST"><data key="type">AST</data></edge><edge id="647" source="386" target="390" label="AST"><data key="type">AST</data></edge><edge id="638" source="386" target="387" label="AST"><data key="type">AST</data></edge><edge id="652" source="386" target="391" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="182" source="145" target="146" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="639" source="387" target="388" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="184" source="146" target="147" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="641" source="388" target="389" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="644" source="389" target="367" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="643" source="389" target="382" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="645" source="389" target="382" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="646" source="389" target="390" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="188" source="148" target="149" label="AST"><data key="type">AST</data></edge><edge id="221" source="148" target="170" label="AST"><data key="type">AST</data></edge><edge id="202" source="148" target="158" label="AST"><data key="type">AST</data></edge><edge id="213" source="148" target="165" label="AST"><data key="type">AST</data></edge><edge id="224" source="148" target="172" label="AST"><data key="type">AST</data></edge><edge id="227" source="148" target="174" label="AST"><data key="type">AST</data></edge><edge id="190" source="148" target="150" label="AST"><data key="type">AST</data></edge><edge id="218" source="148" target="168" label="AST"><data key="type">AST</data></edge><edge id="208" source="148" target="162" label="AST"><data key="type">AST</data></edge><edge id="196" source="148" target="154" label="AST"><data key="type">AST</data></edge><edge id="1503" source="148" target="779" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="189" source="149" target="150" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="48" source="40" target="41" label="AST"><data key="type">AST</data></edge><edge id="49" source="41" target="42" label="AST"><data key="type">AST</data></edge><edge id="52" source="43" target="44" label="AST"><data key="type">AST</data></edge><edge id="55" source="43" target="47" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="53" source="44" target="45" label="AST"><data key="type">AST</data></edge><edge id="54" source="45" target="46" label="AST"><data key="type">AST</data></edge><edge id="57" source="47" target="48" label="AST"><data key="type">AST</data></edge><edge id="62" source="47" target="53" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="58" source="48" target="49" label="AST"><data key="type">AST</data></edge><edge id="59" source="49" target="50" label="AST"><data key="type">AST</data></edge><edge id="649" source="390" target="277" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="648" source="390" target="348" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="650" source="390" target="277" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="651" source="390" target="348" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="654" source="391" target="392" label="AST"><data key="type">AST</data></edge><edge id="191" source="150" target="151" label="AST"><data key="type">AST</data></edge><edge id="194" source="150" target="153" label="AST"><data key="type">AST</data></edge><edge id="195" source="150" target="154" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="664" source="392" target="396" label="AST"><data key="type">AST</data></edge><edge id="655" source="392" target="393" label="AST"><data key="type">AST</data></edge><edge id="657" source="392" target="394" label="AST"><data key="type">AST</data></edge><edge id="659" source="392" target="395" label="AST"><data key="type">AST</data></edge><edge id="192" source="151" target="152" label="AST"><data key="type">AST</data></edge><edge id="193" source="151" target="153" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="656" source="393" target="394" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="658" source="394" target="395" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="661" source="395" target="367" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="660" source="395" target="389" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="662" source="395" target="389" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="663" source="395" target="396" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="200" source="154" target="157" label="AST"><data key="type">AST</data></edge><edge id="197" source="154" target="155" label="AST"><data key="type">AST</data></edge><edge id="201" source="154" target="158" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="666" source="396" target="277" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="665" source="396" target="390" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="667" source="396" target="390" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="198" source="155" target="156" label="AST"><data key="type">AST</data></edge><edge id="199" source="155" target="157" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="672" source="397" target="399" label="AST"><data key="type">AST</data></edge><edge id="674" source="397" target="400" label="AST"><data key="type">AST</data></edge><edge id="680" source="397" target="401" label="AST"><data key="type">AST</data></edge><edge id="670" source="397" target="398" label="AST"><data key="type">AST</data></edge><edge id="671" source="398" target="399" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="673" source="399" target="400" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="203" source="158" target="159" label="AST"><data key="type">AST</data></edge><edge id="206" source="158" target="161" label="AST"><data key="type">AST</data></edge><edge id="207" source="158" target="162" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="204" source="159" target="160" label="AST"><data key="type">AST</data></edge><edge id="205" source="159" target="161" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="60" source="50" target="51" label="AST"><data key="type">AST</data></edge><edge id="61" source="51" target="52" label="AST"><data key="type">AST</data></edge><edge id="64" source="53" target="54" label="AST"><data key="type">AST</data></edge><edge id="69" source="53" target="59" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="65" source="54" target="55" label="AST"><data key="type">AST</data></edge><edge id="66" source="55" target="56" label="AST"><data key="type">AST</data></edge><edge id="67" source="56" target="57" label="AST"><data key="type">AST</data></edge><edge id="68" source="57" target="58" label="AST"><data key="type">AST</data></edge><edge id="71" source="59" target="60" label="AST"><data key="type">AST</data></edge><edge id="76" source="59" target="65" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="211" source="162" target="164" label="AST"><data key="type">AST</data></edge><edge id="209" source="162" target="163" label="AST"><data key="type">AST</data></edge><edge id="212" source="162" target="165" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="210" source="163" target="164" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="214" source="165" target="166" label="AST"><data key="type">AST</data></edge><edge id="216" source="165" target="167" label="AST"><data key="type">AST</data></edge><edge id="217" source="165" target="168" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="215" source="166" target="167" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="219" source="168" target="169" label="AST"><data key="type">AST</data></edge><edge id="220" source="168" target="170" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="72" source="60" target="61" label="AST"><data key="type">AST</data></edge><edge id="73" source="61" target="62" label="AST"><data key="type">AST</data></edge><edge id="74" source="62" target="63" label="AST"><data key="type">AST</data></edge><edge id="75" source="63" target="64" label="AST"><data key="type">AST</data></edge><edge id="78" source="65" target="66" label="AST"><data key="type">AST</data></edge><edge id="83" source="65" target="71" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="79" source="66" target="67" label="AST"><data key="type">AST</data></edge><edge id="80" source="67" target="68" label="AST"><data key="type">AST</data></edge><edge id="81" source="68" target="69" label="AST"><data key="type">AST</data></edge><edge id="82" source="69" target="70" label="AST"><data key="type">AST</data></edge><edge id="222" source="170" target="171" label="AST"><data key="type">AST</data></edge><edge id="223" source="170" target="172" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="225" source="172" target="173" label="AST"><data key="type">AST</data></edge><edge id="226" source="172" target="174" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="242" source="174" target="185" label="AST"><data key="type">AST</data></edge><edge id="1435" source="174" target="754" label="AST"><data key="type">AST</data></edge><edge id="1468" source="174" target="765" label="AST"><data key="type">AST</data></edge><edge id="235" source="174" target="180" label="AST"><data key="type">AST</data></edge><edge id="369" source="174" target="249" label="AST"><data key="type">AST</data></edge><edge id="1287" source="174" target="676" label="AST"><data key="type">AST</data></edge><edge id="1298" source="174" target="684" label="AST"><data key="type">AST</data></edge><edge id="1364" source="174" target="718" label="AST"><data key="type">AST</data></edge><edge id="228" source="174" target="175" label="AST"><data key="type">AST</data></edge><edge id="1482" source="174" target="771" label="AST"><data key="type">AST</data></edge><edge id="231" source="175" target="177" label="AST"><data key="type">AST</data></edge><edge id="229" source="175" target="176" label="AST"><data key="type">AST</data></edge><edge id="234" source="175" target="180" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="230" source="176" target="177" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="232" source="177" target="178" label="AST"><data key="type">AST</data></edge><edge id="233" source="178" target="179" label="AST"><data key="type">AST</data></edge><edge id="85" source="71" target="72" label="AST"><data key="type">AST</data></edge><edge id="90" source="71" target="77" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="86" source="72" target="73" label="AST"><data key="type">AST</data></edge><edge id="87" source="73" target="74" label="AST"><data key="type">AST</data></edge><edge id="88" source="74" target="75" label="AST"><data key="type">AST</data></edge><edge id="89" source="75" target="76" label="AST"><data key="type">AST</data></edge><edge id="92" source="77" target="78" label="AST"><data key="type">AST</data></edge><edge id="98" source="77" target="84" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="93" source="78" target="79" label="AST"><data key="type">AST</data></edge><edge id="94" source="79" target="80" label="AST"><data key="type">AST</data></edge><edge id="236" source="180" target="181" label="AST"><data key="type">AST</data></edge><edge id="238" source="180" target="182" label="AST"><data key="type">AST</data></edge><edge id="241" source="180" target="185" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="237" source="181" target="182" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="239" source="182" target="183" label="AST"><data key="type">AST</data></edge><edge id="240" source="183" target="184" label="AST"><data key="type">AST</data></edge><edge id="264" source="185" target="197" label="AST"><data key="type">AST</data></edge><edge id="243" source="185" target="186" label="AST"><data key="type">AST</data></edge><edge id="255" source="185" target="194" label="AST"><data key="type">AST</data></edge><edge id="368" source="185" target="249" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="244" source="186" target="187" label="AST"><data key="type">AST</data></edge><edge id="254" source="186" target="194" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="245" source="187" target="188" label="AST"><data key="type">AST</data></edge><edge id="248" source="187" target="190" label="AST"><data key="type">AST</data></edge><edge id="250" source="187" target="191" label="AST"><data key="type">AST</data></edge><edge id="246" source="188" target="189" label="AST"><data key="type">AST</data></edge><edge id="247" source="188" target="190" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="95" source="80" target="81" label="AST"><data key="type">AST</data></edge><edge id="96" source="81" target="82" label="AST"><data key="type">AST</data></edge><edge id="97" source="82" target="83" label="AST"><data key="type">AST</data></edge><edge id="100" source="84" target="85" label="AST"><data key="type">AST</data></edge><edge id="106" source="84" target="91" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="101" source="85" target="86" label="AST"><data key="type">AST</data></edge><edge id="102" source="86" target="87" label="AST"><data key="type">AST</data></edge><edge id="103" source="87" target="88" label="AST"><data key="type">AST</data></edge><edge id="104" source="88" target="89" label="AST"><data key="type">AST</data></edge><edge id="105" source="89" target="90" label="AST"><data key="type">AST</data></edge><edge id="249" source="190" target="191" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="253" source="191" target="193" label="AST"><data key="type">AST</data></edge><edge id="251" source="191" target="192" label="AST"><data key="type">AST</data></edge><edge id="252" source="192" target="193" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="256" source="194" target="195" label="AST"><data key="type">AST</data></edge><edge id="262" source="194" target="196" label="AST"><data key="type">AST</data></edge><edge id="263" source="194" target="197" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="258" source="195" target="190" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="257" source="195" target="190" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="259" source="195" target="190" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="260" source="195" target="207" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="261" source="195" target="196" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="265" source="197" target="198" label="AST"><data key="type">AST</data></edge><edge id="343" source="197" target="240" label="AST"><data key="type">AST</data></edge><edge id="354" source="197" target="244" label="AST"><data key="type">AST</data></edge><edge id="312" source="197" target="223" label="AST"><data key="type">AST</data></edge><edge id="284" source="197" target="209" label="AST"><data key="type">AST</data></edge><edge id="266" source="198" target="199" label="AST"><data key="type">AST</data></edge><edge id="283" source="198" target="209" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="267" source="199" target="200" label="AST"><data key="type">AST</data></edge><edge id="270" source="199" target="202" label="AST"><data key="type">AST</data></edge><edge id="272" source="199" target="203" label="AST"><data key="type">AST</data></edge><edge id="108" source="91" target="92" label="AST"><data key="type">AST</data></edge><edge id="114" source="91" target="98" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="109" source="92" target="93" label="AST"><data key="type">AST</data></edge><edge id="110" source="93" target="94" label="AST"><data key="type">AST</data></edge><edge id="111" source="94" target="95" label="AST"><data key="type">AST</data></edge><edge id="112" source="95" target="96" label="AST"><data key="type">AST</data></edge><edge id="113" source="96" target="97" label="AST"><data key="type">AST</data></edge><edge id="116" source="98" target="99" label="AST"><data key="type">AST</data></edge><edge id="122" source="98" target="105" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="117" source="99" target="100" label="AST"><data key="type">AST</data></edge><edge id="2832" source="1403" target="1404" label="AST"><data key="type">AST</data></edge><edge id="2833" source="1403" target="1405" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2834" source="1402" target="1405" label="AST"><data key="type">AST</data></edge><edge id="2831" source="1402" target="1403" label="AST"><data key="type">AST</data></edge><edge id="2836" source="1402" target="1406" label="AST"><data key="type">AST</data></edge><edge id="2830" source="1401" target="1402" label="AST"><data key="type">AST</data></edge><edge id="2856" source="1401" target="1415" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2829" source="1400" target="1401" label="AST"><data key="type">AST</data></edge><edge id="2857" source="1400" target="1415" label="AST"><data key="type">AST</data></edge><edge id="2842" source="1409" target="1410" label="AST"><data key="type">AST</data></edge><edge id="2847" source="1409" target="1411" label="AST"><data key="type">AST</data></edge><edge id="2848" source="1409" target="1412" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2840" source="1408" target="1409" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2838" source="1407" target="1408" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2841" source="1406" target="1409" label="AST"><data key="type">AST</data></edge><edge id="2839" source="1406" target="1408" label="AST"><data key="type">AST</data></edge><edge id="2849" source="1406" target="1412" label="AST"><data key="type">AST</data></edge><edge id="2837" source="1406" target="1407" label="AST"><data key="type">AST</data></edge><edge id="2835" source="1405" target="1406" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2889" source="1415" target="1428" label="AST"><data key="type">AST</data></edge><edge id="2858" source="1415" target="1416" label="AST"><data key="type">AST</data></edge><edge id="2852" source="1413" target="1392" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2851" source="1413" target="1410" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2853" source="1413" target="1410" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2854" source="1413" target="1414" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2855" source="1412" target="1414" label="AST"><data key="type">AST</data></edge><edge id="2850" source="1412" target="1413" label="AST"><data key="type">AST</data></edge><edge id="2844" source="1410" target="1392" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2843" source="1410" target="1398" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2845" source="1410" target="1398" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2846" source="1410" target="1411" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2862" source="1419" target="1420" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2865" source="1418" target="1421" label="AST"><data key="type">AST</data></edge><edge id="2863" source="1418" target="1420" label="AST"><data key="type">AST</data></edge><edge id="2861" source="1418" target="1419" label="AST"><data key="type">AST</data></edge><edge id="2870" source="1418" target="1422" label="AST"><data key="type">AST</data></edge><edge id="2860" source="1417" target="1418" label="AST"><data key="type">AST</data></edge><edge id="2874" source="1417" target="1423" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2875" source="1416" target="1423" label="AST"><data key="type">AST</data></edge><edge id="2859" source="1416" target="1417" label="AST"><data key="type">AST</data></edge><edge id="2888" source="1416" target="1428" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2883" source="1426" target="1427" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2879" source="1425" target="1405" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2878" source="1425" target="1405" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2880" source="1425" target="1405" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2881" source="1425" target="1426" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2877" source="1424" target="1425" label="AST"><data key="type">AST</data></edge><edge id="2884" source="1424" target="1427" label="AST"><data key="type">AST</data></edge><edge id="2882" source="1424" target="1426" label="AST"><data key="type">AST</data></edge><edge id="2876" source="1423" target="1424" label="AST"><data key="type">AST</data></edge><edge id="2872" source="1422" target="1361" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2871" source="1422" target="1361" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2873" source="1422" target="1361" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2867" source="1421" target="1353" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2866" source="1421" target="1377" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2868" source="1421" target="1377" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2869" source="1421" target="1422" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2864" source="1420" target="1421" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2900" source="1429" target="1433" label="AST"><data key="type">AST</data></edge><edge id="2895" source="1429" target="1432" label="AST"><data key="type">AST</data></edge><edge id="2893" source="1429" target="1431" label="AST"><data key="type">AST</data></edge><edge id="2891" source="1429" target="1430" label="AST"><data key="type">AST</data></edge><edge id="2890" source="1428" target="1429" label="AST"><data key="type">AST</data></edge><edge id="2886" source="1427" target="1422" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2885" source="1427" target="1422" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2887" source="1427" target="1422" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2909" source="1436" target="1437" label="AST"><data key="type">AST</data></edge><edge id="2910" source="1436" target="1438" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2907" source="1435" target="1436" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2911" source="1434" target="1438" label="AST"><data key="type">AST</data></edge><edge id="2908" source="1434" target="1436" label="AST"><data key="type">AST</data></edge><edge id="2906" source="1434" target="1435" label="AST"><data key="type">AST</data></edge><edge id="2915" source="1434" target="1441" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2902" source="1433" target="1421" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2901" source="1433" target="1421" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2903" source="1433" target="1421" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2897" source="1432" target="1427" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2896" source="1432" target="1427" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2898" source="1432" target="1427" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2899" source="1432" target="1433" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2894" source="1431" target="1432" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2892" source="1430" target="1431" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2913" source="1439" target="1440" label="AST"><data key="type">AST</data></edge><edge id="2914" source="1439" target="1434" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2912" source="1438" target="1439" label="AST"><data key="type">AST</data></edge><edge id="2932" source="1451" target="1452" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2933" source="1450" target="1452" label="AST"><data key="type">AST</data></edge><edge id="2931" source="1450" target="1451" label="AST"><data key="type">AST</data></edge><edge id="2935" source="1450" target="1453" label="AST"><data key="type">AST</data></edge><edge id="2945" source="1450" target="1460" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2927" source="1448" target="1449" label="AST"><data key="type">AST</data></edge><edge id="2928" source="1448" target="1441" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2410" source="1205" target="1206" label="AST"><data key="type">AST</data></edge><edge id="2411" source="1205" target="1207" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2926" source="1447" target="1448" label="AST"><data key="type">AST</data></edge><edge id="2412" source="1204" target="1207" label="AST"><data key="type">AST</data></edge><edge id="2409" source="1204" target="1205" label="AST"><data key="type">AST</data></edge><edge id="2413" source="1204" target="1208" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2407" source="1203" target="1204" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2923" source="1445" target="1446" label="AST"><data key="type">AST</data></edge><edge id="2426" source="1202" target="1216" label="AST"><data key="type">AST</data></edge><edge id="2414" source="1202" target="1208" label="AST"><data key="type">AST</data></edge><edge id="2434" source="1202" target="1221" label="AST"><data key="type">AST</data></edge><edge id="2432" source="1202" target="1220" label="AST"><data key="type">AST</data></edge><edge id="2420" source="1202" target="1212" label="AST"><data key="type">AST</data></edge><edge id="2408" source="1202" target="1204" label="AST"><data key="type">AST</data></edge><edge id="2406" source="1202" target="1203" label="AST"><data key="type">AST</data></edge><edge id="2562" source="1202" target="1273" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2921" source="1444" target="1445" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2922" source="1443" target="1445" label="AST"><data key="type">AST</data></edge><edge id="2920" source="1443" target="1444" label="AST"><data key="type">AST</data></edge><edge id="2924" source="1443" target="1447" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2398" source="1200" target="1147" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2397" source="1200" target="1184" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2401" source="1200" target="1184" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2400" source="1200" target="1157" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2399" source="1200" target="1147" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2402" source="1200" target="1201" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2918" source="1442" target="1443" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2919" source="1441" target="1443" label="AST"><data key="type">AST</data></edge><edge id="2917" source="1441" target="1442" label="AST"><data key="type">AST</data></edge><edge id="2925" source="1441" target="1447" label="AST"><data key="type">AST</data></edge><edge id="2929" source="1441" target="1450" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2416" source="1209" target="1210" label="AST"><data key="type">AST</data></edge><edge id="2417" source="1209" target="1211" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2415" source="1208" target="1209" label="AST"><data key="type">AST</data></edge><edge id="2418" source="1208" target="1211" label="AST"><data key="type">AST</data></edge><edge id="2419" source="1208" target="1212" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge></graph></graphml>